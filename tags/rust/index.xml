<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on AmiaaaZ's Site</title><link>https://amiaaaz.github.io/tags/rust/</link><description>Recent content in Rust on AmiaaaZ's Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 06 Jul 2023 01:23:26 +0800</lastBuildDate><atom:link href="https://amiaaaz.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust学习笔记Ⅰ</title><link>https://amiaaaz.github.io/2023/07/06/rust-stduy-notes-01/</link><pubDate>Thu, 06 Jul 2023 01:23:26 +0800</pubDate><guid>https://amiaaaz.github.io/2023/07/06/rust-stduy-notes-01/</guid><description>&lt;p>Q: 为啥突然学Rust？&lt;/p>
&lt;p>A: &lt;del>没有为啥，闲的&lt;/del> 一方面是入夏以来输入/输出都很少，不是好现象，另一方面是也在听南大的操作系统课，rust正好就是对标c/c++的系统级编程语言，不如拿来学学 跟上最新的语言特性和发展进程x&lt;/p>
&lt;hr>
&lt;h2 id="环境配置">环境配置&lt;/h2>
&lt;p>*为了上手方便，暂时下文涉及到的都是windows环境（我懒）&lt;/p>
&lt;ul>
&lt;li>前提：Visual Studio及相关组件 &lt;a href="https://visualstudio.microsoft.com/zh-hans/downloads/">https://visualstudio.microsoft.com/zh-hans/downloads/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>如果不安装这些组件会直接影响Rust的正常运行&lt;/p>
&lt;p>如果直接用rustup-init.exe安装，会默认安装Windows 11 SDK，我是手动在Visual Studio Installer中选择了Windows 10 SDK&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230614154924534.png" alt="image-20230614154924534">&lt;/p>
&lt;p>*也可以不用官方的installer、不安装Visual Studio，用独立出来的cpp build tools~&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230616164819078.png" alt="image-20230616164819078">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>本体：https://www.rust-lang.org/tools/install&lt;/p>
&lt;/li>
&lt;li>
&lt;p>IDE：Intellij Rust插件&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>曾经我也是重视的VS code信徒，但其实看似简单之下隐藏了很多繁琐的配置，而且内存占用其实并不小……还是入股Intellij了&lt;/p>
&lt;ul>
&lt;li>Hello, world!&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230614155344723.png" alt="image-20230614155344723">&lt;/p>
&lt;p>Intellij Rust默认配置下会直接生成Cargo项目 方便管理&lt;/p>
&lt;ul>
&lt;li>卸载Rust&lt;/li>
&lt;/ul>
&lt;p>如果一个不小心安装有问题&amp;hellip;&lt;/p>
&lt;pre tabindex="0">&lt;code>rustup self uninstall
&lt;/code>&lt;/pre>&lt;h2 id="语言特色">语言特色&lt;/h2>
&lt;p>这几年断断续续接触了很多语言（C, Python, PHP, Java, Javascript, Go&amp;hellip;.），逐渐感受到各个编程语言在“和而不同”之余 存在各自的“舒适区”，这个舒适区由语言特性等很多因素共同决定；如果硬把需求安排在一个不适合的语言，那真的是如鲠在喉，语言是工具 不是目的&lt;/p>
&lt;ul>
&lt;li>优点：速度快，内存利用率高，性能好，生成的可执行文件为静态编译，跨平台&lt;/li>
&lt;li>缺点：编译器严格、编译耗时长，学习曲线陡峭&lt;/li>
&lt;li>与其他语言的对比：属于强类型，代码风格类似C/C++，会用项目的概念来组织代码文件（类似Java的Maven）&lt;/li>
&lt;li>敏感肌也很喜欢：可以编写shellcode loader&lt;/li>
&lt;li>杀手级特性：让可能出现的安全问题、undefined behavior消失在编译前&lt;/li>
&lt;/ul>
&lt;h2 id="语法基础">语法基础&lt;/h2>
&lt;p>use this book~ &lt;a href="https://rust-book.cs.brown.edu/">The Rust Programming Language&lt;/a>&lt;/p>
&lt;h3 id="变量可变性">变量&amp;amp;可变性&lt;/h3>
&lt;p>&lt;code>const&lt;/code>修饰的都是完全不可变的，必须指明数据类型，作用域为全局&lt;/p>
&lt;p>&lt;code>let&lt;/code>修饰的不可变，&lt;code>let mut&lt;/code>修饰的可变，作用域为当前函数&lt;/p>
&lt;p>shadowing的存在使我们可以使用同名变量，但只有可变的变量才可以被shadowing&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#111">()&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">const&lt;/span> &lt;span style="color:#00a8c8">SECRET_NUM&lt;/span>: &lt;span style="color:#00a8c8">u32&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span>&lt;span style="color:#111">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">a&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;a&amp;#34;&lt;/span>&lt;span style="color:#111">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// a = &amp;#34;b&amp;#34;; // will error, not mutable
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#00a8c8">mut&lt;/span> &lt;span style="color:#111">x&lt;/span>: &lt;span style="color:#00a8c8">u32&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#00a8c8">mut&lt;/span> &lt;span style="color:#111">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#111">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">x&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#111">;&lt;/span> &lt;span style="color:#75715e">// shadowing
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">println!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#d88200">{x}&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span> &lt;span style="color:#75715e">// 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">println!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#d88200">{SECRET_NUM}&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">)&lt;/span> &lt;span style="color:#75715e">// 12
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">println!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#d88200">{x}&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span> &lt;span style="color:#75715e">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">println!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#d88200">{SECRET_NUM}&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">)&lt;/span> &lt;span style="color:#75715e">// 12
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="数据类型">数据类型&lt;/h3>
&lt;p>rust是statically typed language静态类型语言，写代码时没有显式声明的类型都会由编译器进行推断，如果发生错误会无法成功build&lt;/p>
&lt;h4 id="标量">标量&lt;/h4>
&lt;ul>
&lt;li>整型：默认i32，isize/usize主要作为某些集合的索引，编译器会检测interger overflow&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230615035627186.png" alt="image-20230615035627186">&lt;/p>
&lt;p>*debug模式编译下会检查integer overflow，release构建中则不会检查，如果出现此类错误 rust会进行two&amp;rsquo;s complement wrapping的操作（也就是u8下 256-&amp;gt;0, 257-&amp;gt;1），不会因此panic 但可能出现非预期情况，不鼓励这样做；如果确实需要这样的“优化”，可选用如下函数&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230615040141460.png" alt="image-20230615040141460">&lt;/p>
&lt;p>*对这一特性我表示存疑，本机环境cargo 1.70.0 (ec8a8a0ca 2023-04-25)，并不会因为加上&lt;code>--release&lt;/code>就不检查溢出了，还是会在compile阶段报错退出&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230615040800001.png" alt="image-20230615040800001">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>浮点型：默认f64（与f32速度几乎一样 但精度更高）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>布尔型：true, false(fool)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>字符型：单引号char代表一个unicode标量值&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="复合类型">复合类型&lt;/h4>
&lt;ul>
&lt;li>元组tuple 可包含不同类型数据, 数组array 必须每个元素类型相同&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#111">()&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">tup&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">(&lt;/span>&lt;span style="color:#ae81ff">500&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#ae81ff">3.14&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#ae81ff">42&lt;/span>&lt;span style="color:#111">);&lt;/span> &lt;span style="color:#75715e">// tup: (i32, f64, u8)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">x&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">z&lt;/span>&lt;span style="color:#111">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">tup&lt;/span>&lt;span style="color:#111">;&lt;/span> &lt;span style="color:#75715e">// destructuring
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">println!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#d88200">{z}&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span> &lt;span style="color:#75715e">// 42
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">println!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#d88200">{}&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">tup&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">)&lt;/span> &lt;span style="color:#75715e">// 3.14
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#111">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">t&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">([&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#111">],&lt;/span> &lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#111">;&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#111">]);&lt;/span> &lt;span style="color:#75715e">// t: ([i32; 3], [i32; 4])
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">a&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">_&lt;/span>&lt;span style="color:#111">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">t&lt;/span>&lt;span style="color:#111">;&lt;/span> &lt;span style="color:#75715e">// a = [1, 1], _ = [3, 3, 3]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">println!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#d88200">{}&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">a&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#111">]&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">t&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#111">]);&lt;/span> &lt;span style="color:#75715e">// 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>*当出现数组元素越界访问时不会出现编译错误，但会出现运行时错误而panic退出&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">use&lt;/span> &lt;span style="color:#111">std&lt;/span>::&lt;span style="color:#111">io&lt;/span>&lt;span style="color:#111">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#111">()&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">a&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#111">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">println!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Please enter an array index.&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#00a8c8">mut&lt;/span> &lt;span style="color:#111">index&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">String&lt;/span>::&lt;span style="color:#111">new&lt;/span>&lt;span style="color:#111">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">io&lt;/span>::&lt;span style="color:#111">stdin&lt;/span>&lt;span style="color:#111">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">read_line&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#00a8c8">mut&lt;/span> &lt;span style="color:#111">index&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">expect&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Failed to read line&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">index&lt;/span>: &lt;span style="color:#00a8c8">usize&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">index&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">trim&lt;/span>&lt;span style="color:#111">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">parse&lt;/span>&lt;span style="color:#111">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">expect&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Index entered was not a number&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">element&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">a&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#111">index&lt;/span>&lt;span style="color:#111">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">println!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;The value of the element at index &lt;/span>&lt;span style="color:#d88200">{index}&lt;/span>&lt;span style="color:#d88200"> is: &lt;/span>&lt;span style="color:#d88200">{element}&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230615044316550.png" alt="image-20230615044316550">&lt;/p>
&lt;h3 id="函数">函数&lt;/h3>
&lt;p>函数和变量名均使用snake case规范（下划线分隔小写单词），被使用的函数可位于任何位置，&lt;code>main&lt;/code>为入口&lt;/p>
&lt;p>函数声明必须带参数类型&lt;/p>
&lt;p>可以用&lt;code>{}&lt;/code>创建新作用域（代码块），&lt;code>{}&lt;/code>是会计算并返回值的表达式，表达式的结尾没有分号，语句有分号、不返回值&lt;/p>
&lt;p>函数的返回值无需命名，但需要声明类型&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#111">()&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">plus_one&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">println!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;The value of x is: &lt;/span>&lt;span style="color:#d88200">{}&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">plus_one&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">x&lt;/span>: &lt;span style="color:#00a8c8">i32&lt;/span>&lt;span style="color:#111">)&lt;/span> -&amp;gt; &lt;span style="color:#00a8c8">i32&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">x&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#75715e">// `x + 1;` will error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="控制流">控制流&lt;/h3>
&lt;p>可以直接对变量使用if/else，但要小心由此可能产生的类型问题：变量必须只有一个类型&lt;/p>
&lt;p>循环有loop/while/for，loop需要手动停止循环，可以通过设置label来停止嵌套loop（适用于多次重试）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#111">()&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#00a8c8">mut&lt;/span> &lt;span style="color:#111">count&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#111">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">&amp;#39;counting_up&lt;/span>: &lt;span style="color:#75af00">loop&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">println!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;count = &lt;/span>&lt;span style="color:#d88200">{count}&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#00a8c8">mut&lt;/span> &lt;span style="color:#111">remaining&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#111">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">loop&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">println!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;remaining = &lt;/span>&lt;span style="color:#d88200">{remaining}&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#111">remaining&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">break&lt;/span>&lt;span style="color:#111">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#111">count&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">break&lt;/span> &lt;span style="color:#111">&amp;#39;counting_up&lt;/span>&lt;span style="color:#111">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">remaining&lt;/span> &lt;span style="color:#f92672">-=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">count&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">println!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;End count = &lt;/span>&lt;span style="color:#d88200">{count}&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>for可以方便的遍历数组，方便程度不亚于python&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#111">()&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">a&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#ae81ff">30&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#ae81ff">40&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#ae81ff">50&lt;/span>&lt;span style="color:#111">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#111">element&lt;/span> &lt;span style="color:#00a8c8">in&lt;/span> &lt;span style="color:#111">a&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">println!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;the value is: &lt;/span>&lt;span style="color:#d88200">{element}&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#111">()&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#111">number&lt;/span> &lt;span style="color:#00a8c8">in&lt;/span> &lt;span style="color:#111">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">..&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#111">).&lt;/span>&lt;span style="color:#111">rev&lt;/span>&lt;span style="color:#111">()&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">println!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#d88200">{number}&lt;/span>&lt;span style="color:#d88200">!&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">println!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;LIFTOFF!!!&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="所有权">所有权&lt;/h3>
&lt;p>所有权ownership是rust的特性，正是它让rust做到内存安全和无需垃圾回收&lt;/p>
&lt;p>这里的“安全”，在rust中意味着完全不容许&lt;a href="https://doc.rust-lang.org/reference/behavior-considered-undefined.html">undefined behavior&lt;/a>的存在（即使unsafe也不行），为了实现这一目标 rust将大量的功夫用在了compile-time而不是run-time，这样减少了潜在的运行时bug 也侧面提升了性能（减少运行的check），所有权则是这一理念下 内存安全方面的具体实践&lt;/p>
&lt;h4 id="堆box">堆&amp;amp;Box&lt;/h4>
&lt;p>rust中，和函数有关的参数等数据存于栈上，堆上的数据则可以不依赖函数独立分配，可以使用&lt;code>Box::new&lt;/code>来手动分配数据到堆，所有权会自动在“合适的时机”释放这块内存&lt;/p>
&lt;p>&lt;strong>Box deallocation principle(fully correct):&lt;/strong> if a variable owns a box, when Rust deallocates the variable&amp;rsquo;s frame, the Rust deallocates the box&amp;rsquo;s heap memory.
原则：当使用Box的变量在它的作用域内结束、被释放，那Box所在的堆内存也会被释放（也就是上面说的“合适的时机”，这一释放过程都被rust自动管理，无需手动控制）&lt;/p>
&lt;p>很多数据结构内部都是用Box实现的，比如&lt;code>Vec&lt;/code>, &lt;code>String&lt;/code>, &lt;code>HashMap&lt;/code>&lt;/p>
&lt;p>下面的栗子里，但执行到第四行时会报错，因为first已经不指向&lt;code>Ferris&lt;/code>了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#111">()&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">first&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">String&lt;/span>::&lt;span style="color:#111">from&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Ferris&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span> &lt;span style="color:#75715e">// L1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">full&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">add_suffix&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">first&lt;/span>&lt;span style="color:#111">);&lt;/span> &lt;span style="color:#75715e">// L4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">println!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#d88200">{full}&lt;/span>&lt;span style="color:#d88200">, originally &lt;/span>&lt;span style="color:#d88200">{first}&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span> &lt;span style="color:#75715e">// L5 will error!!!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">add_suffix&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#00a8c8">mut&lt;/span> &lt;span style="color:#111">name&lt;/span>: &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#111">)&lt;/span> -&amp;gt; &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// L2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">push_str&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34; Jr.&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span> &lt;span style="color:#75715e">// L3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230615140242885.png" alt="image-20230615140242885">&lt;/p>
&lt;p>实际过程则是这样的：&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230615135453255.png" alt="image-20230615135453255">&lt;/p>
&lt;p>在L2阶段时发生指针复制，原有指针未消失，但我们不能再直接用原来的指针，也就是下面的规则：&lt;/p>
&lt;p>&lt;strong>Moved heap data principle:&lt;/strong> if a variable x moves ownership of heap data to another variable y, then x cannot be used after move.&lt;/p>
&lt;p>&lt;code>clone&lt;/code>方法可以在指针复制的同时不丢失原指针的所有权，“绕过”上面的规则&lt;/p>
&lt;p>&lt;del>在同一作用域内、只在栈上拷贝的数据也不受上述规则的限制（废话了，毕竟是在栈上）&lt;/del>&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230615141118932.png" alt="image-20230615141118932">&lt;/p>
&lt;p>*答错的一道quiz：选出下面会出现undefined behavior的选项&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230615141806059.png" alt="image-20230615141806059">&lt;/p>
&lt;p>关键在于：在b被传入&lt;code>move_a_box&lt;/code>后、b才会被释放&lt;/p>
&lt;h4 id="引用借用">引用&amp;amp;借用&lt;/h4>
&lt;p>*这部分内容有C的基础会好理解一些&lt;/p>
&lt;p>非常显然，如果严格按照上面所有权的规则进行 变量被moved之后再想找到原来的值就需要在函数上添加一个返回值，然而我们经常需要使用那个值！&lt;/p>
&lt;p>引用reference就是解决这个问题的，它作为Non-owning pointer存在，允许使用堆上的值 但不直接指向堆&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#111">()&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">m1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">String&lt;/span>::&lt;span style="color:#111">from&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">m2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">String&lt;/span>::&lt;span style="color:#111">from&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;world&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span> &lt;span style="color:#75715e">// L1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">greet&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#111">m1&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#111">m2&lt;/span>&lt;span style="color:#111">);&lt;/span> &lt;span style="color:#75715e">// L3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">format!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#d88200">{}&lt;/span>&lt;span style="color:#d88200"> &lt;/span>&lt;span style="color:#d88200">{}&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">m1&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">m2&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">greet&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">g1&lt;/span>: &lt;span style="color:#00a8c8">&amp;amp;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">g2&lt;/span>: &lt;span style="color:#00a8c8">&amp;amp;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#111">)&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// L2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">println!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#d88200">{}&lt;/span>&lt;span style="color:#d88200"> &lt;/span>&lt;span style="color:#d88200">{}&lt;/span>&lt;span style="color:#d88200">!&amp;#34;&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">g1&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">g2&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230615143339298.png" alt="image-20230615143339298">&lt;/p>
&lt;p>&lt;code>&amp;amp;m1&lt;/code>作为m1的引用、再作为greet的参数，这一行为被称为借用borrowing&lt;/p>
&lt;p>&lt;code>*&lt;/code>作为前缀表示解引用，可以读出具体数据，修改&lt;code>*x&lt;/code>的值就是修改&lt;code>x&lt;/code>指向堆内存的值&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230615151017338.png" alt="image-20230615151017338">&lt;/p>
&lt;p>只有第一次的解引用&lt;code>*x&lt;/code>可以被修改值并同步堆内存的修改，二次解引用的&lt;code>**&amp;amp;x&lt;/code>只可以读值不可以修改，而&lt;code>&amp;amp;*x&lt;/code>是直接指向值的引用指针、和&lt;code>*x&lt;/code>的数据类型并不一样&lt;/p>
&lt;p>&lt;code>*x&lt;/code>, &lt;code>**&amp;amp;x&lt;/code>和&lt;code>*&amp;amp;*x&lt;/code>三者是完全等价的（数据类型、值），都可以直接读出堆内存指向的值，但只有&lt;code>*x&lt;/code>可被改值&lt;/p>
&lt;p>&lt;strong>Pointer Safety Principle:&lt;/strong> data should never be aliased and mutated at the same time.
数据不可以&lt;u>同时&lt;/u> 既有别名（存在引用）、又本身可变&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230616143232706.png" alt="image-20230616143232706">&lt;/p>
&lt;p>在上面的例子中，当&lt;code>vec.push(4)&lt;/code>被执行时，原&lt;code>vec&lt;/code>的cap和len都需要增大，为了满足新的cap和len的需求 很可能会重新分配在堆上的位置，所以&lt;code>num&lt;/code>是否还指向&lt;code>vec[2]&lt;/code>就是undefined behavior，很可能出现潜在的安全问题，所以这一行为会被编译器阻止&lt;/p>
&lt;p>borrow checker的核心原理是检查它们的权限&lt;/p>
&lt;ul>
&lt;li>read: data can be copied to another location&lt;/li>
&lt;li>write: data can be mutated in-place&lt;/li>
&lt;li>own: data can be moved or dropped&lt;/li>
&lt;/ul>
&lt;p>这些权限只存在于编译期用于编译器来进行检查，而引用/别名的出现会暂时对原有变量的权限做出改变；让我们深入了解在上面例子中 read, write, own权限都发生了什么样的变化：&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230616145353540.png" alt="image-20230616145353540">&lt;/p>
&lt;p>我们可以看到，在&lt;code>vec&lt;/code>被&lt;code>num&lt;/code>借用期间，&lt;code>vec&lt;/code>会丢失write和owner权限，而对应的&lt;code>num&lt;/code>如果可变则获取write和owner权限 不可变则只获得owner权限，&lt;code>*num&lt;/code>的权限和被借用的&lt;code>vec&lt;/code>保持一致；一旦存在引用就会使数据的权限发生变化（暂时变成read-only），当引用消失 权限就会立刻回收，把write+owner权限还给原数据&lt;/p>
&lt;p>而上上张图（出现undefined behavior的反例）中则有这样的权限关系&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230616151045240.png" alt="image-20230616151045240">&lt;/p>
&lt;p>编译时会在&lt;code>vec.push(4)&lt;/code>就报错 而不是第四行&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230616151300402.png" alt="image-20230616151300402">&lt;/p>
&lt;p>浅层原因（蛋）是borrow checker已经检测到 第三行的&lt;code>vec&lt;/code>只有read，而write权限被&lt;code>num&lt;/code>借走了，所以此时&lt;code>vec&lt;/code>不可变 导致报错，深层原因（鸡）则是rust为了避免可能存在的安全问题 而设计了这样的borrow checker（先鸡后蛋）&lt;/p>
&lt;p>上面所有提到的&lt;code>&amp;amp;&lt;/code>引用都是不可变引用immutable reference（也叫做shared references），它作为non-owning pointer 只作为不可变的别名；然而我们也可以让它暂时拥有write权限（仍然非owner），也就是&lt;code>&amp;amp;mut&lt;/code>，可变引用mutable reference（也叫做unique reference）&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230619144108851.png" alt="image-20230619144108851">&lt;/p>
&lt;p>对比前面的不可变引用&lt;code>num&lt;/code>有这些区别：&lt;/p>
&lt;ul>
&lt;li>不可变引用：原数据仍有read权限，&lt;code>num&lt;/code>只读+owner，&lt;code>*num&lt;/code>只读&lt;/li>
&lt;li>可变引用：原数据失去所有权限，&lt;code>num&lt;/code>只读+owner，&lt;code>*num&lt;/code>可读可写&lt;/li>
&lt;/ul>
&lt;p>在可变引用存在时，实际是允许了可变而避免了别名——原数据失去read权限，而&lt;code>*可变引用&lt;/code>可读可写，可以直接通过&lt;code>*可变引用&lt;/code>操作原数据内容&lt;/p>
&lt;p>可变引用也可以降权为read-only的引用&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230619150722466.png" alt="image-20230619150722466">&lt;/p>
&lt;p>这里的&lt;code>num2&lt;/code>是对&lt;code>*num&lt;/code>的引用，因此把&lt;code>*num&lt;/code>的write和owner权限借走了，又因为是不可变引用，&lt;code>*num2&lt;/code>只读 不可写&lt;/p>
&lt;p>上面讨论的都是在顺序执行流里 权限在引用存在时的流动关系，当if-else等控制流存在时 基本相同，不再赘述&lt;/p>
&lt;p>*两道比较复杂的题，有亿点让人头大&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230616161802457.png" alt="image-20230616161802457">&lt;/p>
&lt;p>当rust判断 数据存在引用时，就会失去原有的write权限，当引用结束了它的生命周期，write会被归还&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230616162437517.png" alt="image-20230616162437517">&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230619153804139.png" alt="image-20230619153804139">&lt;/p>
&lt;p>这个题 其它几个选项的描述都是对的，但只有use after being free的解释是最根本的&lt;/p>
&lt;p>作为Pointer Safety Principle的一部分，borrow checker也会强制要求数据的生存时间必须大于它的任何引用，然鹅 当引用作为函数的输入或输出时，rust是无法确定这个引用的生存周期的，rust在这种情况下引入了F权限&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230619154721628.png" alt="image-20230619154721628">&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230619155103418.png" alt="image-20230619155103418">&lt;/p>
&lt;p>这个例子就不会被成功编译，因为只从函数声明来看无法确定输出的&lt;code>&amp;amp;String&lt;/code>类型的对象是&lt;code>strings&lt;/code>的引用还是&lt;code>default&lt;/code>的引用；如果&lt;code>default&lt;/code>进入了&lt;code>first_or&lt;/code>的程序流、最后返回&lt;code>default&lt;/code>，在经过drop之后就无法正确打印&lt;code>s&lt;/code>了，因为&lt;code>s&lt;/code>指向的&lt;code>default&lt;/code>已经无了&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230619155304536.png" alt="image-20230619155304536">&lt;/p>
&lt;p>这样的例子也是不安全的，因为当函数执行完毕后&lt;code>&amp;amp;s&lt;/code>会消失&lt;/p>
&lt;h4 id="如何修复报错">如何修复报错&lt;/h4>
&lt;h5 id="returning-a-reference-to-the-stack">&lt;strong>Returning a reference to the stack&lt;/strong>&lt;/h5>
&lt;p>*核心：返回引用需要关心 引用指向的原数据能不能活到函数提供返回值，如果坚持返回引用 需要加生命周期的前缀，或者放弃返回引用 直接返回数据本身&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">return_a_string&lt;/span>&lt;span style="color:#111">()&lt;/span>-&amp;gt; &lt;span style="color:#00a8c8">&amp;amp;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">String&lt;/span>::&lt;span style="color:#111">from&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Hello, world&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#111">s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个例子中当需要返回&lt;code>&amp;amp;s&lt;/code>时它已经寄了，不能保证&lt;code>s&lt;/code>获得足够长&lt;/p>
&lt;p>有4种方式可以延长字符串的寿命&lt;/p>
&lt;ol>
&lt;li>将返回类型由&lt;code>&amp;amp;String&lt;/code>改为&lt;code>String&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">return_a_string&lt;/span>&lt;span style="color:#111">()&lt;/span> -&amp;gt; &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">String&lt;/span>::&lt;span style="color:#111">from&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Hello world&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>返回静态字符串（当我们无需涉及堆内存分配时&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">return_a_string&lt;/span>&lt;span style="color:#111">()&lt;/span> -&amp;gt; &lt;span style="color:#00a8c8">&amp;amp;&lt;/span>&lt;span style="color:#111">&amp;#39;static&lt;/span> &lt;span style="color:#00a8c8">str&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34;Hello world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>显式调用gc，将borrow-checking挪到运行时&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">use&lt;/span> &lt;span style="color:#111">std&lt;/span>::&lt;span style="color:#111">rc&lt;/span>::&lt;span style="color:#111">Rc&lt;/span>&lt;span style="color:#111">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">return_a_string&lt;/span>&lt;span style="color:#111">()&lt;/span> -&amp;gt; &lt;span style="color:#75af00">Rc&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Rc&lt;/span>::&lt;span style="color:#111">new&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">String&lt;/span>::&lt;span style="color:#111">from&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Hello world&amp;#34;&lt;/span>&lt;span style="color:#111">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Rc&lt;/span>::&lt;span style="color:#111">clone&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Rc::clone&lt;/code>仅克隆指向&lt;code>s&lt;/code>的指针 而不克隆数据，在运行时 Rc会检查最后一个指向数据的Rc何时删除 并在那之后释放数据&lt;/p>
&lt;ol start="4">
&lt;li>添加可变引用作为函数参数&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">return_a_string&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">output&lt;/span>: &lt;span style="color:#00a8c8">&amp;amp;&lt;/span>&lt;span style="color:#75af00">mut&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#111">)&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">output&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">replace_range&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#f92672">..&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;Hello world&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由函数调用放负责为返回的字符串创建空间，但是如果运用得当 这种做法是memory-efficient的&lt;/p>
&lt;h5 id="not-enough-permissions">Not enough permissions&lt;/h5>
&lt;p>*当试图修改只读数据，或在存在引用时删除数据&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230619164157328.png" alt="image-20230619164157328">&lt;/p>
&lt;p>这个例子的第二行就会报错，因为&lt;code>name&lt;/code>本身是不可变引用 不存在write权限&lt;/p>
&lt;p>我们希望这样调用&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230619164821878.png" alt="image-20230619164821878">&lt;/p>
&lt;p>&lt;code>first&lt;/code>指向&lt;code>name[0]&lt;/code>，&lt;code>name.push()&lt;/code>重新分配了&lt;code>name&lt;/code> 导致打印&lt;code>first&lt;/code>会报错；也就是在存在&lt;code>&amp;amp;name&lt;/code>时还试图修改&lt;code>name&lt;/code>&lt;/p>
&lt;p>如何修改？如果只是简单粗暴的修改接收参数的类型（从不可变引用改为可变引用）是很不负责任的做法，因为传入的参数可被修改 这不是调用方所预期的行为&lt;/p>
&lt;p>另一个选择是将引用改为数据，确保传入的&lt;code>name&lt;/code>一定拥有&lt;code>name&lt;/code>的所有权——但这也不是好的解决方案，rust并不鼓励直接传入像Vec或String这样的数据类型&lt;/p>
&lt;p>那么传入的&lt;code>&amp;amp;Vec&amp;lt;String&amp;gt;&lt;/code>类型和传出的&lt;code>String&lt;/code>都不改变，只有修改函数体了&lt;/p>
&lt;ol>
&lt;li>克隆传入参数&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">stringify_name_with_title&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">name&lt;/span>: &lt;span style="color:#00a8c8">&amp;amp;&lt;/span>&lt;span style="color:#111">Vec&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#111">)&lt;/span> -&amp;gt; &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#00a8c8">mut&lt;/span> &lt;span style="color:#111">name_clone&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">clone&lt;/span>&lt;span style="color:#111">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">name_clone&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">push&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">String&lt;/span>::&lt;span style="color:#111">from&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Esq.&amp;#34;&lt;/span>&lt;span style="color:#111">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">full&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name_clone&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">join&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">full&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过克隆&lt;code>name&lt;/code>，我们可以直接修改这个vector的副本 且不影响原参数&lt;/p>
&lt;ol start="2">
&lt;li>使用已存在的函数&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">stringify_name_with_title&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">name&lt;/span>: &lt;span style="color:#00a8c8">&amp;amp;&lt;/span>&lt;span style="color:#111">Vec&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#111">)&lt;/span> -&amp;gt; &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#00a8c8">mut&lt;/span> &lt;span style="color:#111">full&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">join&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">full&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">push_str&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34; Esq.&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">full&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>看情况会用到的方式&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// before
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">round_in_place&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">v&lt;/span>: &lt;span style="color:#00a8c8">&amp;amp;&lt;/span>&lt;span style="color:#111">Vec&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#00a8c8">f32&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#111">)&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#00a8c8">in&lt;/span> &lt;span style="color:#111">v&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">round&lt;/span>&lt;span style="color:#111">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// error[E0594]: cannot assign to `*n`, which is behind a `&amp;amp;` reference
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// --&amp;gt; test.rs:4:9
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// after
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">round_in_place&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">v&lt;/span>: &lt;span style="color:#00a8c8">&amp;amp;&lt;/span>&lt;span style="color:#75af00">mut&lt;/span> &lt;span style="color:#111">Vec&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#00a8c8">f32&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#111">)&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#00a8c8">in&lt;/span> &lt;span style="color:#111">v&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">round&lt;/span>&lt;span style="color:#111">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这个对小数取整的函数中，需要对传入的Vec一一修改，最好的方式是将参数改为可变引用 并直接用&lt;code>*n&lt;/code>修改原数据&lt;/p>
&lt;h5 id="aliasing-and-mutating-a-data-structure">Aliasing and mutating a data structure&lt;/h5>
&lt;p>*指的是一个引用指向的堆数据被其它的别名解引用&lt;/p>
&lt;p>举例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">add_big_strings&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">dst&lt;/span>: &lt;span style="color:#00a8c8">&amp;amp;&lt;/span>&lt;span style="color:#75af00">mut&lt;/span> &lt;span style="color:#111">Vec&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">src&lt;/span>: &lt;span style="color:#00a8c8">&amp;amp;&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#111">]){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">largest&lt;/span>: &lt;span style="color:#00a8c8">&amp;amp;&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">dst&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">iter&lt;/span>&lt;span style="color:#111">().&lt;/span>&lt;span style="color:#111">max_by_key&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#f92672">|&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">len&lt;/span>&lt;span style="color:#111">()).&lt;/span>&lt;span style="color:#111">unwrap&lt;/span>&lt;span style="color:#111">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#00a8c8">in&lt;/span> &lt;span style="color:#111">src&lt;/span>&lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">len&lt;/span>&lt;span style="color:#111">()&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#111">largest&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">len&lt;/span>&lt;span style="color:#111">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">dst&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">push&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">clone&lt;/span>&lt;span style="color:#111">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第二行largest会把dst的write权限借走 直到倒数第四行&lt;code>push&lt;/code>时仍没有归还，但此时dst是需要write权限的，就会引起编译器报错——因为&lt;code>dst.push()&lt;/code>可能会影响dst的数据，导致largest的引用失效&lt;/p>
&lt;p>为了解决这个问题 我们缩短largest的生存周期&lt;/p>
&lt;ol>
&lt;li>对largest克隆&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">add_big_strings&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">dst&lt;/span>: &lt;span style="color:#00a8c8">&amp;amp;&lt;/span>&lt;span style="color:#75af00">mut&lt;/span> &lt;span style="color:#111">Vec&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">src&lt;/span>: &lt;span style="color:#00a8c8">&amp;amp;&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#111">])&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">largest&lt;/span>: &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">dst&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">iter&lt;/span>&lt;span style="color:#111">().&lt;/span>&lt;span style="color:#111">max_by_key&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#f92672">|&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">len&lt;/span>&lt;span style="color:#111">()).&lt;/span>&lt;span style="color:#111">unwrap&lt;/span>&lt;span style="color:#111">().&lt;/span>&lt;span style="color:#111">clone&lt;/span>&lt;span style="color:#111">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#00a8c8">in&lt;/span> &lt;span style="color:#111">src&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">len&lt;/span>&lt;span style="color:#111">()&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">largest&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">len&lt;/span>&lt;span style="color:#111">()&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">dst&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">push&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">clone&lt;/span>&lt;span style="color:#111">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但可能会影响性能&lt;/p>
&lt;ol start="2">
&lt;li>将比较和push分开执行&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">add_big_strings&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">dst&lt;/span>: &lt;span style="color:#00a8c8">&amp;amp;&lt;/span>&lt;span style="color:#75af00">mut&lt;/span> &lt;span style="color:#111">Vec&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">src&lt;/span>: &lt;span style="color:#00a8c8">&amp;amp;&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#111">])&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">largest&lt;/span>: &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">dst&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">iter&lt;/span>&lt;span style="color:#111">().&lt;/span>&lt;span style="color:#111">max_by_key&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#f92672">|&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">len&lt;/span>&lt;span style="color:#111">()).&lt;/span>&lt;span style="color:#111">unwrap&lt;/span>&lt;span style="color:#111">().&lt;/span>&lt;span style="color:#111">clone&lt;/span>&lt;span style="color:#111">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#00a8c8">in&lt;/span> &lt;span style="color:#111">src&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">len&lt;/span>&lt;span style="color:#111">()&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">largest&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">len&lt;/span>&lt;span style="color:#111">()&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">dst&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">push&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">clone&lt;/span>&lt;span style="color:#111">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>*修复核心：缩短借出去的时间，保证本体在需要对应权限（如write）的时候不出问题&lt;/p>
&lt;h5 id="copying-vs-moving-out-of-a-collection">Copying vs moving out of a collection&lt;/h5>
&lt;p>从vector中复制数据有可能对新手造成困扰&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230706002622348.png" alt="image-20230706002622348">&lt;/p>
&lt;p>在上图的例子中，第二行对&lt;code>v[0]&lt;/code>引用 全场无write，到第三行对&lt;code>n_ref&lt;/code>解引用后&lt;code>n&lt;/code>顺利读出来值，但如果vector内的组成元素不是i32而是String则会有点问题&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230706002900121.png" alt="image-20230706002900121">&lt;/p>
&lt;p>除了第一行以外其它都一样 但会报错&lt;/p>
&lt;p>原因是，&lt;code>s&lt;/code>、&lt;code>v&lt;/code>和&lt;code>s_ref&lt;/code>实际都指向字符串，一旦之后这三个有一个被dropped，关联的变量也会dropped，就会发生double-free&lt;/p>
&lt;p>然而这种undefined behavior并不会发生在含有i32的vector中！区别就是复制String实际是会复制一个指向heap data的指针，而复制i32不会；在Rust的官方解释中说：i32有Copy trait，String没有&lt;/p>
&lt;p>*总之，当一个值不用上堆，那它可以随意复制，比如i32和&amp;amp;String，而String在堆上 拥有heap data，就不能直接复制&lt;/p>
&lt;p>*特例：对&lt;code>mut&lt;/code>类型数据有特殊操作，比如&lt;code>&amp;amp;mut i32&lt;/code>也是不能复制的，如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#00a8c8">mut&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#111">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">a&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#00a8c8">mut&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#111">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">b&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">a&lt;/span>&lt;span style="color:#111">;&lt;/span> &lt;span style="color:#75715e">// wrong
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这时为了避免两个可变引用指向同一个数据&lt;/p>
&lt;p>那应该如何正确复制呢？&lt;/p>
&lt;ol>
&lt;li>避免对String切换所有权，只是使用不可变引用本身&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">v&lt;/span>: &lt;span style="color:#111">Vec&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">vec!&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#111">String&lt;/span>::&lt;span style="color:#111">from&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Hello, World&amp;#34;&lt;/span>&lt;span style="color:#111">)];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">s_ref&lt;/span>: &lt;span style="color:#00a8c8">&amp;amp;&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#111">v&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#111">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">println&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;{s_ref}&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>用无敌的克隆，获得String的所有权&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">v&lt;/span>: &lt;span style="color:#111">Vec&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Vec&lt;/span>&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#111">String&lt;/span>::&lt;span style="color:#111">from&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Hello, world&amp;#34;&lt;/span>&lt;span style="color:#111">)];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#00a8c8">mut&lt;/span> &lt;span style="color:#111">s&lt;/span>: &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">v&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#111">].&lt;/span>&lt;span style="color:#111">clone&lt;/span>&lt;span style="color:#111">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">push&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;!&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">println&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;{s}&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>用内置方法&lt;code>Vec::remove&lt;/code>将String拿出来&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#00a8c8">mut&lt;/span> &lt;span style="color:#111">v&lt;/span>: &lt;span style="color:#111">Vec&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">vec!&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#111">String&lt;/span>::&lt;span style="color:#111">from&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;hello world&amp;#34;&lt;/span>&lt;span style="color:#111">)];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#00a8c8">mut&lt;/span> &lt;span style="color:#111">s&lt;/span>: &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">v&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">remove&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">push&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;!&amp;#39;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">println&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;{s}&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">assert!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">v&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">len&lt;/span>&lt;span style="color:#111">()&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="mutating-different-tuple-fieldssafe">Mutating Different Tuple Fields(safe)&lt;/h5>
&lt;p>以上的报错都来自于潜在的安全性问题，但完全没有安全性问题的程序也可能会报错，因为Rust采用了细粒度的权限分级，然而Rust也可能会把不同的path合并为同一path&lt;/p>
&lt;p>举例1：从tuple中拿一个元素给另一个tuple&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#111">()&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#00a8c8">mut&lt;/span> &lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span>::&lt;span style="color:#111">from&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Ferris&amp;#34;&lt;/span>&lt;span style="color:#111">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span>::&lt;span style="color:#111">from&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Rustacean&amp;#34;&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">first&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#111">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#ae81ff">1.&lt;/span>&lt;span style="color:#111">push_str&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;, Esq.&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">println!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#d88200">{first}&lt;/span>&lt;span style="color:#d88200"> &lt;/span>&lt;span style="color:#d88200">{}&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>first&lt;/code>借走了&lt;code>name.0&lt;/code>的String，两者都不拥有write和own权限，但&lt;code>name.1&lt;/code>仍有write 我们可以自由的使用&lt;code>name.1.push_str()&lt;/code>&lt;/p>
&lt;p>举例2：换成函数的写法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">get_first&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">name&lt;/span>: &lt;span style="color:#00a8c8">&amp;amp;&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#111">))&lt;/span> -&amp;gt; &lt;span style="color:#00a8c8">&amp;amp;&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">fn&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#111">()&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#00a8c8">mut&lt;/span> &lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span>::&lt;span style="color:#111">from&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Ferris&amp;#34;&lt;/span>&lt;span style="color:#111">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span>::&lt;span style="color:#111">from&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Rustacean&amp;#34;&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">first&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">get_first&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#ae81ff">1.&lt;/span>&lt;span style="color:#111">push_str&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;, Esq.&amp;#34;&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">println!&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#d88200">{first}&lt;/span>&lt;span style="color:#d88200"> &lt;/span>&lt;span style="color:#d88200">{}&lt;/span>&lt;span style="color:#d88200">&amp;#34;&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里是对&lt;code>&amp;amp;name&lt;/code>整体传参，所以&lt;code>name.1&lt;/code>的write权限也无了&lt;/p>
&lt;p>由此可见，Rust不关心具体的函数实现，只关心传入传出的参数类型&lt;/p>
&lt;p>*可恶！正确的函数也会被误伤&lt;/p>
&lt;h5 id="mutating-different-array-elementssafe">Mutating different array elements(safe)&lt;/h5>
&lt;p>类似的，对array也会有一样的效果——恶意中伤！&lt;/p>
&lt;p>我们可以用内置函数来避免&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#00a8c8">mut&lt;/span> &lt;span style="color:#111">a&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#111">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">x&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">rest&lt;/span>&lt;span style="color:#111">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">a&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#111">split_first_mut&lt;/span>&lt;span style="color:#111">().&lt;/span>&lt;span style="color:#111">unwrap&lt;/span>&lt;span style="color:#111">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#111">rest&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#111">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#111">x&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#111">y&lt;/span>&lt;span style="color:#111">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者unsafe!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#00a8c8">mut&lt;/span> &lt;span style="color:#111">a&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#111">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#00a8c8">mut&lt;/span> &lt;span style="color:#111">a&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#111">]&lt;/span> &lt;span style="color:#00a8c8">as&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#00a8c8">mut&lt;/span> &lt;span style="color:#00a8c8">i32&lt;/span>&lt;span style="color:#111">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">let&lt;/span> &lt;span style="color:#111">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#111">a&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">]&lt;/span> &lt;span style="color:#00a8c8">as&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#00a8c8">const&lt;/span> &lt;span style="color:#00a8c8">i32&lt;/span>&lt;span style="color:#111">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">unsafe&lt;/span> &lt;span style="color:#111">{&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#111">x&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#111">y&lt;/span>&lt;span style="color:#111">;&lt;/span> &lt;span style="color:#111">}&lt;/span> &lt;span style="color:#75715e">// DO NOT DO THIS unless you know what you&amp;#39;re doing!
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>unsafe blocks允许使用裸指针，也不会被borrow checker检查安全性（好耶&lt;/p>
&lt;p>*这一章的几个题还挺难的 在这里记录一下&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230706012106722.png" alt="image-20230706012106722">&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230706012120596.png" alt="image-20230706012120596">&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230706012151836.png" alt="image-20230706012151836">&lt;/p></description></item></channel></rss>