<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PENTEST on AmiaaaZ's Site</title><link>https://amiaaaz.github.io/tags/pentest/</link><description>Recent content in PENTEST on AmiaaaZ's Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 05 Jul 2023 21:37:07 +0800</lastBuildDate><atom:link href="https://amiaaaz.github.io/tags/pentest/index.xml" rel="self" type="application/rss+xml"/><item><title>SQL注入在实战中的Tips合集</title><link>https://amiaaaz.github.io/2023/07/05/sqli-tricks-in-pentest/</link><pubDate>Wed, 05 Jul 2023 21:37:07 +0800</pubDate><guid>https://amiaaaz.github.io/2023/07/05/sqli-tricks-in-pentest/</guid><description>&lt;p>锐意更新中:)&lt;/p>
&lt;hr>
&lt;h2 id="order-by注入">order by注入&lt;/h2>
&lt;p>老生常谈，参数中出现可能为字段或表名、或出现排序有关的（比如desc, asc）就会被怀疑是sql注入点，但不是所有这种“疑似能注入”的地方都能被注——或者说重点关注什么样的字段是有说法的，这一点结合sql注入防御会更好理解&lt;/p>
&lt;p>以php为例，php.ini可以设置&lt;code>magic_quotes_gpc=on&lt;/code>开启对引号的转义，mysql中设&lt;code>secure_file_priv=null&lt;/code>，代码中使用PDO预编译并设置&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230705224758318.png" alt="image-20230705224758318">&lt;/p>
&lt;p>以上三项如果设置有误同样会导致报错注入的产生&lt;/p>
&lt;p>java中的防御步骤类似，除了叠waf以外 也无非是转义/预编译、黑/白名单、设权限三板斧，后两者先不论， &lt;strong>mybatis&lt;/strong>在对参数进行预处理时是不可以对order by后的参数使用&lt;code>#{}&lt;/code>的，而是只可以使用&lt;code>${}&lt;/code>！原因时order by语句后的字段名或字段位置是不可以加引号的，而使用预编译则一定会带&lt;code>'&lt;/code>，导致可能出现的注入（普通预编译也会这样）；而&lt;strong>Hibernate&lt;/strong>相对来说可以避免这一问题&lt;/p>
&lt;p>而order by注入本身由于语义的原因 是不能直接使用&lt;code>and 1=1&lt;/code>来判断的，需要用到条件语句做嵌套，举例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#00a8c8">from&lt;/span> &lt;span style="color:#00a8c8">admin&lt;/span> &lt;span style="color:#00a8c8">order&lt;/span> &lt;span style="color:#00a8c8">by&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">,&lt;/span>&lt;span style="color:#111">username&lt;/span>&lt;span style="color:#111">,&lt;/span>&lt;span style="color:#111">password&lt;/span>&lt;span style="color:#111">);&lt;/span> &lt;span style="color:#f92672">#&lt;/span> &lt;span style="color:#111">example&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#00a8c8">from&lt;/span> &lt;span style="color:#00a8c8">admin&lt;/span> &lt;span style="color:#00a8c8">order&lt;/span> &lt;span style="color:#00a8c8">by&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#111">((&lt;/span>&lt;span style="color:#111">substr&lt;/span>&lt;span style="color:#111">((&lt;/span>&lt;span style="color:#00a8c8">select&lt;/span> &lt;span style="color:#00a8c8">user&lt;/span>&lt;span style="color:#111">()),&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">,&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">)&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">&amp;#39;r&amp;#39;&lt;/span>&lt;span style="color:#111">),&lt;/span>&lt;span style="color:#111">username&lt;/span>&lt;span style="color:#111">,&lt;/span>&lt;span style="color:#111">password&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>时间盲注也不能简单使用&lt;code>sleep()&lt;/code>，因为会对查询的每条内容执行排序 可能会造成ddos，需要用到子查询&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#00a8c8">from&lt;/span> &lt;span style="color:#00a8c8">admin&lt;/span> &lt;span style="color:#00a8c8">order&lt;/span> &lt;span style="color:#00a8c8">by&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#111">((&lt;/span>&lt;span style="color:#111">substr&lt;/span>&lt;span style="color:#111">((&lt;/span>&lt;span style="color:#00a8c8">select&lt;/span> &lt;span style="color:#00a8c8">user&lt;/span>&lt;span style="color:#111">()),&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">,&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">)&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">&amp;#39;r&amp;#39;&lt;/span>&lt;span style="color:#111">),&lt;/span>&lt;span style="color:#111">sleep&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#111">),&lt;/span>&lt;span style="color:#111">password&lt;/span>&lt;span style="color:#111">);&lt;/span> &lt;span style="color:#f92672">#&lt;/span> &lt;span style="color:#111">may&lt;/span> &lt;span style="color:#111">ddos&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#00a8c8">from&lt;/span> &lt;span style="color:#00a8c8">admin&lt;/span> &lt;span style="color:#00a8c8">order&lt;/span> &lt;span style="color:#00a8c8">by&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#111">((&lt;/span>&lt;span style="color:#111">substr&lt;/span>&lt;span style="color:#111">((&lt;/span>&lt;span style="color:#00a8c8">select&lt;/span> &lt;span style="color:#00a8c8">user&lt;/span>&lt;span style="color:#111">()),&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">,&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">)&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">&amp;#39;r&amp;#39;&lt;/span>&lt;span style="color:#111">),(&lt;/span>&lt;span style="color:#00a8c8">select&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#00a8c8">from&lt;/span> &lt;span style="color:#111">(&lt;/span>&lt;span style="color:#00a8c8">select&lt;/span> &lt;span style="color:#111">sleep&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#111">))&lt;/span> &lt;span style="color:#00a8c8">as&lt;/span> &lt;span style="color:#111">b&lt;/span>&lt;span style="color:#111">),&lt;/span>&lt;span style="color:#111">password&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>报错&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#00a8c8">from&lt;/span> &lt;span style="color:#00a8c8">admin&lt;/span> &lt;span style="color:#00a8c8">order&lt;/span> &lt;span style="color:#00a8c8">by&lt;/span> &lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">extractvalue&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">,&lt;/span>&lt;span style="color:#111">concat&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#111">x3a&lt;/span>&lt;span style="color:#111">,&lt;/span>&lt;span style="color:#00a8c8">version&lt;/span>&lt;span style="color:#111">())),&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="sqlmap实用参数">sqlmap实用参数&lt;/h2>
&lt;p>官方文档：https://github.com/sqlmapproject/sqlmap/wiki/Usage&lt;/p>
&lt;ul>
&lt;li>&lt;code>-p &amp;quot;&amp;lt;param&amp;gt;&amp;quot;&lt;/code>：指定注入参数，如遇POST+json类型的请求包（或需要自定义注入位置） 在要注入的位置加&lt;code>*&lt;/code>&lt;/li>
&lt;li>&lt;code>-U &amp;quot;CU&amp;quot; --passwords&lt;/code>：爆破当前用户的密码hash，&lt;code>--passwords&lt;/code>爆所有用户hash&lt;/li>
&lt;li>&lt;code>--csrf-token=&amp;quot;&amp;lt;csrf name&amp;gt;&amp;quot;&lt;/code>：指定页面隐藏的csrf-token参数，可通过&lt;code>--csrf-url=&amp;quot;&amp;lt;url&amp;gt;&amp;quot;&lt;/code>指定token来源的地址，还可以通过&lt;code>--eval&lt;/code>配合处理多个参数（效果拔群）&lt;/li>
&lt;li>&lt;code>--gui&lt;/code>：启动自带GUI界面，包含各种参数的使用说明&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230705174602794.png" alt="image-20230705174602794">&lt;/p>
&lt;ul>
&lt;li>sqlmap根目录下自带一个&lt;code>sqlmapapi.py&lt;/code> 封装了一些接口，可以通过这些接口发起扫描（不常见也不常用，但应该对造轮子有帮助&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230705174431111.png" alt="image-20230705174431111">&lt;/p>
&lt;h2 id="sqlmap坑点">sqlmap坑点&lt;/h2>
&lt;ul>
&lt;li>&lt;code>--batch&lt;/code>在windows和linux上表现不同&lt;/li>
&lt;li>如果不是&lt;code>-r&lt;/code>指定请求包，请注意sqlmap发包是否会导致相应包全是302，如果出现这种情况 建议指定部分请求头&lt;/li>
&lt;li>小概率出现：别人电脑上能跑出来注入 但你不行的玄学情况，偶发性bug 暂未找到原因&lt;/li>
&lt;/ul>
&lt;h2 id="oracle注入及后续利用">Oracle注入及后续利用&lt;/h2>
&lt;p>单独把Oracle数据库拿出来说的原因是sqlmap并不支持对它执行&lt;code>--os-cmd&lt;/code>或&lt;code>--os-shell&lt;/code>，所以与mysql, mssql相比稍有区别&lt;/p>
&lt;ol>
&lt;li>
&lt;p>收集信息，库名、表名一把梭，列列重要数据 &lt;del>（刷分用&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查当前用户的密码hash并尝试爆明文&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>--is-dba # 是否dba
-U &amp;#34;CU&amp;#34; --passwords # 当前用户密码
--passwords # 所有用户密码
&lt;/code>&lt;/pre>&lt;ol start="3">
&lt;li>用sql-shell查当前SID和当前ip，尝试外连&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>select instance_name from v$instance
select sys_context(&amp;#39;userenv&amp;#39;,&amp;#39;ip_address&amp;#39;) from dual
&lt;/code>&lt;/pre>&lt;ol start="4">
&lt;li>如果可以外连，用 &lt;a href="https://github.com/SafeGroceryStore/MDUT">Multiple Database Utilization Tools&lt;/a>做后续利用&lt;/li>
&lt;/ol>
&lt;p>*此处举例用户名为sys（是dba），用户名这里需要改为&lt;code>sys as sysdba&lt;/code>才能正确连接！&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230705180830895.png" alt="image-20230705180830895">&lt;/p>
&lt;p>MDUT自带了HTTP隧道功能，还有常见的提权一把梭+列系统文件&lt;/p>
&lt;ol start="5">
&lt;li>
&lt;p>*如果不能外连但为高权限用户，尝试执行java代码反弹（待补充）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Navicat或DBeaver查看数据库内具体内容；Navicat可以使用对应的隧道&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>云函数在肾透测试中的应用</title><link>https://amiaaaz.github.io/2023/07/04/scf-in-pentest/</link><pubDate>Tue, 04 Jul 2023 23:58:18 +0800</pubDate><guid>https://amiaaaz.github.io/2023/07/04/scf-in-pentest/</guid><description>&lt;p>*边实操边更新，绝不会太监的（确信&lt;/p>
&lt;hr>
&lt;p>最近测站遇到一个套了阿里云盾的目标，访问频率快会封，sqlmap/被动扫描会封，到后面挂burp也会封，甚至对Firefox浏览器还做了特殊对待……wifi和流量都被封，想到了之前看过的云函数相关技巧，遂试一试&lt;/p>
&lt;h2 id="做http代理">做http代理&lt;/h2>
&lt;p>项目地址：&lt;a href="https://github.com/hashsecteam/scf-proxy">scf-proxy&lt;/a>&lt;/p>
&lt;p>设置事件函数+API网关触发，记得把集成响应打开！云函数会将自动把json格式的返回包处理成http响应报文 起到类似反向代理的效果&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230705000704102.png" alt="image-20230705000704102">&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230705000748807.png" alt="image-20230705000748807">&lt;/p>
&lt;p>几个坑点：&lt;/p>
&lt;ol>
&lt;li>集成响应一定要开……不开的话返回内容就是4个字段的JSON，惨不忍睹&lt;/li>
&lt;li>这是http代理，不是socks5代理！！！用作burp的代理前请三思&lt;/li>
&lt;li>自行开发的话，云函数本体的参数和返回值都要严格遵守JSON格式要求&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230705001411027.png" alt="image-20230705001411027">&lt;/p>
&lt;p>有如此“反向代理”的能力之后，我们可以借助它隐藏webshell请求真实地址、做dirsearch/sqlmap等扫描器的代理防止被ban、隐藏c2，原理都是一样的 只是代码稍有区别&lt;/p>
&lt;h2 id="隐藏c2">隐藏c2&lt;/h2>
&lt;p>*哈哈 别急 等我买一手vps 去去就来&lt;/p></description></item><item><title>前端加密下的渗透测试起手式</title><link>https://amiaaaz.github.io/2023/07/04/how-to-set-up-your-workflow-when-meeting-frontend-encrypt/</link><pubDate>Tue, 04 Jul 2023 23:33:04 +0800</pubDate><guid>https://amiaaaz.github.io/2023/07/04/how-to-set-up-your-workflow-when-meeting-frontend-encrypt/</guid><description>&lt;p>起因为实战中遇到的一个站点，请求参数使用js前端加密，即使加密过程很简单 但仍希望有一个中间hook能直接看到明文，如果能接入sqlmap直接测试（免去写tamper）的过程就更好了，于是有了本文&lt;/p>
&lt;p>*均已脱敏，所以可能看起来比较简单？whatever&lt;/p>
&lt;p>*060923（金）：增加部分内容&lt;/p>
&lt;p>*070423（火）：过于铸币，今天才想起来要push&lt;/p>
&lt;h2 id="前置">前置&lt;/h2>
&lt;p>拾起远古js逆向技巧，f12大法伺候之下理清加密逻辑，从&lt;code>encrypt.js&lt;/code>中抠出可以单独执行的加密函数&lt;code>jscode&lt;/code>以便被execjs调用&lt;/p>
&lt;p>把加密函数替换为空，其余不变另存一份&lt;code>encrypt2.js&lt;/code>&lt;/p>
&lt;h2 id="yakit">yakit&lt;/h2>
&lt;p>我们希望能在burpsuite中直接看到明文来方便调试，让我们用yakit来做到这一点：&lt;/p>
&lt;ol>
&lt;li>准备jscode&lt;/li>
&lt;li>yakit脚本编写：劫持encrypt.js响应，让其返回的encrypt函数为明文（encrypt2.js）；劫持/xyz.action且带data的POST请求，将body明文参数的name和value分别用jscode做加密处理&lt;/li>
&lt;li>配置burpsuite上游代理为yakit，yakit下游代理为最外层代理（可选）&lt;/li>
&lt;/ol>
&lt;p>yak脚本示例：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-yak" data-lang="yak">func encrypt(name){
jscode = `...function encrypt(){}...`
encoded, _ = js.CallFunctionFromCode(jscode,&amp;#34;encrypt&amp;#34;,name)
return encoded, _
}
hijackHTTPRequest = func(isHttps, url, req, forward /*func(modifiedRequest []byte)*/, drop /*func()*/) {
urls := [&amp;#34;xyz&amp;#34;, &amp;#34;qwe&amp;#34;]
if str.Contains(string(url), &amp;#34;.action&amp;#34;){
sUrl := str.Split(str.Split(string(url),&amp;#34;.action&amp;#34;)[0],&amp;#34;/&amp;#34;)[-1]
for url in urls{
if str.Contains(sUrl,url){
freq = fuzz.HTTPRequest(req)~
tmp := &amp;#34;&amp;#34;
for param in freq.GetPostQueryKeys(){
value,_ := codec.UnescapeQueryUrl(freq.GetPostQueryValue(param))
param,_ := codec.UnescapeQueryUrl(param)
value0,_ = encrypt(value)
param0,_ := encrypt(param)
trmp := codec.EscapeQueryUrl(string(param0)) +&amp;#34;=&amp;#34;+ codec.EscapeQueryUrl(str.ReplaceAll(string(value0),&amp;#34;+&amp;#34;,&amp;#34; &amp;#34;))
tmp = tmp+&amp;#34;&amp;amp;&amp;#34;+trmp
}
modifiedBytes := freq.FuzzPostRaw(str.TrimLeft(tmp,&amp;#34;&amp;amp;&amp;#34;)).FirstHTTPRequestBytes()
forward(modifiedBytes)
}
}
}
}
hijackHTTPResponse = func(isHttps, url, rsp, forward, drop) {
a1 = b`...encrypt2.js...`
if str.Contains(string(url), &amp;#34;encrypt.js&amp;#34;) {
modified = poc.FixHTTPResponse(a1)
forward(modified)
}
}
&lt;/code>&lt;/pre>&lt;p>经过这样的劫持，请求包会呈现这样的流向：&lt;/p>
&lt;ul>
&lt;li>原本&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>浏览器 POST /xyz.action 加密参数（由encrypt.js加密）
-&amp;gt; burpsuite 拦截加密参数和请求
-&amp;gt; 发送加密请求
-&amp;gt; burpsuite得到响应 浏览器得到响应
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>修改后&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>浏览器 POST /xyz.action 明文参数（由修改后的encrypt2.js返回明文）
-&amp;gt; burpsuite 拦截明文参数和请求
-&amp;gt; 发送给上游代理yakit
-&amp;gt; yakit 拦截明文参数和请求 做加密处理
-&amp;gt; 发送加密请求
-&amp;gt; yakit得到响应 burpsuite得到响应 浏览器得到响应
&lt;/code>&lt;/pre>&lt;p>这样burp中可以看到明文请求和正常响应，方便我们爆破和其他测试（比如接入burp, xray等等）&lt;/p>
&lt;h2 id="mitmproxy">mitmproxy&lt;/h2>
&lt;p>但话说回来，yakit本身是一个比较庞大的类burp软件，编写脚本还必须使用yaklang，我更倾向于使用mitmproxy来做相同的事情，毕竟用python写是再轻松不过了~&lt;/p>
&lt;p>mitmproxy为每一种连接方式（http, socks&amp;hellip;.）提供了5个生命周期（修改阶段），体现在代码里就是我们可声明的函数&lt;/p>
&lt;ul>
&lt;li>&lt;code>requestheaders&lt;/code>：仅读取headers，此时body为空&lt;/li>
&lt;li>&lt;code>request&lt;/code>：读取到request全文；注意如果streaming传输开启，劫持在stream之后发生&lt;/li>
&lt;li>&lt;code>responseheaders&lt;/code>：仅读headers，body为空&lt;/li>
&lt;li>&lt;code>response&lt;/code>：读取response全文；注意如果streaming传输开启，劫持在stream之后发生&lt;/li>
&lt;li>&lt;code>error&lt;/code>：http error&lt;/li>
&lt;li>&lt;code>http_connect&lt;/code>&lt;/li>
&lt;li>&lt;code>http_connect_upstream&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>简单举例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">execjs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">def&lt;/span> &lt;span style="color:#75af00">encrypt&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">var&lt;/span>&lt;span style="color:#111">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">with&lt;/span> &lt;span style="color:#111">open&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;encrypt.js&amp;#39;&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#d88200">&amp;#39;r&amp;#39;&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">encoding&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span> &lt;span style="color:#00a8c8">as&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#111">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ctx&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">execjs&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">compile&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">read&lt;/span>&lt;span style="color:#111">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">encoded_var&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">call&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;encode&amp;#39;&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">var&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">var&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Modify&lt;/span>&lt;span style="color:#111">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">def&lt;/span> &lt;span style="color:#75af00">request&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">self&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">flow&lt;/span>&lt;span style="color:#111">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#111">flow&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">url&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">startswith&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;...&amp;#39;&lt;/span>&lt;span style="color:#111">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#111">flow&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">urlencoded_form&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#75715e"># 此处的urlencoded_form是[(name, value), (...)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">data&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">in&lt;/span> &lt;span style="color:#111">flow&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">urlencoded_form&lt;/span>&lt;span style="color:#111">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">data&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">append&lt;/span>&lt;span style="color:#111">((&lt;/span>&lt;span style="color:#111">encrypt&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">i&lt;/span>&lt;span style="color:#111">),&lt;/span> &lt;span style="color:#111">encrypt&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">flow&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">urlencoded_form&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#111">i&lt;/span>&lt;span style="color:#111">])))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">flow&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">urlencoded_form&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">addons&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Modify&lt;/span>&lt;span style="color:#111">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pip install mitmporxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># $env:all_proxy = &amp;#34;socks5://127.0.0.1:6005&amp;#34; # 可选&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mitmdump -p &lt;span style="color:#ae81ff">8085&lt;/span> -s addon.py &lt;span style="color:#75715e"># 8085给burp做上游代理&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然而实际编写符合要求的脚本时就陷入了困难——官方文档简直是****，让人不忍卒读&amp;hellip;&amp;hellip;这里推荐这份文档：&lt;a href="https://github.com/mochazi/mitmproxy-doc-cn/tree/master">Mitmproxy-Document&lt;/a>，对每一个接口、参数如何设置都写的很详细，五星好评&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230609174248050.png" alt="image-20230609174248050">&lt;/p>
&lt;p>实测mimt可以为xray做上游代理进行正常测试，但是会比直接挂xray速度会慢一些 始终有pending的部分（但谁让mimt操作简单呢，我单方面宣布与这一缺点和解！&lt;/p>
&lt;h2 id="实例">实例&lt;/h2>
&lt;p>日常测站遇到的实例，参数被写死的key进行AES加密，返回内容也可用固定的key解密，直接抠出来替换（加密过程非常非常简单）&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230609175026087.png" alt="image-20230609175026087">&lt;/p>
&lt;p>这里遇到了第一个坑点：jsencrypt库是针对前端环境的，支持一种很奇怪的AES Public Key格式（126位），无法b64解码 也不含&lt;code>-----PUBLIC&lt;/code>这种标配的头，但是可以被正常使用，然而nodejs-jsencrypt库却不支持这种格式！！！！！所以需要单独为jsencrypt补上运行环境（见最上两行代码）&lt;/p>
&lt;p>之后就是把网页加载的 含有加密部分的代码换为空，让其返回明文，再编写mimt脚本&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230609175636518.png" alt="image-20230609175636518">&lt;/p>
&lt;p>第二个小坑点是mimt修改query参数竟然会自动进行urlencode&amp;hellip;&amp;hellip;我还改了半天，结果删掉&lt;code>quote()&lt;/code>就好了（是我自作多情了）&lt;/p>
&lt;p>然后就可以用burp 愉快的测站啦qwq&lt;/p></description></item><item><title>DNS域传送漏洞学习</title><link>https://amiaaaz.github.io/2022/05/06/dns-zone-transfer-study-note/</link><pubDate>Fri, 06 May 2022 16:52:58 +0800</pubDate><guid>https://amiaaaz.github.io/2022/05/06/dns-zone-transfer-study-note/</guid><description>&lt;p>DNS服务器提供域名解析的基础性服务，可以细分为主服务器、备份服务器、缓存服务器，备份服务器会从主服务器中拷贝数据来更新自己的数据库，而这个同步的过程中就需要用到DNS域传送，一旦配置不当，就可能会导致任何匿名用户都可以获取DNS服务器某一域的所有记录，泄露重要信息&lt;/p>
&lt;h2 id="漏洞成因">漏洞成因&lt;/h2>
&lt;p>在域传送中关键的配置项有这两个&lt;/p>
&lt;pre tabindex="0">&lt;code>allow-transfer {ipaddress;}; 通过ip限制可进行域传送的服务器
allow-transfer { key transfer; }; 通过key限制可进行域传送的服务器
&lt;/code>&lt;/pre>&lt;p>有两种设置方式，options或是zone，默认优先级为zone 如果为空则遵循options，示例&lt;/p>
&lt;pre tabindex="0">&lt;code>options {
listen-on { 1.1.1.1; };
listen-on-v6 { any; };
directory &amp;#34;/bind&amp;#34;;
pid-file &amp;#34;/bind/run/pid&amp;#34;;
dump-file &amp;#34;/bind/data/named_dump.db&amp;#34;;
statistics-file &amp;#34;/bind/data/named.stats&amp;#34;;
allow-transfer { any; };
allow-query {any;};
};
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>zone &amp;#34;wooyun.org&amp;#34; {
type master;
file &amp;#34;/bind/etc/wooyun.org.conf&amp;#34;;
allow-transfer {any;};
};
&lt;/code>&lt;/pre>&lt;p>如果没有手动添加&lt;code>allow-transfer&lt;/code>来限制获取记录的来源，就会存在DNS域传送漏洞&lt;/p>
&lt;h2 id="检测方式">检测方式&lt;/h2>
&lt;h3 id="dig--linux">dig / linux&lt;/h3>
&lt;p>以vulhub为例，以常规的8.8.8.8作为DNS服务器进行解析，如果发送axfr的请求会failed&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220506160422503.png" alt="image-20220506160422503">&lt;/p>
&lt;p>如果使用存在漏洞的DNS服务器进行查询，则会返回域内所有的字域、A记录和CNAME等信息&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220506160602721.png" alt="image-20220506160602721">&lt;/p>
&lt;h3 id="nslookup--windowslinux">nslookup / windows&amp;amp;linux&lt;/h3>
&lt;p>正常情况：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220506163501741.png" alt="image-20220506163501741">&lt;/p>
&lt;p>存在漏洞的情况（linux示例）：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220506164756031.png" alt="image-20220506164756031">&lt;/p>
&lt;h3 id="nmap">Nmap&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nmap -script dns-zone-transfer -script-args dns-zone-transfer.domain&lt;span style="color:#f92672">=&lt;/span>vulhub.org -p &lt;span style="color:#ae81ff">53&lt;/span> -Pn 172.27.0.2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="dnsrecon">dnsrecon&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>dnsrecon -d example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="dnsenum">dnsenum&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>dnsenum example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
以下是本文中涉及到的 和我学习时看过的所有文章的链接 每日感谢互联网的丰富资源（
&lt;/h4>
&lt;/summary>
&lt;p>&lt;a href="https://www.mi1k7ea.com/2021/04/03/%E6%B5%85%E6%9E%90DNS%E5%9F%9F%E4%BC%A0%E9%80%81%E6%BC%8F%E6%B4%9E/">浅析DNS域传送漏洞&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://drops.xmd5.com/static/drops/papers-64.html">DNS域传送信息泄露&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/vulhub/vulhub/blob/master/dns/dns-zone-transfer/README.zh-cn.md">vulhub复现环境&lt;/a>&lt;/p>
&lt;/details></description></item></channel></rss>