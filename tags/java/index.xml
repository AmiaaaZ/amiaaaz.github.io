<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on AmiaaaZ's Site</title><link>https://amiaaaz.github.io/tags/java/</link><description>Recent content in Java on AmiaaaZ's Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 27 Feb 2022 01:28:17 +0800</lastBuildDate><atom:link href="https://amiaaaz.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Java学习笔记Ⅰ</title><link>https://amiaaaz.github.io/2022/02/27/java-study-notes-01/</link><pubDate>Sun, 27 Feb 2022 01:28:17 +0800</pubDate><guid>https://amiaaaz.github.io/2022/02/27/java-study-notes-01/</guid><description>&lt;p>ctf里有几类题我是见到之后拔腿就跑，比如java和xss，对于后者，最近杂七杂八的学了很多js和前端的知识 没那么发怵了，而前者……不多说了，学学学！&lt;/p>
&lt;p>本篇学习内容来自于&lt;a href="https://www.liaoxuefeng.com/wiki/1252599548343744">廖雪峰Java教程&lt;/a>，个人感觉比较适合对其它语言也有一点掌握的人&lt;/p>
&lt;p>本机win10，为了兼容一些程序暂时有java8和11两个版；ide使用idea&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220226170711379.png" alt="image-20220226170711379">&lt;/p>
&lt;hr>
&lt;h2 id="java基础">Java基础&lt;/h2>
&lt;h3 id="java程序结构">java程序结构&lt;/h3>
&lt;ul>
&lt;li>src/xxx.java，类名为文件名，main为入口（idea直接输main会自动补全），idea格式化代码ctrl+shift+F&lt;/li>
&lt;li>类class习惯大写字母开头，方法method习惯小写字母开头，必须带分号（不同于js可有可无）&lt;/li>
&lt;/ul>
&lt;h3 id="classpathjar">classpath&amp;amp;jar&lt;/h3>
&lt;ul>
&lt;li>&lt;code>classpath&lt;/code>是JVM的环境变量，是一组目录的集合（分隔符由系统定&lt;/li>
&lt;li>推荐在启动JVM时设置&lt;code>classpath&lt;/code>变量，不要污染系统环境（可以放心的交给idea&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">java -classpath .&lt;span style="color:#111">;&lt;/span>C:&lt;span style="color:#8045ff">\w&lt;/span>ork&lt;span style="color:#8045ff">\p&lt;/span>roject1&lt;span style="color:#8045ff">\b&lt;/span>in&lt;span style="color:#111">;&lt;/span>C:&lt;span style="color:#8045ff">\s&lt;/span>hared abc.xyz.Hello
java -cp .&lt;span style="color:#111">;&lt;/span>C:&lt;span style="color:#8045ff">\w&lt;/span>ork&lt;span style="color:#8045ff">\p&lt;/span>roject1&lt;span style="color:#8045ff">\b&lt;/span>in&lt;span style="color:#111">;&lt;/span>C:&lt;span style="color:#8045ff">\s&lt;/span>hared abc.xyz.Hello
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>不要把任何Java核心库添加到classpath中！默认的当前目录&lt;code>.&lt;/code>对于绝大多数情况都够用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>jar包实际上就是一个zip格式的压缩文件，包含&lt;code>package&lt;/code>组织的目录层级，以及各个目录下的所有文件（包括&lt;code>.class&lt;/code>文件和其他文件），注意不含&lt;code>bin&lt;/code>目录（注意层级）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以把jar理解为n多个class文件的容器，JVM自带的Java标准库rt.jar也是以jar形式进行存放&lt;/p>
&lt;/li>
&lt;li>
&lt;p>jar不关心class之间的依赖，如果漏掉的话在运行期极有可能抛出&lt;code>ClassNotFoundException&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果我们要执行一个jar包的&lt;code>class&lt;/code>，就可以把jar包放到&lt;code>classpath&lt;/code>中&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">java -cp ./hello.jar abc.xyz.Hello
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>MANIFEST.MF&lt;/code>文件可以提供jar包的信息，如&lt;code>Main-Class&lt;/code>&lt;/li>
&lt;li>分析题目中给出jar包时我一般直接改zip解压，用idea打开整个目录作为项目（idea yyds&lt;/li>
&lt;/ul>
&lt;h3 id="模块">模块&lt;/h3>
&lt;ul>
&lt;li>Java9后引入，解决依赖问题，控制jar之间的相互调用&lt;/li>
&lt;li>把一堆class封装为jar仅仅是一个打包的过程，而把一堆class封装为模块则不但需要打包，还需要写入依赖关系，并且还可以包含二进制代码（通常是JNI扩展）&lt;/li>
&lt;li>以java的标准库rt.jar为例，被拆为&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>java.base.jmod
java.compiler.jmod
java.datatransfer.jmod
java.desktop.jmod
...
&lt;/code>&lt;/pre>&lt;p>以&lt;code>.jmod&lt;/code>为拓展名标识，每个文件都是一个模块，模块&lt;code>java.base&lt;/code>对应的文件就是&lt;code>java.base.jmod&lt;/code>&lt;/p>
&lt;ul>
&lt;li>模块之间的依赖关系已经被写入到模块内的&lt;code>module-info.class&lt;/code>文件了。所有的模块都直接或间接地依赖&lt;code>java.base&lt;/code>模块，只有&lt;code>java.base&lt;/code>模块不依赖任何模块，它可以被看作是根模块，好比所有的类都是从&lt;code>Object&lt;/code>直接或间接继承而来&lt;/li>
&lt;/ul>
&lt;p>编写模块的部分暂略。&lt;/p>
&lt;h3 id="javabean">JavaBean&lt;/h3>
&lt;p>指的是符合某种规范的一种编程模式或编程思想（个人理解&lt;/p>
&lt;p>部分Python爱好者也喜欢这么写，可拓展性强，就是很臃肿&lt;/p>
&lt;ul>
&lt;li>写方法&lt;code>setter&lt;/code>，读方法&lt;code>getter&lt;/code>，只有其中一种属性之一的被称为只写/读属性——满足这样规范的class被称为JavaBean&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#75715e">// 读方法:
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Type&lt;/span> &lt;span style="color:#75af00">getXyz&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#75715e">// 写方法:
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setXyz&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Type&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>要枚举一个JavaBean的所有属性，可以直接使用Java核心库提供的&lt;code>Introspector&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.beans.*&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">BeanInfo&lt;/span> &lt;span style="color:#111">info&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Introspector&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getBeanInfo&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Person&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 获取属性列表
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">PropertyDescriptor&lt;/span> &lt;span style="color:#111">pd&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">info&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getPropertyDescriptors&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">pd&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">pd&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getReadMethod&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">pd&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getWriteMethod&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">age&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">getAge&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">age&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setAge&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">age&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">age&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">age&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="语法基础">语法基础&lt;/h2>
&lt;h3 id="变量数据类型">变量&amp;amp;数据类型&lt;/h3>
&lt;ul>
&lt;li>类似c的赋值风格：&lt;code>类型 变量名 = 变量值&lt;/code>（不同于go）&lt;/li>
&lt;li>程序设计的一个重要原则：数据的存储和显示要分离&lt;/li>
&lt;li>执行&lt;code>int x = n&lt;/code>这样的变量赋值时，相当于两步操作，x与n是不同的存储单元&lt;/li>
&lt;li>基本类型有&lt;code>byte&lt;/code>, &lt;code>int&lt;/code>, &lt;code>short&lt;/code>, &lt;code>long&lt;/code>, &lt;code>float&lt;/code>, &lt;code>double&lt;/code>, &lt;code>boolean&lt;/code>, &lt;code>char&lt;/code>（表示ascii或一个Unicode字符），不可赋值null&lt;/li>
&lt;li>引用类型为所有class和interface类型，可赋值为null表示空&lt;/li>
&lt;li>使用对应的Wrapper Class包装类可以将基本类型视为引用类型(class)，好处是可以使用大量的实用方法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">100&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#75715e">// 通过new操作符创建Integer实例(不推荐使用,会有编译警告):
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">n1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">// 通过静态方法valueOf(int)创建Integer实例:
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">n2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">valueOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">// 通过静态方法valueOf(String)创建Integer实例:
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">n3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">valueOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;100&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">n3&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">intValue&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>每种基本类型都有其包装类型&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">基本类型&lt;/th>
&lt;th style="text-align:left">对应的引用类型&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">boolean&lt;/td>
&lt;td style="text-align:left">java.lang.Boolean&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">byte&lt;/td>
&lt;td style="text-align:left">java.lang.Byte&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">short&lt;/td>
&lt;td style="text-align:left">java.lang.Short&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">int&lt;/td>
&lt;td style="text-align:left">java.lang.Integer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">long&lt;/td>
&lt;td style="text-align:left">java.lang.Long&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">float&lt;/td>
&lt;td style="text-align:left">java.lang.Float&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">double&lt;/td>
&lt;td style="text-align:left">java.lang.Double&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">char&lt;/td>
&lt;td style="text-align:left">java.lang.Character&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>所有的整数和浮点数的包装类型都继承自&lt;code>Number&lt;/code>，因此，可以非常方便地直接通过包装类型获取各种基本类型&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#75715e">// 向上转型为Number:
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Number&lt;/span> &lt;span style="color:#111">num&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">999&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">// 获取byte, int, long, float, double:
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">byte&lt;/span> &lt;span style="color:#111">b&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">num&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">byteValue&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">num&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">intValue&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#00a8c8">long&lt;/span> &lt;span style="color:#111">ln&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">num&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">longValue&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#00a8c8">float&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">num&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">floatValue&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#00a8c8">double&lt;/span> &lt;span style="color:#111">d&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">num&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">doubleValue&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>由于java中并不存在无符号整型这一说，全部都是有整型的，需要通过包装类型的静态方法来完成，比如&lt;code>Byte.toUnsignedInt()&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>int&lt;/code>和对应的&lt;code>Integer&lt;/code>可以互相转化，甚至直接使用&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>Integer n = 100; // 编译器自动使用Integer.valueOf(int)
int x = n; // 编译器自动使用Integer.intValue()
&lt;/code>&lt;/pre>&lt;p>这种直接把&lt;code>int&lt;/code>变为&lt;code>Integer&lt;/code>的赋值写法，称为自动装箱（Auto Boxing）；反过来，把&lt;code>Integer&lt;/code>变为&lt;code>int&lt;/code>的赋值写法，称为自动拆箱（Auto Unboxing）&lt;/p>
&lt;p>注意：自动装箱和自动拆箱只发生在编译阶段，目的是为了少写代码。&lt;/p>
&lt;p>装箱和拆箱会影响代码的执行效率，因为编译后的&lt;code>class&lt;/code>代码是严格区分基本类型和引用类型的。并且，自动拆箱执行时可能会报&lt;code>NullPointerException&lt;/code>（两种类型对null的容忍度不同&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">// NullPointerException
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>所有包装类型都是不变类，和String一样通过内部的&lt;code>private final int&lt;/code>字段实现，无法派生子类&lt;/li>
&lt;li>判断值类型的变量是否相等可用&lt;code>==&lt;/code>，但是包装类型必须用&lt;code>equals&lt;/code>比较（引用类型存在值相等但指向不同对象的情况）！！！详细的演示&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">127&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">127&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">m&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">99999&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">99999&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;x == y: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">));&lt;/span> &lt;span style="color:#75715e">// true
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;m == n: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">));&lt;/span> &lt;span style="color:#75715e">// false
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;x.equals(y): &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">));&lt;/span> &lt;span style="color:#75715e">// true
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;m.equals(n): &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">));&lt;/span> &lt;span style="color:#75715e">// true
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>==&lt;/code>比较，较小的两个相同的&lt;code>Integer&lt;/code>返回&lt;code>true&lt;/code>，较大的两个相同的&lt;code>Integer&lt;/code>返回&lt;code>false&lt;/code>，这是因为&lt;code>Integer&lt;/code>是不变类，编译器把&lt;code>Integer x = 127;&lt;/code>自动变为&lt;code>Integer x = Integer.valueOf(127);&lt;/code>&lt;/p>
&lt;p>为了节省内存，&lt;code>Integer.valueOf()&lt;/code>对于较小的数，始终返回相同的实例，因此&lt;code>==&lt;/code>比较“恰好”为&lt;code>true&lt;/code>，但我们绝不能因为Java标准库的&lt;code>Integer&lt;/code>内部有缓存优化就用&lt;code>==&lt;/code>比较，必须用&lt;code>equals()&lt;/code>方法比较两个&lt;code>Integer&lt;/code>&lt;/p>
&lt;ul>
&lt;li>因为&lt;code>Integer.valueOf()&lt;/code>可能始终返回同一个&lt;code>Integer&lt;/code>实例，因此，在我们自己创建&lt;code>Integer&lt;/code>的时候，以下两种方法：&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>Integer n = new Integer(100);
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>Integer n = Integer.valueOf(100);
&lt;/code>&lt;/pre>&lt;p>方法二更好，不用每次都new新的实例而是直接使用静态工厂方法进行调用，它会做到内部优化，尽可能地返回缓存的实例以节省内存&lt;/p>
&lt;ul>
&lt;li>&lt;code>String&lt;/code>作引用类型，类似c中的指针，内部存储一个指向内存中的地址&lt;/li>
&lt;li>加上&lt;code>final&lt;/code>表示常量，创建实例后无法修改&lt;/li>
&lt;li>类型名过长时可用&lt;code>var&lt;/code>代替&lt;/li>
&lt;li>&lt;code>instanceof()&lt;/code>确定类型&lt;/li>
&lt;/ul>
&lt;h3 id="运算">运算&lt;/h3>
&lt;ul>
&lt;li>溢出不报错，注意自检&lt;/li>
&lt;li>优先级太多记不住，统一加括号完事了&lt;/li>
&lt;li>两种类型不同的数进行运算时会存在类型的隐式转换（short+int -&amp;gt; int+int），注意运算精度&lt;/li>
&lt;li>整数运算很准确，没有必要为了节省内存而使用&lt;code>byte&lt;/code>和&lt;code>short&lt;/code>进行整数运算&lt;/li>
&lt;li>整数运算在除数为&lt;code>0&lt;/code>时会报错，而浮点数运算在除数为&lt;code>0&lt;/code>时，不会报错，返回&lt;code>NAN&lt;/code> or &lt;code>Infinity&lt;/code> or &lt;code>-Infinity&lt;/code>&lt;/li>
&lt;li>布尔关系和三元运算中注意逻辑短路&lt;/li>
&lt;li>三元运算&lt;code>b ? x : y&lt;/code>后面的类型必须相同&lt;/li>
&lt;/ul>
&lt;h3 id="字符字符串">字符&amp;amp;字符串&lt;/h3>
&lt;ul>
&lt;li>Java的&lt;code>String&lt;/code>和&lt;code>char&lt;/code>在内存中总是以Unicode编码表示&lt;/li>
&lt;li>字符char用&lt;code>''&lt;/code>，字符串用&lt;code>&amp;quot;&amp;quot;&lt;/code>（空字符串不等于null），字符串拼接存在类型隐式转换，&lt;code>&amp;quot;&amp;quot;&amp;quot; &amp;quot;&amp;quot;&amp;quot;&lt;/code>写多行字符串（同py）&lt;/li>
&lt;li>java中的字符串赋值操作可直接联想c的指针进行理解，通过内部的&lt;code>private final char[]&lt;/code>字段 以及没有任何修改&lt;code>char[]&lt;/code>的方法实现字符串的不可变性；基于这一点，如果传入的对象有可能改变，我们需要复制而不是直接引用&lt;/li>
&lt;li>字符串比较必须用&lt;code>equals()&lt;/code>或&lt;code>equalsIgnoreCase()&lt;/code>，不可偷懒用&lt;code>==&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>更多字符串的用法可几乎等同于Python，不列举&lt;/p>
&lt;ul>
&lt;li>&lt;code>String&lt;/code>和&lt;code>char[]&lt;/code>类型可以互相转换&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>char[] cs = &amp;quot;Hello&amp;quot;.toCharArray(); // String -&amp;gt; char[]
String s = new String(cs); // char[] -&amp;gt; String
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>如果修改了&lt;code>char[]&lt;/code>数组，&lt;code>String&lt;/code>并不会改变&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">char&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">cs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toCharArray&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cs&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#111">cs&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#111">0&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#39;X&amp;#39;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是因为通过&lt;code>new String(char[])&lt;/code>创建新的&lt;code>String&lt;/code>实例时，它并不会直接引用传入的&lt;code>char[]&lt;/code>数组，而是会复制一份，所以，修改外部的&lt;code>char[]&lt;/code>数组不会影响&lt;code>String&lt;/code>实例内部的&lt;code>char[]&lt;/code>数组，因为这是两个不同的数组&lt;/p>
&lt;ul>
&lt;li>早期的String总以char[]进行存储&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">String&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">char&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">offset&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">count&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>而较新的JDK版本的&lt;code>String&lt;/code>则以&lt;code>byte[]&lt;/code>存储：如果&lt;code>String&lt;/code>仅包含ASCII字符，则每个&lt;code>byte&lt;/code>存储一个字符，否则，每两个&lt;code>byte&lt;/code>存储一个字符，这样做的目的是为了节省内存，因为大量的长度较短的&lt;code>String&lt;/code>通常仅包含ASCII字符&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">String&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span> &lt;span style="color:#111">coder&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// 0 = LATIN1, 1 = UTF16
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于使用者来说，&lt;code>String&lt;/code>内部的优化不影响任何已有代码，因为它的&lt;code>public&lt;/code>方法签名是不变的&lt;/p>
&lt;h3 id="数组">数组&lt;/h3>
&lt;ul>
&lt;li>新建数组&lt;code>int[] n = new int[5];&lt;/code>，大小不可变，为引用类型&lt;/li>
&lt;li>对于数组元素（或所有可迭代的数据类型）的遍历直接使用&lt;code>for(int n:na){}&lt;/code>，缺点是无法指定遍历顺序，无法获取数组索引（n直接代表元素）&lt;/li>
&lt;li>快速打印数组内容&lt;code>System.out.println(Arrays.toString(ns));&lt;/code>&lt;/li>
&lt;li>快速打印二维数组内容&lt;code>System.out.println(Arrays.deepToString(ns));&lt;/code>&lt;/li>
&lt;li>可变参数用&lt;code>类型...&lt;/code>定义，可变参数相当于数组类型&lt;/li>
&lt;/ul>
&lt;h3 id="流程控制">流程控制&lt;/h3>
&lt;ul>
&lt;li>读取输入需要&lt;code>import java.util.Scanner&lt;/code>，由&lt;code>Scanner&lt;/code>对象进行读入操作&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Scanner&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">hello&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">Scanner&lt;/span> &lt;span style="color:#111">scanner&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Scanner&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">in&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">print&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Input your name: &amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">scanner&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">nextLine&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">print&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Input your age: &amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">age&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">scanner&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">nextInt&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Hi, %s, you are %d\n&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">age&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>switch语句不要忘break，case不用花括号&lt;/li>
&lt;li>&lt;code>default&lt;/code>语句，可以在漏写某个枚举常量时自动报错，从而及时发现错误&lt;/li>
&lt;/ul>
&lt;h2 id="oop基础">OOP基础&lt;/h2>
&lt;h3 id="类实例">类&amp;amp;实例&lt;/h3>
&lt;ul>
&lt;li>对象靠new&lt;/li>
&lt;li>一个java源文件可以包含多个类的定义，但只能定义一个public类，且public类名必须与文件名一致；如果要定义多个public类，必须拆到多个Java源文件中&lt;/li>
&lt;/ul>
&lt;h3 id="方法">方法&lt;/h3>
&lt;ul>
&lt;li>语法&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>修饰符 方法返回类型 方法名(方法参数列表) {
若干方法语句;
return 方法返回值;
}
// 无return 返回类型为void
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>变量设为private后可以通过public对外的方法间接修改&lt;/li>
&lt;li>没事儿就尽可能少用public，少暴露对外的方法&lt;/li>
&lt;li>与类名相同的方法作为construct构造方法，无返回值&lt;/li>
&lt;li>先初始化字段，再执行构造方法（可覆盖前面的&lt;/li>
&lt;li>可定义多个构造方法（传入参数类型 数量不同），new时会自动匹配；一个构造方法可以调用其他构造方法（便于代码复用），语法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">age&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Person&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">age&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">age&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">age&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Person&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">18&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 调用另一个构造方法Person(String, int)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Person&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Unnamed&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 调用另一个构造方法Person(String)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>非构造方法也可有多个重名的（参数不同 返回值通常相同），称为方法重载(Overload)，便于用一个名字处理多种参数输入&lt;/li>
&lt;/ul>
&lt;h3 id="继承多态">继承&amp;amp;多态&lt;/h3>
&lt;ul>
&lt;li>使用&lt;code>extends&lt;/code>关键字，例&lt;code>class Student extends Person&lt;/code>&lt;/li>
&lt;li>subclass == extended class; super class == parent class == base class&lt;/li>
&lt;li>子类不可访问父类的&lt;code>private&lt;/code>字段和方法，不能覆写父类带有&lt;code>final&lt;/code>关键字的方法，不能继承带有&lt;code>final&lt;/code>的类，不能重新赋值带有&lt;code>final&lt;/code>的字段&lt;/li>
&lt;li>&lt;code>private&lt;/code>访问权限被限定在&lt;code>class&lt;/code>的内部，而且与方法声明顺序无关；如果一个类内部还定义了nested class嵌套类，那么，嵌套类拥有访问&lt;code>private&lt;/code>的权限&lt;/li>
&lt;li>定义为&lt;code>protected&lt;/code>的字段和方法可以被子类访问，以及子类的子类&lt;/li>
&lt;li>继承之后&lt;code>super.name&lt;/code>, &lt;code>this.name&lt;/code>, &lt;code>name&lt;/code>都是一个意思，但如果存在方法覆写后调用父类方法就必须用&lt;code>super.name&lt;/code>（联想NodeJS的&lt;code>.call&lt;/code>, &lt;code>.apply&lt;/code> 异曲同工之妙）&lt;/li>
&lt;li>未注明&lt;code>extends xxx&lt;/code>的类自动被补上了&lt;code>extends Object&lt;/code>，最顶层的&lt;code>object&lt;/code>也是可以被覆写的&lt;/li>
&lt;li>任何类的构造方法中第一行语句必须是调用父类的构造方法，如未注明会自动补上&lt;code>super();&lt;/code>，所以如果父类没有默认的构造方法，子类就必须显式调用&lt;code>super()&lt;/code>并给出参数以便让编译器定位到父类的一个合适的构造方法————一句话：子类不继承父类的构造方法，是自动生成的（联想Nodejs执行代码时的wrapper）&lt;/li>
&lt;li>Java15之后允许&lt;code>sealed&lt;/code>修饰class，并可通过&lt;code>permits&lt;/code>限制能从该类继承的子类名称（目前为预览状态，可开启&lt;code>--enable-preview&lt;/code>和&lt;code>--source 15&lt;/code>开启）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">sealed&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Shape&lt;/span> &lt;span style="color:#111">permits&lt;/span> &lt;span style="color:#111">Rect&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Circle&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Triangle&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// xxx
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>向上转型基本无问题，向下可能回报ClassCastException的错误，用&lt;code>instanceof&lt;/code>判断一个实例究竟是不是某种类型&lt;/li>
&lt;li>子类与父类方法签名完全相同时可覆写(Override)，加上&lt;code>@Override&lt;/code>可以让编译器帮助检查是否进行了正确的覆写（非必要）&lt;/li>
&lt;li>new来的对象如果指定的类型不同，实际调用其方法时会不同，run起来才知道具体用的啥，这个叫多态(Polymorphic)，有助于实现功能拓展，封装底层逻辑 优化交互&lt;/li>
&lt;/ul>
&lt;h3 id="抽象类接口">抽象类&amp;amp;接口&lt;/h3>
&lt;ul>
&lt;li>抽象类不实现任何功能 仅为了定义方法签名，目的就是为了让子类继承并覆盖，注意这个类本身也要声明为&lt;code>abstract&lt;/code>作抽象类&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">abstract&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">abstract&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 无子句
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>当我们定义了一个抽象类和N个具体类，我们可以用抽象类作引用类型去引用具体类的子类实例，好处在于对实例的方法进行调用时并不关心抽象类型变量的具体子类型&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#111">Person&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Student&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#111">Person&lt;/span> &lt;span style="color:#111">t&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Teacher&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">// 不关心Person变量的具体子类型:
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#111">t&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">// 同样不关心新的子类是如何实现run()方法的：
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Person&lt;/span> &lt;span style="color:#111">e&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Employee&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这种尽量引用高层类型，避免引用实际子类型的方式，称之为面向抽象编程，本质：&lt;/p>
&lt;p>上层代码只定义规范(&lt;code>abstract class Person&lt;/code>)，不需要子类就可以实现业务逻辑（正常编译），具体的业务逻辑由不同的子类实现，调用者并不关心&lt;/p>
&lt;ul>
&lt;li>&lt;code>interface&lt;/code>比抽象类还抽象的纯抽象接口，无实例字段，所有方法都默认&lt;code>public abstract&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>当具体类实现一个接口时需要用&lt;code>implements&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Student&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Student&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75af00">@Override&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34; run&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75af00">@Override&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>一个类可以实现多个接口，一个接口也可以继承自另一个接口&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Student&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Person&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Hello&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// 实现了两个interface
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">Hello&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// 继承另一个接口
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>在接口中，可以定义&lt;code>default&lt;/code>方法；&lt;code>default&lt;/code>方法和抽象类的普通方法是有所不同的。因为&lt;code>interface&lt;/code>没有字段，&lt;code>default&lt;/code>方法无法访问字段，而抽象类的普通方法可以访问实例字段(Java&amp;gt;=1.8)&lt;/li>
&lt;/ul>
&lt;h3 id="静态字段静态方法">静态字段&amp;amp;静态方法&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>用&lt;code>static&lt;/code>关键字修饰的字段处于同一个共享作用域中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不推荐用&lt;code>实例.静态字段&lt;/code>去访问静态字段，因为在java中实例对象并没有静态字段(实际)，代码中可以访问是因为编译器可以根据实例类型自动转换为&lt;code>类名.静态字段&lt;/code>来访问&lt;/p>
&lt;/li>
&lt;li>
&lt;p>推荐用类名来访问静态字段，可以将其理解为类本身的字段&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用实例方法必须通过一个实例变量，而调用静态方法则不需要实例变量，通过类名就可以调用&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">Person&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setNumber&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">99&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Person&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">number&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">number&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setNumber&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>静态方法内部无法访问&lt;code>this&lt;/code>，也无法访问实例字段，只能访问静态字段&lt;/li>
&lt;li>静态方法常用于工具类，比如&lt;code>Arrays.sort()&lt;/code>和&lt;code>Math.random()&lt;/code>；java程序入口的&lt;code>main&lt;/code>也是静态方法噢&lt;/li>
&lt;li>对于接口而言虽然不能有实例字段，但是可以有&lt;code>public static final&lt;/code>加持的静态字段&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>public interface Person {
public static final int MALE = 1;
public static final int FEMALE = 2;
}
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#75715e">// 可简写
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// 编译器会自动加上public statc final:
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">MALE&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">1&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">FEMALE&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">2&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="包">包&lt;/h3>
&lt;ul>
&lt;li>使用package包来解决名字冲突（各个语言都有了 很好懂），可以用类的全名&lt;/li>
&lt;li>包没有父子关系！java.util和java.util.zip是不同的包，两者没有任何继承关系&lt;/li>
&lt;li>所有Java文件对应的目录层次要和包的层次一致，编译后的&lt;code>.class&lt;/code>文件也需要按照包结构存放&lt;/li>
&lt;li>位于同一个包的类，可以访问包作用域的字段和方法。不用&lt;code>public&lt;/code>、&lt;code>protected&lt;/code>、&lt;code>private&lt;/code>修饰的字段和方法就是包作用域&lt;/li>
&lt;li>&lt;code>import static&lt;/code>可以导入可以导入一个类的静态字段和静态方法&lt;/li>
&lt;li>Java编译器最终编译出的&lt;code>.class&lt;/code>文件只使用完整类名(超长)，所以编译器在遇到&lt;code>class&lt;/code>名称时如果非完整类名，按照 当前package-&amp;gt;import的包-&amp;gt;java.lang包 的顺序进行查找&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#75715e">// Main.java
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">test&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.text.Format&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">util&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">List&lt;/span> &lt;span style="color:#111">list&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// ok，使用完整类名 -&amp;gt; java.util.List
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Format&lt;/span> &lt;span style="color:#111">format&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// ok，使用import的类 -&amp;gt; java.text.Format
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;hi&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// ok，使用java.lang包的String -&amp;gt; java.lang.String
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// ok，使用java.lang包的System -&amp;gt; java.lang.System
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">MessageFormat&lt;/span> &lt;span style="color:#111">mf&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// 编译错误：无法找到MessageFormat: MessageFormat cannot be resolved to a type
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>编写class时，编译器自动帮我们&lt;code>import java.lang.*&lt;/code>(不包含&lt;code>java.lang.reflect&lt;/code>这样的包)和&lt;code>import&lt;/code>当前&lt;code>package&lt;/code>的其它class&lt;/li>
&lt;li>把方法定义为&lt;code>package&lt;/code>权限有助于测试，因为测试类和被测试类只要位于同一个&lt;code>package&lt;/code>，测试代码就可以访问被测试类的&lt;code>package&lt;/code>权限方法&lt;/li>
&lt;/ul>
&lt;h3 id="内部类">内部类&lt;/h3>
&lt;ul>
&lt;li>或称nested class嵌套类&lt;/li>
&lt;li>Inner Class定义在一个类的内部，它的实例不能单独存在&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">Outer&lt;/span> &lt;span style="color:#111">outer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Nested&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 实例化一个Outer
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Inner&lt;/span> &lt;span style="color:#111">inner&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">outer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">new&lt;/span> &lt;span style="color:#75af00">Inner&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 实例化一个Inner
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">inner&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">hello&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Outer&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// 调用Outer的构造方法来创建Inner实例
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Inner&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">hello&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>原因是Inner Class除了&lt;code>this&lt;/code>指向自己以外还隐含地持有一个Outer Class实例，可以用&lt;code>Outer.this&lt;/code>访问这个实例；所以，实例化一个Inner Class不能脱离Outer实例&lt;/p>
&lt;p>Inner Class和普通Class相比，除了能引用Outer实例外，还有一个额外的特权：可以修改Outer Class的&lt;code>private&lt;/code>字段；因为Inner Class的作用域在Outer Class内部，所以能访问Outer Class的&lt;code>private&lt;/code>字段和方法&lt;/p>
&lt;p>观察Java编译器编译后的&lt;code>.class&lt;/code>文件可以发现，&lt;code>Outer&lt;/code>类被编译为&lt;code>Outer.class&lt;/code>，而&lt;code>Inner&lt;/code>类被编译为&lt;code>Outer$Inner.class&lt;/code>&lt;/p>
&lt;ul>
&lt;li>还可以通过匿名类Anonymous Class来定义Inner Class，两者本质上相同&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">Outer&lt;/span> &lt;span style="color:#111">outer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Nested&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#111">outer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">asyncHello&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Outer&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">asyncHello&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">Runnable&lt;/span> &lt;span style="color:#111">r&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Runnable&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">//
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">};&lt;/span>
&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Thread&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">r&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">start&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Runnabale&lt;/code>本身是不能实例化的接口，这里实际定义了一个实现了&lt;code>Runnable&lt;/code>接口的匿名类，并通过new实例化 之后转型为Runnable，过程很多但是实现起来代码很简洁；和Inner Class一样也可以访问Outer Class的&lt;code>private&lt;/code>&lt;/p>
&lt;ul>
&lt;li>匿名类在定义时必须实例化，最终会编译为&lt;code>Outer$1.class&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#111">Runnable&lt;/span> &lt;span style="color:#111">r&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Runnable&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;span style="color:#75715e">// 实现必要的抽象方法...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>继承自普通类的匿名类，编译为&lt;code>Main$1.class&lt;/code>和&lt;code>Main$2.class&lt;/code>两个匿名类文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.HashMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">map1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
&lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">map2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;gt;()&lt;/span> &lt;span style="color:#f92672">{};&lt;/span> &lt;span style="color:#75715e">// 匿名类!
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">map3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;gt;()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#111">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;B&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">};&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">map3&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>静态内部类示例&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">StaticNested&lt;/span> &lt;span style="color:#111">sn&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">StaticNested&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#111">sn&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">hello&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Outer&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">NAME&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;OUTER&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">StaticNested&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">hello&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">NAME&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>用&lt;code>static&lt;/code>修饰的内部类和Inner Class有很大的不同，它不再依附于&lt;code>Outer&lt;/code>的实例，而是一个完全独立的类，因此无法引用&lt;code>Outer.this&lt;/code>，但它仍然可以访问&lt;code>Outer&lt;/code>的&lt;code>private&lt;/code>静态字段和静态方法；如果把&lt;code>StaticNested&lt;/code>移到&lt;code>Outer&lt;/code>之外，就失去了访问&lt;code>private&lt;/code>的权限&lt;/p>
&lt;h2 id="java核心类部分">Java核心类(部分)&lt;/h2>
&lt;h3 id="stringbuilder">StringBuilder&lt;/h3>
&lt;ul>
&lt;li>是一个可变对象，可以预分配缓冲区，向其中新增字符时，不会创建新的临时对象&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#111">StringBuilder&lt;/span> &lt;span style="color:#111">sb&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">StringBuilder&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">1024&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#111">1000&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">++)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">sb&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;,&amp;#39;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#111">sb&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">sb&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>可链式操作&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">var&lt;/span> &lt;span style="color:#111">sb&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">StringBuilder&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">1024&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#111">sb&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Mr &amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;!&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">insert&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;Hello, &amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">sb&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>实现的关键是定义的&lt;code>append()&lt;/code>方法会返回&lt;code>this&lt;/code>，这样就可以不断调用自身的其他方法；仿写链式调用函数&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">Adder&lt;/span> &lt;span style="color:#111">adder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Adder&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#111">adder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">3&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">5&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">inc&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">10&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">adder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">value&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Adder&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">sum&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Adder&lt;/span> &lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">sum&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Adder&lt;/span> &lt;span style="color:#75af00">inc&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">sum&lt;/span> &lt;span style="color:#f92672">++;&lt;/span>
&lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">value&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">sum&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>StringBuffer&lt;/code>和&lt;code>StringBuilder&lt;/code>接口完全相同，是早期版本，通过同步来保证多个线程操作&lt;code>StringBuffer&lt;/code>也是安全的，但是同步会带来执行速度的下降&lt;/li>
&lt;/ul>
&lt;h3 id="enum">enum&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">Weekday&lt;/span> &lt;span style="color:#111">day&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Weekday&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">SUN&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">day&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#111">Weekday&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">SAT&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#111">day&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#111">Weekday&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">SUN&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Work at home!&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Work at office!&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">enum&lt;/span> &lt;span style="color:#111">Weekday&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// 只需依次列出枚举的常量名
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">SUN&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">MON&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">TUE&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">WED&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">THU&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">FRI&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">SAT&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>enum&lt;/code>常量本身带有类型信息，即&lt;code>Weekday.SUN&lt;/code>类型是&lt;code>Weekday&lt;/code>，编译器会自动检查出类型错误&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不可能引用到非枚举的值，因为无法通过编译&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不同类型的枚举不能互相比较或者赋值，因为类型不符&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>enum&lt;/code>虽然也是引用类型，但因为其在JVM中只有唯一实例，所以可以直接用&lt;code>==&lt;/code>比较&lt;/p>
&lt;/li>
&lt;li>
&lt;p>继承自&lt;code>java.lang.Enum&lt;/code>，无法被继承，无法new实例&lt;/p>
&lt;/li>
&lt;li>
&lt;p>枚举类的字段也可以是非final类型，即可以在运行期修改，但是不推荐这样&lt;/p>
&lt;/li>
&lt;li>
&lt;p>天生适合switch，具有类型信息和有限个枚举常量&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">Weekday&lt;/span> &lt;span style="color:#111">day&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Weekday&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">SUN&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">switch&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">day&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">case&lt;/span> &lt;span style="color:#111">MON&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#00a8c8">case&lt;/span> &lt;span style="color:#111">TUE&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#00a8c8">case&lt;/span> &lt;span style="color:#111">WED&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#00a8c8">case&lt;/span> &lt;span style="color:#111">THU&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#00a8c8">case&lt;/span> &lt;span style="color:#111">FRI&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Today is &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">day&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;. Work at office!&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#00a8c8">break&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">case&lt;/span> &lt;span style="color:#111">SAT&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#00a8c8">case&lt;/span> &lt;span style="color:#111">SUN&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Today is &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">day&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;. Work at home!&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#00a8c8">break&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">RuntimeException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;cannot process &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">day&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">enum&lt;/span> &lt;span style="color:#111">Weekday&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">MON&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">TUE&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">WED&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">THU&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">FRI&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">SAT&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">SUN&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="record">record&lt;/h3>
&lt;p>java14开始&lt;/p>
&lt;ul>
&lt;li>不变类的class和字段都使用&lt;code>final&lt;/code>关键字，无法派生子类，创建实例后无法修改任何字段&lt;/li>
&lt;li>创建不变类后为了保证不变类的比较，还需要正确覆写&lt;code>equals()&lt;/code>和&lt;code>hashCode()&lt;/code>方法，手动覆写很麻烦，可以直接用record一行写出不变类&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Point&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Point&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">x&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">x&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">y&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">y&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">Point&lt;/span> &lt;span style="color:#111">p&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Point&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">123&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">456&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">x&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">y&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">record&lt;/span> &lt;span style="color:#75af00">Point&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后一行相当于&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Point&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">Record&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Point&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">x&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">x&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">y&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">y&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">format&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Point[x=%s, y=%s]&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#75af00">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">o&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">hashCode&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>除了用&lt;code>final&lt;/code>修饰class以及每个字段外，编译器还自动为我们创建了构造方法，和字段名同名的方法，以及覆写&lt;code>toString()&lt;/code>、&lt;code>equals()&lt;/code>和&lt;code>hashCode()&lt;/code>方法&lt;/p>
&lt;ul>
&lt;li>和&lt;code>enum&lt;/code>类似，我们自己不能直接从&lt;code>Record&lt;/code>派生，只能通过&lt;code>record&lt;/code>关键字由编译器实现继承&lt;/li>
&lt;li>如果要对参数进行检查，可以用Compact Constructor&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">record&lt;/span> &lt;span style="color:#75af00">Point&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Point&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">x&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#111">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#111">y&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#111">0&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalArgumentException&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译器生成的方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Point&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">Record&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Point&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// 这是我们编写的Compact Constructor:
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">x&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#111">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#111">y&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#111">0&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalArgumentException&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">// 这是编译器继续生成的赋值代码:
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>作为&lt;code>record&lt;/code>的&lt;code>Point&lt;/code>仍然可以通过&lt;code>of()&lt;/code>添加静态方法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">record&lt;/span> &lt;span style="color:#75af00">Point&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Point&lt;/span> &lt;span style="color:#75af00">of&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Point&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">0&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Point&lt;/span> &lt;span style="color:#75af00">of&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Point&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#111">var&lt;/span> &lt;span style="color:#111">z&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Point&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">of&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#111">var&lt;/span> &lt;span style="color:#111">p&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Point&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">of&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">123&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">456&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="异常处理">异常处理&lt;/h2>
&lt;h3 id="异常捕获异常">异常&amp;amp;捕获异常&lt;/h3>
&lt;ul>
&lt;li>Java内置异常处理机制，是一种&lt;code>class&lt;/code>，本身带有类型信息；异常可以在任何地方抛出，但只需要在上层捕获，这样可以做到和方法调用分离&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>try {
String s = processFile(“C:\\test.txt”);
// ok:
} catch (FileNotFoundException e) {
// file not found:
} catch (SecurityException e) {
// no read permission:
} catch (IOException e) {
// io error:
} catch (Exception e) {
// other error:
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>继承关系是这样的&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220227002539516.png" alt="image-20220227002539516">&lt;/p>
&lt;p>&lt;code>Throwable&lt;/code>是异常体系的根，它继承自&lt;code>Object&lt;/code>&lt;/p>
&lt;p>&lt;code>Error&lt;/code>表示严重错误，比如&lt;code>OutofMemoryError&lt;/code>, &lt;code>NoClassDefFoundError&lt;/code>, &lt;code>StackOverflowError&lt;/code>&lt;/p>
&lt;p>&lt;code>Exception&lt;/code>表示运行时的异常，可以被捕获并处理，比如&lt;code>NumberFormatException&lt;/code>, &lt;code>FileNotFoundException&lt;/code>, &lt;code>SocketException&lt;/code>；还包括一些可修正的语法错误，比如&lt;code>NullPointerException&lt;/code>, &lt;code>IndexOutOfBoundsException&lt;/code>&lt;/p>
&lt;ul>
&lt;li>常用异常&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-ascii" data-lang="ascii">Exception
│
├─ RuntimeException
│ │
│ ├─ NullPointerException
│ │
│ ├─ IndexOutOfBoundsException
│ │
│ ├─ SecurityException
│ │
│ └─ IllegalArgumentException
│ │
│ └─ NumberFormatException
│
├─ IOException
│ │
│ ├─ UnsupportedCharsetException
│ │
│ ├─ FileNotFoundException
│ │
│ └─ SocketException
│
├─ ParseException
│
├─ GeneralSecurityException
│
├─ SQLException
│
└─ TimeoutException
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>
&lt;p>必须捕获的异常，包括&lt;code>Exception&lt;/code>及其子类，但不包括&lt;code>RuntimeException&lt;/code>及其子类，这种类型的异常称为Checked Exception&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果不捕获Checked Exception，编译器会报错，原因是方法定义时使用&lt;code>throws Xxx&lt;/code>表示该方法可能抛出的异常类型，导致调用方在调用的时候，必须强制捕获这些异常&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不需要捕获的异常，包括&lt;code>Error&lt;/code>及其子类，&lt;code>RuntimeException&lt;/code>及其子类&lt;/p>
&lt;/li>
&lt;li>
&lt;p>捕获异常需要提前import&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.UnsupportedEncodingException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Arrays&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">bs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">toGBK&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;中文&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Arrays&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">bs&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">UnsupportedEncodingException&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#75af00">toGBK&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">UnsupportedEncodingException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// 用指定编码转换String为byte[]:
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getBytes&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;GBK&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>只要是方法声明的Checked Exception，不在调用层捕获，也必须在更高的调用层捕获；所有未捕获的异常，最终也必须在&lt;code>main()&lt;/code>方法中捕获&lt;/li>
&lt;li>所有异常都可以调用&lt;code>printStackTrace()&lt;/code>方法打印异常栈&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#75af00">toGBK&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getBytes&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;GBK&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">UnsupportedEncodingException&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// 先记下来再说:
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printStackTrace&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>如果不想用try可以直接把&lt;code>main()&lt;/code>方法定义为&lt;code>throws Exception&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.UnsupportedEncodingException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Arrays&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">bs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">toGBK&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;中文&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Arrays&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">bs&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#75af00">toGBK&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">UnsupportedEncodingException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// 用指定编码转换String为byte[]:
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getBytes&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;GBK&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>相当于声明了所有可能抛出的Exception，也就不用捕获了；代价就是一旦发生异常，程序会立刻退出，不够灵活&lt;/p>
&lt;ul>
&lt;li>当方法声明了可能抛出的异常，可以没有&lt;code>catch&lt;/code>，只使用&lt;code>try ... finally&lt;/code>结构&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">process&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">file&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">finally&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;END&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>可以一个try对多个catch，此时注意catch的顺序：子类在前，避免短路&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">process1&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#111">process2&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#111">process3&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;IO error&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">UnsupportedEncodingException&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// 永远捕获不到 会被上面的截胡
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Bad encoding&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="抛出异常">抛出异常&lt;/h3>
&lt;ul>
&lt;li>分两步：创建某个&lt;code>Exception&lt;/code>的实例 -&amp;gt; 抛出&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">process2&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">NullPointerException&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>如果一个方法捕获了某个异常后，又在&lt;code>catch&lt;/code>子句中抛出新的异常，就相当于把抛出的异常类型“转换”了；注意为了能追踪到完整的异常栈，在构造异常的时候，把原始的&lt;code>Exception&lt;/code>实例传进去&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">process1&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 01
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printStackTrace&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 05
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">process1&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">process2&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 02
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">NullPointerException&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// throw new IllegalArgumentException();
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalArgumentException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 04
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">process2&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">NullPointerException&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 03
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果用注释掉的方式写就会丢失&lt;code>NullPointerException&lt;/code>这一条&lt;/p>
&lt;ul>
&lt;li>在代码中获取原始异常可以使用&lt;code>Throwable.getCause()&lt;/code>方法。如果返回&lt;code>null&lt;/code>，说明已经是“根异常”了(Caused by: xxxx)&lt;/li>
&lt;li>如果在finally中抛出异常（尽量别），由于&lt;code>catch&lt;/code>中准备抛出的异常就“消失”了，所以这个没有被抛出的异常称为“被屏蔽”的异常Suppressed Exception&lt;/li>
&lt;li>如果我们需要获知所有的异常，可以先用&lt;code>origin&lt;/code>变量保存原始异常，然后调用&lt;code>Throwable.addSuppressed()&lt;/code>，把原始异常添加进来，最后在&lt;code>finally&lt;/code>抛出&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">origin&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">parseInt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;abc&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">origin&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">finally&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalArgumentException&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">origin&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addSuppressed&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">origin&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当&lt;code>catch&lt;/code>和&lt;code>finally&lt;/code>都抛出了异常时，虽然&lt;code>catch&lt;/code>的异常被屏蔽了，但是，&lt;code>finally&lt;/code>抛出的异常仍然包含了它：&lt;/p>
&lt;pre tabindex="0">&lt;code>Exception in thread &amp;quot;main&amp;quot; java.lang.IllegalArgumentException
at Main.main(Main.java:11)
Suppressed: java.lang.NumberFormatException: For input string: &amp;quot;abc&amp;quot;
at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
at java.base/java.lang.Integer.parseInt(Integer.java:652)
at java.base/java.lang.Integer.parseInt(Integer.java:770)
at Main.main(Main.java:6)
&lt;/code>&lt;/pre>&lt;p>通过&lt;code>Throwable.getSuppressed()&lt;/code>可以获取所有的&lt;code>Suppressed Exception&lt;/code>&lt;/p>
&lt;h3 id="自定义异常">自定义异常&lt;/h3>
&lt;ul>
&lt;li>见的做法是自定义一个&lt;code>BaseException&lt;/code>作为“根异常”，然后，派生出各种业务类型的异常；&lt;code>BaseException&lt;/code>需要从一个适合的&lt;code>Exception&lt;/code>派生，通常建议从&lt;code>RuntimeException&lt;/code>派生&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">BaseException&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">RuntimeException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">UserNotFoundException&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">BaseException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">LoginFailedException&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">BaseException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>自定义的&lt;code>BaseException&lt;/code>应该提供多个构造方法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">BaseException&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">RuntimeException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">BaseException&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">super&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">BaseException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">message&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Throwable&lt;/span> &lt;span style="color:#111">cause&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">super&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">message&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">cause&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">BaseException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">message&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">super&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">message&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">BaseException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Throwable&lt;/span> &lt;span style="color:#111">cause&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">super&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cause&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样，抛出异常的时候，就可以选择合适的构造方法&lt;/p>
&lt;h3 id="断言">断言&lt;/h3>
&lt;ul>
&lt;li>JVM默认关闭断言指令，需传入&lt;code>-enableassertions&lt;/code>或&lt;code>-ea&lt;/code>；还可以有选择地对特定地类启用断言，命令行参数是：&lt;code>-ea:com.itranswarp.sample.Main&lt;/code>，表示只对&lt;code>com.itranswarp.sample.Main&lt;/code>这个类启用断言；或者对特定地包启用断言，命令行参数是：&lt;code>-ea:com.itranswarp.sample...&lt;/code>（注意结尾有3个&lt;code>.&lt;/code>），表示对&lt;code>com.itranswarp.sample&lt;/code>这个包启动断言&lt;/li>
&lt;li>是一种调试方式，失败时会抛出&lt;code>AssertionError&lt;/code>，导致程序结束退出&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">double&lt;/span> &lt;span style="color:#111">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Math&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">abs&lt;/span>&lt;span style="color:#f92672">(-&lt;/span>&lt;span style="color:#111">123&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">45&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#00a8c8">assert&lt;/span> &lt;span style="color:#111">x&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#111">0&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#d88200">&amp;#34;x must &amp;gt;= 0&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// 会带上消息
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>不能用于可恢复的程序错误，只应该用于开发和测试阶段，对于可恢复的程序错误，不应该使用断言&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">sort&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">arr&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">assert&lt;/span> &lt;span style="color:#111">arr&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>应该直接捕获了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">sort&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">arr&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">arr&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalArgumentException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;array cannot be null&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="日志">日志&lt;/h2>
&lt;p>为了取代&lt;code>System.out.println()&lt;/code>，封装好了很多好用的方法&lt;/p>
&lt;h3 id="jdk-logging">JDK Logging&lt;/h3>
&lt;p>标准库自带&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.logging.Level&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.logging.Logger&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Hello&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">Logger&lt;/span> &lt;span style="color:#111">logger&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getGlobal&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#111">logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">info&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;start process...&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#111">logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">warning&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;memory is running out...&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#111">logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">fine&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;ignored.&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#111">logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">severe&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;process will be terminated...&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>JDK的Logging定义了7个日志级别，从严重到普通&lt;/li>
&lt;/ul>
&lt;p>SEVERE, WARNING, INFO(default), CONFIG, FINE, FINER, FINEST&lt;/p>
&lt;ul>
&lt;li>局限：配置不太方便，需要在JVM启动时传递参数&lt;code>-Djava.util.logging.config.file=&amp;lt;config-file-name&amp;gt;&lt;/code>，一旦开始运行&lt;code>main()&lt;/code>方法，就无法修改配置&lt;/li>
&lt;/ul>
&lt;h3 id="commons-logging">Commons Logging&lt;/h3>
&lt;p>第三方，由Apache创建，可以挂接不同的日志系统，并通过配置文件指定挂接的日志系统&lt;/p>
&lt;p>可作为日志接口，而非日志实现&lt;/p>
&lt;ul>
&lt;li>默认搜索Log4j，没有的话用JDK Logging&lt;/li>
&lt;li>使用很简单&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.logging.Log&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.logging.LogFactory&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">Log&lt;/span> &lt;span style="color:#111">log&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">LogFactory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getLog&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Main&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 获取实例
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">log&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">info&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;start...&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 打印日志
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">log&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">warn&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;end.&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>6个日志级别&lt;/li>
&lt;/ul>
&lt;p>FATAL, ERROR, WARNING, INFO(default), DEBUG, TRACE&lt;/p>
&lt;ul>
&lt;li>除&lt;code>info(String)&lt;/code>外还有&lt;code>info(String, Throwable)&lt;/code>这样一个重载方法，便于更简单地记录异常&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">log&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">error&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;got exception!&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>如果在静态方法中引用&lt;code>Log&lt;/code>，通常直接定义一个静态类型变量：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#75715e">// 在静态方法中引用Log:
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Log&lt;/span> &lt;span style="color:#111">log&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">LogFactory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getLog&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Main&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">foo&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">log&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">info&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>在实例方法中引用&lt;code>Log&lt;/code>，通常定义一个实例变量&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#75715e">// 在实例方法中引用Log:
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Log&lt;/span> &lt;span style="color:#111">log&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">LogFactory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getLog&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">getClass&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">foo&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#111">log&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">info&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>上面展示了两种&lt;code>getLog()&lt;/code>的方式，第二种的好处是子类可以直接使用该实例，原因是Java的动态特性，子类获取的&lt;code>Log&lt;/code>字段实际上相当于&lt;code>LogFactory.getLog(Student.class)&lt;/code>，但却是从父类继承而来，并且无需改动代码&lt;/li>
&lt;/ul>
&lt;h3 id="log4j">Log4j&lt;/h3>
&lt;p>日志实现（乐）Log4j，我真的好喜欢你啊！为了你，我不要用无序列表了！！！&lt;/p>
&lt;p>Log4j是一个组件化设计的日志系统，它的架构大致如下&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220227012115179.png" alt="image-20220227012115179">&lt;/p>
&lt;p>当我们使用Log4j输出一条日志时，Log4j自动通过不同的Appender把同一条日志输出到不同的目的地&lt;/p>
&lt;ul>
&lt;li>console：输出到屏幕；&lt;/li>
&lt;li>file：输出到文件；&lt;/li>
&lt;li>socket：通过网络输出到远程计算机；&lt;/li>
&lt;li>jdbc：输出到数据库&lt;/li>
&lt;/ul>
&lt;p>通过Filter来过滤哪些log需要被输出，最后，通过Layout来格式化日志信息&lt;/p>
&lt;p>使用Log4j时只需把一个&lt;code>log4j2.xml&lt;/code>的文件放到&lt;code>classpath&lt;/code>下就可以让Log4j读取配置文件并按照我们的配置来输出日志&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-xml" data-lang="xml">&lt;span style="color:#75715e">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;Configuration&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;Properties&amp;gt;&lt;/span>
&lt;span style="color:#75715e">&amp;lt;!-- 定义日志格式 --&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;Property&lt;/span> &lt;span style="color:#75af00">name=&lt;/span>&lt;span style="color:#d88200">&amp;#34;log.pattern&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>%d{MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36}%n%msg%n%n&lt;span style="color:#f92672">&amp;lt;/Property&amp;gt;&lt;/span>
&lt;span style="color:#75715e">&amp;lt;!-- 定义文件名变量 --&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;Property&lt;/span> &lt;span style="color:#75af00">name=&lt;/span>&lt;span style="color:#d88200">&amp;#34;file.err.filename&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>log/err.log&lt;span style="color:#f92672">&amp;lt;/Property&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;Property&lt;/span> &lt;span style="color:#75af00">name=&lt;/span>&lt;span style="color:#d88200">&amp;#34;file.err.pattern&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>log/err.%i.log.gz&lt;span style="color:#f92672">&amp;lt;/Property&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/Properties&amp;gt;&lt;/span>
&lt;span style="color:#75715e">&amp;lt;!-- 定义Appender，即目的地 --&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;Appenders&amp;gt;&lt;/span>
&lt;span style="color:#75715e">&amp;lt;!-- 定义输出到屏幕 --&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;Console&lt;/span> &lt;span style="color:#75af00">name=&lt;/span>&lt;span style="color:#d88200">&amp;#34;console&amp;#34;&lt;/span> &lt;span style="color:#75af00">target=&lt;/span>&lt;span style="color:#d88200">&amp;#34;SYSTEM_OUT&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#75715e">&amp;lt;!-- 日志格式引用上面定义的log.pattern --&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;PatternLayout&lt;/span> &lt;span style="color:#75af00">pattern=&lt;/span>&lt;span style="color:#d88200">&amp;#34;${log.pattern}&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/Console&amp;gt;&lt;/span>
&lt;span style="color:#75715e">&amp;lt;!-- 定义输出到文件,文件名引用上面定义的file.err.filename --&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;RollingFile&lt;/span> &lt;span style="color:#75af00">name=&lt;/span>&lt;span style="color:#d88200">&amp;#34;err&amp;#34;&lt;/span> &lt;span style="color:#75af00">bufferedIO=&lt;/span>&lt;span style="color:#d88200">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#75af00">fileName=&lt;/span>&lt;span style="color:#d88200">&amp;#34;${file.err.filename}&amp;#34;&lt;/span> &lt;span style="color:#75af00">filePattern=&lt;/span>&lt;span style="color:#d88200">&amp;#34;${file.err.pattern}&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;PatternLayout&lt;/span> &lt;span style="color:#75af00">pattern=&lt;/span>&lt;span style="color:#d88200">&amp;#34;${log.pattern}&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;Policies&amp;gt;&lt;/span>
&lt;span style="color:#75715e">&amp;lt;!-- 根据文件大小自动切割日志 --&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;SizeBasedTriggeringPolicy&lt;/span> &lt;span style="color:#75af00">size=&lt;/span>&lt;span style="color:#d88200">&amp;#34;1 MB&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/Policies&amp;gt;&lt;/span>
&lt;span style="color:#75715e">&amp;lt;!-- 保留最近10份 --&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;DefaultRolloverStrategy&lt;/span> &lt;span style="color:#75af00">max=&lt;/span>&lt;span style="color:#d88200">&amp;#34;10&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/RollingFile&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/Appenders&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;Loggers&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;Root&lt;/span> &lt;span style="color:#75af00">level=&lt;/span>&lt;span style="color:#d88200">&amp;#34;info&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#75715e">&amp;lt;!-- 对info级别的日志，输出到console --&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;AppenderRef&lt;/span> &lt;span style="color:#75af00">ref=&lt;/span>&lt;span style="color:#d88200">&amp;#34;console&amp;#34;&lt;/span> &lt;span style="color:#75af00">level=&lt;/span>&lt;span style="color:#d88200">&amp;#34;info&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#75715e">&amp;lt;!-- 对error级别的日志，输出到err，即上面定义的RollingFile --&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;AppenderRef&lt;/span> &lt;span style="color:#75af00">ref=&lt;/span>&lt;span style="color:#d88200">&amp;#34;err&amp;#34;&lt;/span> &lt;span style="color:#75af00">level=&lt;/span>&lt;span style="color:#d88200">&amp;#34;error&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/Root&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/Loggers&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/Configuration&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="slf4jlogback">SLF4J&amp;amp;Logback&lt;/h3>
&lt;p>类似上面那一对，做了些许改进&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Commons Logging&lt;/th>
&lt;th style="text-align:left">SLF4J&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">org.apache.commons.logging.Log&lt;/td>
&lt;td style="text-align:left">org.slf4j.Logger&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">org.apache.commons.logging.LogFactory&lt;/td>
&lt;td style="text-align:left">org.slf4j.LoggerFactory&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>仍使用xml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-xml" data-lang="xml">&lt;span style="color:#75715e">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;appender&lt;/span> &lt;span style="color:#75af00">name=&lt;/span>&lt;span style="color:#d88200">&amp;#34;CONSOLE&amp;#34;&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;ch.qos.logback.core.ConsoleAppender&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;encoder&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;pattern&amp;gt;&lt;/span>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;span style="color:#f92672">&amp;lt;/pattern&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/encoder&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/appender&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;appender&lt;/span> &lt;span style="color:#75af00">name=&lt;/span>&lt;span style="color:#d88200">&amp;#34;FILE&amp;#34;&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;ch.qos.logback.core.rolling.RollingFileAppender&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;encoder&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;pattern&amp;gt;&lt;/span>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;span style="color:#f92672">&amp;lt;/pattern&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;charset&amp;gt;&lt;/span>utf-8&lt;span style="color:#f92672">&amp;lt;/charset&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/encoder&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;file&amp;gt;&lt;/span>log/output.log&lt;span style="color:#f92672">&amp;lt;/file&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;rollingPolicy&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;fileNamePattern&amp;gt;&lt;/span>log/output.log.%i&lt;span style="color:#f92672">&amp;lt;/fileNamePattern&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/rollingPolicy&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;triggeringPolicy&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;MaxFileSize&amp;gt;&lt;/span>1MB&lt;span style="color:#f92672">&amp;lt;/MaxFileSize&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/triggeringPolicy&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/appender&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;root&lt;/span> &lt;span style="color:#75af00">level=&lt;/span>&lt;span style="color:#d88200">&amp;#34;INFO&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;appender-ref&lt;/span> &lt;span style="color:#75af00">ref=&lt;/span>&lt;span style="color:#d88200">&amp;#34;CONSOLE&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;appender-ref&lt;/span> &lt;span style="color:#75af00">ref=&lt;/span>&lt;span style="color:#d88200">&amp;#34;FILE&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/root&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>学完基础语法的感觉是约等于同时复建了PHP+c+Python+NodeJS，虽说是速通，但是感觉触类旁通，很多东西都明白了（大概）&lt;/p>
&lt;p>6小时速通基础，今天就可以学反射和其它的高级用法了！就可以跟链子了！！！&lt;/p>
&lt;p>好耶！！！&lt;/p></description></item></channel></rss>