<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>环境配置 on AmiaaaZ's Site</title><link>https://amiaaaz.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link><description>Recent content in 环境配置 on AmiaaaZ's Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 17 Mar 2022 10:58:56 +0800</lastBuildDate><atom:link href="https://amiaaaz.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/index.xml" rel="self" type="application/rss+xml"/><item><title>环境配置&amp;相关问题解决</title><link>https://amiaaaz.github.io/2022/03/17/maybe-help-someone/</link><pubDate>Thu, 17 Mar 2022 10:58:56 +0800</pubDate><guid>https://amiaaaz.github.io/2022/03/17/maybe-help-someone/</guid><description>&lt;details>
&lt;summary>
&lt;h4 class="inline">
本地搭建Visual Regexp
&lt;/h4>
&lt;/summary>
&lt;p>搭建原因大家应该都懂吧，一个是正则可视化实在是很香很必要，其次线下没网的话没有个离线工具就很容易gg，同类工具还有&lt;a href="https://github.com/gchq/CyberChef/releases/tag/v9.32.3">cyberchef&lt;/a>等&lt;/p>
&lt;p>&lt;a href="https://wangwl.net/static/projects/visualRegex/#">Visual Regexp在线地址&lt;/a> | &lt;a href="https://github.com/relax-code-relax-life/visualRegexPage">github仓库&lt;/a>&lt;/p>
&lt;p>在&lt;code>git clone&lt;/code>之后首先肯定是&lt;code>npm install&lt;/code>，出现vulnerabilities很正常，直接&lt;code>npm audit fix --force&lt;/code>，一次不行就两次&lt;/p>
&lt;p>奇葩的是作者自己的visual-regex包一直是以快捷方式的形式被安装（后来发现是整个项目的package.json编写的问题）&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211114182010887.png" alt="image-20211114182010887">&lt;/p>
&lt;p>解决方法：删除快捷方式，单独安装&lt;code>npm i visual-regex&lt;/code>，用everything查找到该包具体存在的位置，复制到node_modules目录下&lt;/p>
&lt;p>之后到build目录下&lt;code>node .\build.js&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211114182307150.png" alt="image-20211114182307150">&lt;/p>
&lt;p>报错hightlight.js并没有引入./lib/highlight，查看\highlight.js\package.json的exports部分，发现第90行的引用是&amp;quot;.&amp;quot;，将其改为&amp;quot;./lib/highlight&amp;quot;&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/JQW8B657%60%241JG%5BFOWY1I%7BBW.png" alt="img">&lt;/p>
&lt;p>再次build提示*&amp;lsquo;NODE_ENV&amp;rsquo; is not recognized as an internal or external command, operable program or batch file.*（此处截图走丢了），解决方法&lt;code>npm install -g win-node-env&lt;/code>&lt;/p>
&lt;p>之后&lt;code>node .\build.js&lt;/code>即可成功build，在devlist文件夹下的index.html即可正常使用相关功能&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
无法打开jar包应用
&lt;/h4>
&lt;/summary>
&lt;p>这个应该属于常见问题了，一般原因是java版本不对&lt;/p>
&lt;p>很多人选择设置不同名字的环境变量，比如java8，java11，我的话是只有java11是环境变量，在有些jar需要java8的环境时直接用everything搜索java.exe，复制路径之后&lt;code>xxx\java.exe -jar xyz.jar&lt;/code>这样来运行&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211117132839594.png" alt="image-20211117132839594">&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
远程调试Node.js
&lt;/h4>
&lt;/summary>
&lt;p>场景：用vulhub或其它已经打包好的docker环境复现cve需要远程调试&lt;/p>
&lt;p>首先修改对应的docker文件：package.json的&amp;quot;scripts&amp;quot;字段的&amp;quot;start&amp;quot;部分增加&lt;code>--inspect=0.0.0.0:port&lt;/code>，指名调试时的监听端口&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211117160017724.png" alt="image-20211117160017724">&lt;/p>
&lt;p>docker-compose.yml中增加监听端口&amp;quot;8000:9229&amp;quot;，之后正常&lt;code>docker-compose up -d&lt;/code>&lt;/p>
&lt;p>本地先下载好一样的文件，用vscode生成一个调试文档lauch.json&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211117155743006.png" alt="image-20211117155743006">&lt;/p>
&lt;p>需要改的配置有address（远程ip），port（远程监听端口），localRoot（本地路径），remote（远程路径），之后即可打断点调试&lt;/p>
&lt;p>出现unbound breakpoint正常，大概率是你的交互就没执行到打断点的地方，所以没什么反应&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
VirtualBox给虚拟机磁盘扩容
&lt;/h4>
&lt;/summary>
&lt;p>当初给kali只分配了16G（无奈啊，谁让我主机也就512，得省着用），导致今天pip一个包都失败&lt;/p>
&lt;p>之后我直接用自带的主机介质管理器增加盘片的大小&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220113110156096.png" alt="image-20220113110156096">&lt;/p>
&lt;p>当我把下面显示大小的条滑到24G的时候我觉得稳了，这还能不够用？？？于是自信开机&lt;/p>
&lt;p>笑死，GParted没识别出来，&lt;code>df -h&lt;/code>也完全没变化，我就又多分配了4G，结果裂开，还是没识别&lt;/p>
&lt;p>然后我发现问题在于快照的存储是单独有一个uuid的vdi的，而扩容时我选择在最上层的kali.vdi扩容，导致不会同步到下面的快照的存储信息&lt;/p>
&lt;p>解决方法就是把前面所有的快照删除掉，之后再开机就可以识别了&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220113112010762.png" alt="image-20220113112010762">&lt;/p>
&lt;p>由于未分配和/dev/sda1之间隔着扩展分区和swap，所以先删除这两个，扩容后再新建加回来&lt;/p>
&lt;p>应用修改之后自信开机，发现怎么kali的龙半天都不蓝…… 一番排错，之后发现是因为swap分区的uuid发生改变导致swap没有正常挂载（&lt;code>swapon --show&lt;/code>回显为空）&lt;/p>
&lt;p>输入&lt;code>blkid&lt;/code>复制/dev/sda5的uuid，将其复制粘贴到/etc/fstab的对应位置，就好啦&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
usage of api documented as @since xxx
&lt;/h4>
&lt;/summary>
&lt;p>idea-&amp;gt;Project Structure-&amp;gt;Project Settings-&amp;gt;Language level&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
tomcat&amp;amp;部署war包
&lt;/h4>
&lt;/summary>
&lt;p>傻逼Java，总是一堆问题&lt;/p>
&lt;p>首先是打war包，用Maven&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220301201126717.png" alt="image-20220301201126717">&lt;/p>
&lt;p>将会导出war到target目录下，将它复制到tomcat/webapps目录下，启动，结果直接来了404&lt;/p>
&lt;ul>
&lt;li>org.apache.catalina.core.StandardContext.startInternal 一个或多个listeners启动失败，更多详细信息查看对应的容器日志文件&lt;/li>
&lt;/ul>
&lt;p>在tomcat下的logs目录查看localhost.year-month-day.log，发现详细报错为org.apache.catalina.core.StandardContext.listenerStart 配置应用程序监听器[org.apache.shiro.web.env.EnvironmentLoaderListener]错误&lt;/p>
&lt;p>于是考虑是打包时没有带上依赖，查看war打包时的lib文件夹发现都不缺&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220301200217537.png" alt="image-20220301200217537">&lt;/p>
&lt;p>再回看完整报错，在最后有Caused by: java.lang.ClassNotFoundException: javax.servlet.ServletContextListener，发现问题和我们打包无关 而是&lt;a href="https://tomcat.apache.org/whichversion.html">tomcat版本&lt;/a>的问题&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/SX27EU%24RC%7EG_%5DQ%60%24%5DWM5M0I.png" alt="img">&lt;/p>
&lt;p>通过下载tomcat9版本来解决报错，&lt;a href="https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.59/bin/apache-tomcat-9.0.59.tar.gz">此处&lt;/a>是下载链接，直接解压&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./bin/catalina.sh run
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 用这个命令为了让简短报错直接打印在console&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220301200041360.png" alt="image-20220301200041360">&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
idea远程调试java web项目(jar/tomcat)
&lt;/h4>
&lt;/summary>
&lt;ul>
&lt;li>java -jar方式启动&lt;/li>
&lt;/ul>
&lt;p>以复现CVE-2020-13933为例，这里java项目直接-jar即可启动，无需依赖tomcat作web服务器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker pull jackey0/cve-2020-11989
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker cp &amp;lt;container-id&amp;gt;:/springboot-shiro-0.0.1-SNAPSHOT.jar /home/name/t3mp/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 8426对外web端口, 8001对外调试端口&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run -p 8426:8080 -p 8001:1456 &amp;lt;image-id&amp;gt; /bin/sh -c &lt;span style="color:#d88200">&amp;#39;java -jar -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1456 /springboot-shiro-0.0.1-SNAPSHOT.jar&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211026033544920.png" alt="image-20211026033544920">&lt;/p>
&lt;p>此处添加参数与docker的相同&lt;/p>
&lt;ul>
&lt;li>tomcat加载war包方式&lt;/li>
&lt;/ul>
&lt;p>编辑tomcat目录下./bin/catalina.sh，搜索&lt;code>JPDA_ADDRESS&lt;/code>，修改&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">JPDA_ADDRESS&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">&amp;#34;0.0.0.0:8000&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后idea设置与上面相同，tomcat启动&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./catalina.sh jpda run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>idea的远程看着花哨，有一堆设置可以选，但是那个看起来方便的tomcat remote server调试实际远不如这样，垃圾&lt;/p>
&lt;p>之后打断点调试即可，熟练掌握右键-&amp;gt;add as a library的方式调试核心jar&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
idea打jar包（非maven）
&lt;/h4>
&lt;/summary>
&lt;p>maven的话相当简单，直接用右侧maven工具栏即可完成build&lt;/p>
&lt;p>非maven下，以通达OA综合利用工具为例&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220325175858329.png" alt="image-20220325175858329">&lt;/p>
&lt;p>注意到根目录下就有.idea文件夹，但是直接idea打开并build并不会得到编译好的jar，排错后发现manifest file指定的com.xxx主类有问题，是项目的module没有设置好&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220325180109708.png" alt="image-20220325180109708">&lt;/p>
&lt;p>需要在这里设置Content Root，这样才可以在Artifacts处正确读取到Manifest File（不然是不正常的），并且module sdk也要设置好（不然为空）&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220325180213012.png" alt="image-20220325180213012">&lt;/p>
&lt;p>之后勾选Include in project build，再build就正常了&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
idea打jar包（maven）
&lt;/h4>
&lt;/summary>
&lt;p>以冰蝎3.0.11为例，下载github上已经反编译好的源码（感谢带佬的反编译）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/MountCloud/BehinderClientSource.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>idea打开，首先把项目sdk之类的改成jdk8，然后就是排错之路：&lt;/p>
&lt;ul>
&lt;li>pom.xml的com.sun的systemPath改为绝对路径&lt;/li>
&lt;/ul>
&lt;p>默认是取用系统环境变量，我本机主要还是java11，而com.sun的那个包在java8下面，所以我改成了绝对路径&lt;/p>
&lt;ul>
&lt;li>idea虽然可以自动解决maven依赖缺失问题，但是可能会由于烂网导致某个依赖下载一半留下一堆sha1, part文件却没有主体jar，只需要把这个依赖的主文件夹删掉，再maven reload即可重新下载&lt;/li>
&lt;/ul>
&lt;p>其它问题就没有了，直接maven package即可得到目标jar&lt;/p>
&lt;ul>
&lt;li>
&lt;p>还有部分包的问题，可以省事都改成&lt;code>&amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;/code>，有依赖会好些&lt;/p>
&lt;/li>
&lt;li>
&lt;p>net.rebeyond.behinder.dao.ShellManager#ShellManager()的DB_PATH修改为&lt;code>./data.db&lt;/code>，把资源文件中的data.db放入target下 和最后的jar包同目录即可&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/details>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
idea在build项目时报错 internal java compiler error
&lt;/h4>
&lt;/summary>
&lt;p>有以下几个需要排错的地方&lt;/p>
&lt;ul>
&lt;li>Project Structure&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220401113924920.png" alt="image-20220401113924920">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220401113939224.png" alt="image-20220401113939224">&lt;/p>
&lt;ul>
&lt;li>Settings&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220401114013043.png" alt="image-20220401114013043">&lt;/p>
&lt;ul>
&lt;li>pom.xml&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220401114103768.png" alt="image-20220401114103768">&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
java rmi调试报错解决
&lt;/h4>
&lt;/summary>
&lt;p>亲测用&lt;code>-D&lt;/code>方式添加参数没用（可能是我本地环境太垃圾了 破win10）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.rmi.server.useCodebaseOnly&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;false&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.security.policy&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;E:\\client.policy&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setProperty&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;java.rmi.server.codebase&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#d88200">&amp;#34;http://nxo90f9obuj1boi0bzbdanmca3gt4i.burpcollaborator.net/&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">getSecurityManager&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#00a8c8">null&lt;/span>&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;Setup SecurityManager...&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">System&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#75af00">setSecurityManager&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#00a8c8">new&lt;/span> &lt;span style="color:#111">SecurityManager&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>grant {
permission java.security.AllPermission;
};
&lt;/code>&lt;/pre>&lt;p>参考：https://coderanch.com/t/654168/java/java-security-AccessControlException-access-denied&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
windows&amp;#43;vscode使用gmp库(静态库)
&lt;/h4>
&lt;/summary>
&lt;p>下载&lt;a href="https://gmplib.org/">gmp&lt;/a>，&lt;a href="https://mirrors.tuna.tsinghua.edu.cn/msys2/distrib/x86_64/">msys2&lt;/a>，修改msys的pacman的&lt;a href="https://mirror.tuna.tsinghua.edu.cn/help/msys2/">源&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># msys2.exe&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pacman -Sy &lt;span style="color:#75715e"># 刷新软件包数据&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pacman -S mingw-w64-x86_64-toolchain &lt;span style="color:#75715e"># 安装64位mingw&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># mingw64.exe&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pacman -Ss msys/gcc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pacman -Ss msys/make
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">cd&lt;/span> D:/gmp &lt;span style="color:#75715e"># 以下步骤并不会特别耗时 半个小时内应该就可&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./configure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make check
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>生成的静态库文件在gmp内的&lt;code>.libs&lt;/code>目录下，使用时&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;D:/gmp-6.2.1/gmp.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在vscode的tasks.json中添加这样的参数&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220506013507059.png" alt="image-20220506013507059">&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;#34;-I&amp;#34;,
&amp;#34;D:\\gmp-6.2.1&amp;#34;, // gmp.h所在文件夹
&amp;#34;-L&amp;#34;,
&amp;#34;D:\\gmp-6.2.1\\.libs&amp;#34;, // .libs文件夹路径 静态库所在处
&amp;#34;-l&amp;#34;,
&amp;#34;gmp&amp;#34; // 表示libgmp.a库
&lt;/code>&lt;/pre>&lt;p>继续f5即可（因为我是把f5当编译用的 runcode不行 f5行（（（&lt;/p>
&lt;p>————最后吐槽一下windows上编译c程序的繁琐问题（仅针对vscode 没用过vc）。最开始学c的时候顺着python用vscode的习惯就想着用vscode写c，然后根据&lt;a href="https://www.zhihu.com/question/30315894/answer/154979413">教程&lt;/a>配好了环境：下载MinGW、配置.vscode的调试信息、下载vscode的相关插件，终于写出了hello word，但是之后问题也没断过，比如大家都清楚的控制台gbk和utf-8，以及chcp 65001和chcp 936的永恒之争，最后我妥协的方式是把所有的c文件编码格式设为gbk，同时将调试参数改为&lt;code>-finput-charset=GBK -fexec-charset=GBK&lt;/code>；第二个问题就是MinGW64这个坑货了，当时安装时我完全没注意到还有很多选项，直接zip解压的&lt;/p>
&lt;pre tabindex="0">&lt;code>gcc version 8.1.0 (x86_64-posix-seh-rev0, Built by MinGW-W64 project)
&lt;/code>&lt;/pre>&lt;p>后来做免杀发现寄了，这个&lt;code>seh&lt;/code>的版本不能编译32位的文件，即使加了&lt;code>-m32&lt;/code>也不行，草，妈的。我当时不想再破坏主机的环境，所以在虚拟机装了&lt;code>sjlj&lt;/code>版的，终于可以用&lt;code>-m32&lt;/code>了&lt;/p>
&lt;p>再然后就是现在，为了用gmp库我还得借助msys，用它的make，那你MinGW的cmake是干什么吃的？？？？？&lt;/p>
&lt;p>而且，而且，mysys下通过pacman安装的MinGW64也无法正确编译32位程序&lt;/p>
&lt;p>最后的解决方法是把sjlj版的直接覆盖掉我用不到的MinGW32文件夹里，然后实现了顺滑的&lt;code>-m32&lt;/code>&lt;/p>
&lt;p>总之。还是。非常无语。&lt;/p>
&lt;/details></description></item><item><title>PHP远程debug环境配置</title><link>https://amiaaaz.github.io/2021/11/25/php-remote-debug-env-init/</link><pubDate>Thu, 25 Nov 2021 18:44:34 +0800</pubDate><guid>https://amiaaaz.github.io/2021/11/25/php-remote-debug-env-init/</guid><description>&lt;p>首先，这里的情况与一般的本地调试localhost不同，是本地debug远程主机的docke内的php项目，也就是这里的laravel；可能有的人觉得多此一举，直接在本地搭建项目、运行、debug一气呵成，速度还快，何必到远程跑一通？那我只能说too young，年轻人还是要有点长远的打算（&lt;/p>
&lt;p>一切的起因是我想复现cve-2021-3129，顺便亲自动手跟一跟&amp;amp;挖一挖laravel框架反序列化的链子，结果代码审计之前先被环境配置困住了；被这个糟心的调试从周二下午折磨到周四的凌晨，几乎是把能踩的坑踩了个遍（痛苦面具），直到现在的解决方案也不能算是最优解，不过是能正常稳定的跑起来了，次优解；感谢portainer让我能轻松创建docker&lt;/p>
&lt;p>把详细的步骤记录到这篇博客里，希望可以帮助到看到的人~欢迎友好交流！&lt;/p>
&lt;hr>
&lt;p>先说下本次配置的环境整体需求吧：&lt;/p>
&lt;ul>
&lt;li>远程vps的docker(FROM php:7.4-apache): 需开放web页面端口 + ssh端口（无需挂载目录&lt;/li>
&lt;li>laravel 8.4.2, laravel/framework 8.22.1, facade/ignition 2.5.1&lt;/li>
&lt;li>本地ide: PHPStorm + 一个映射到公网ip的供调试连接使用的端口（后面会解释原因）&lt;/li>
&lt;/ul>
&lt;p>除了最后的laravel之外就都是调php的通用流程啦，让我们开始吧~&lt;/p>
&lt;h2 id="远程dockerlaravel的环境搭建">远程docker&amp;amp;laravel的环境搭建&lt;/h2>
&lt;p>以php:7.4-apache镜像作为基础进行创建，我这里用的是portainer（别问为什么不写dockerfile，问就是还在学着怎么写（一定不鸽 近期会更新到这里的&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125164513693.png" alt="image-20211125164513693">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apt-get install -y ssh git unzip
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vim /etc/ssh/sshd_config &lt;span style="color:#75715e"># 开启对应选项 比如允许root连接什么的 不用我细嗦 各位带手子们都应该懂&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pecl install xdebug
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>touch /var/log/php/xdebug_remote.log &lt;span style="color:#75715e"># 如果需要log的话要提前创建好噢&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vim /usr/local/etc/php/php.ini &lt;span style="color:#75715e"># 将下面框中内容粘到末尾即可&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">[Xdebug]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">; 这一项安装好之后会有提示&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">zend_extension&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">&amp;#34;/usr/local/lib/php/extensions/no-debug-non-zts-20190902/xdebug.so&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">xdebug.mode&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">debug&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">xdebug.client_host&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">your_vps&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">xdebug.client_port&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">port&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">xdebug.idekey&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">laravel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">xdebug.remote_handler&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">&amp;#34;dbgp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">xdebug.log&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">&amp;#34;/var/log/php/xdebug_remote.log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此处安装版本为xdebug3，与xdebug2的配置语法有一些出入，具体更新的内容详见&lt;a href="https://xdebug.org/docs/upgrade_guide">更新文档&lt;/a>，安装好xdebug后执行&lt;code>php -v&lt;/code>命令会有显示版本&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125164949111.png" alt="image-20211125164949111">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wget https://github.com/composer/composer/releases/download/2.1.12/composer.phar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mv composer.phar /usr/local/bin/composer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chmod +x /usr/local/bin/composer
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">cd&lt;/span> /var/www
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>composer create-project laravel/laravel . &lt;span style="color:#d88200">&amp;#34;v8.4.2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vim composer.json &lt;span style="color:#75715e"># 修改内容见下&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>composer update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mv public html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chmod -R &lt;span style="color:#ae81ff">777&lt;/span> /var/www
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">&amp;#34;laravel/framework&amp;#34;: &amp;#34;8.22.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">&amp;#34;facade/ignition&amp;#34;: &amp;#34;2.5.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>一个坑点：即使指定了&lt;a href="laravel/laravel">laravel/laravel&lt;/a>版本，composer创建默认会使用最新的&lt;a href="laravel/framework">laravel/framework&lt;/a>版本&amp;amp;相关组件依赖（比如现在是8.73.2），由于我们需要复现的cve有特殊的laravel组件版本需求，，所以我们需要单独对composer.json进行修改，然后执行&lt;code>composer update&lt;/code>进行更新&lt;/p>
&lt;p>一切顺利的话访问web页面就可以看到laravel啦&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125165355843.png" alt="image-20211125165355843">&lt;/p>
&lt;h2 id="与本地的phpstorm连接起来进行debug">与本地的PHPStorm连接起来进行debug&lt;/h2>
&lt;p>开始之前先自问自答一下：为什么调试要一个能映射到公网的端口？&lt;/p>
&lt;p>PHPStorm中集成了遵循DBGp协议的Xdebug插件，当开启监听时会监听本地指定端口，当访问指定server的web页面并带有含有ide_key的特定cookie参数之后，Xdebug会接收到这个参数并开启debug，通过DBGp协议向php.ini中指定的ip&amp;amp;port发送请求，当这个port指向我们ide在监听的端口时，就会建立起Xdebug和ide的连接（使用DBGp协议通讯），随后它们之间进行数据交互，如此反复；更详细的内容请参见-&amp;gt;&lt;a href="https://xdebug.org/docs/dbgp#id32">6.3 IDE to debugger engine communications&lt;/a>&lt;/p>
&lt;p>这下就好理解了叭？也就是说，需要一个与远程代码运行环境处在同一个网段下的端口（公网的更好）；接下来就是配置啦&lt;/p>
&lt;h3 id="内网穿透">内网穿透&lt;/h3>
&lt;p>内网穿透我使用的是nps，配置过程可以参考&lt;a href="https://ehang-io.github.io/nps/#/run">官方文档&lt;/a>，由于我这里配的比较早 这部分跳过&lt;/p>
&lt;h3 id="phpstorm的设置有一堆">PHPStorm的设置有一堆&lt;/h3>
&lt;p>把docker中/www目录打包拖下来，用PHPStorm打开&lt;/p>
&lt;h4 id="设置debug">设置Debug&lt;/h4>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125172830540.png" alt="image-20211125172830540">&lt;/p>
&lt;p>20007是本地端口，被映射到公网ip&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125172903465.png" alt="image-20211125172903465">&lt;/p>
&lt;p>这里的20007是公网端口，代理本地的20007&lt;/p>
&lt;p>如果我讲清楚前面原理的话，大家应该能理解这两个地方的端口设置二选一即可&lt;/p>
&lt;h4 id="设置deployment">设置Deployment&lt;/h4>
&lt;p>用SFTP与docker进行ssh连接，文件映射&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125174439189.png" alt="image-20211125174439189">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125174449223.png" alt="image-20211125174449223">&lt;/p>
&lt;h4 id="设置远程php解释器">设置远程php解释器&lt;/h4>
&lt;p>选择ssh模式，配一下账号密码端口就行（至于为什么不用docker/docker-compose，之后会说），这里的Path mappings直接就是Deployment中配好的，可以单独再加，但是没必要&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125173731219.png" alt="image-20211125173731219">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125174004041.png" alt="image-20211125174004041">&lt;/p>
&lt;h4 id="设置server">设置Server&lt;/h4>
&lt;p>注意高亮地方的设置，是web页面的端口，也要设置好本地的路径映射&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125173454167.png" alt="image-20211125173454167">&lt;/p>
&lt;h3 id="验证一下联通情况">验证一下联通情况&lt;/h3>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125175835232.png" alt="image-20211125175835232">&lt;/p>
&lt;p>好耶~&lt;/p>
&lt;h3 id="浏览器插件xdebug-helper">浏览器插件Xdebug helper&lt;/h3>
&lt;p>设置Debug Configuration，选PHP Remote Debug模式&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125175154353.png" alt="image-20211125175154353">&lt;/p>
&lt;p>安装插件，设置ide_key，开启小虫子&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125180035074.png" alt="image-20211125180035074">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125180424620.png" alt="image-20211125180424620">&lt;/p>
&lt;h2 id="终于完了">终于完了&lt;/h2>
&lt;p>随便打个断点，开启本地监听&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125180223037.png" alt="image-20211125180223037">&lt;/p>
&lt;p>刷新页面&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125180453865.png" alt="image-20211125180453865">&lt;/p>
&lt;p>芜湖起飞！&lt;/p>
&lt;h2 id="待完善的地方">***待完善的地方&lt;/h2>
&lt;ul>
&lt;li>配置远程php解释器可以使用docker/docker-compose，这两个都需要单独挂载关键目录出来，配置上与ssh的区别还是有点大的，也需要注意docker-compose文件的编写，先扔一个参考资料-&amp;gt;&lt;a href="https://www.pascallandau.com/blog/setup-phpstorm-with-xdebug-on-docker/#setup-the-docker-containers">Setting up PhpStorm with Xdebug for local development on Docker &amp;hellip; natively and via Deployment Configuration.&lt;/a>&lt;/li>
&lt;li>关于dockerfile/docker-compose文件的编写，我还不是很熟练，跟不用说这样的php项目了，同样先扔一个参考资料-&amp;gt;&lt;a href="https://www.pascallandau.com/blog/structuring-the-docker-setup-for-php-projects/">Structuring the Docker setup for PHP Projects &amp;hellip; folder structure, Dockerfile templates and general fundamentals&lt;/a>&lt;/li>
&lt;li>PHPStorm有内置的docker管理功能，可以创建镜像-&amp;gt;配置debug一步到位&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>虽然踩了很多坑，但是也学到了不少东西，希望能多少帮助一些人少走弯路（&lt;/p>
&lt;p>限于篇幅原因，代码审计的部分就放到后面啦~&lt;/p>
&lt;p>最近更新的不太勤快，我先自我批评TAT，已经很菜了不能再不努力啊啊啊啊啊啊啊啊&lt;/p></description></item><item><title>pwn环境配置</title><link>https://amiaaaz.github.io/2021/10/28/pwn-env-init/</link><pubDate>Thu, 28 Oct 2021 00:41:15 +0800</pubDate><guid>https://amiaaaz.github.io/2021/10/28/pwn-env-init/</guid><description>&lt;p>以下为Ubutun16.04&amp;amp;py2的安装过程，其他版本命令几乎相同的~（Ubuntu20&amp;amp;py3的我也装了一个，毕竟py3是主流，技术总是向前发展的嘛~）&lt;/p>
&lt;p>————毕竟我是以初学者的视角来准备pwn的环境，肯定还有很多不全面&amp;amp;想不到的地方，之后用到了会回来补上的~&lt;/p>
&lt;p>安装pip2&amp;amp;pip3&amp;amp;ipython&lt;/p>
&lt;pre tabindex="0">&lt;code>curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py
sudo python get-pip.py
# sudo apt-get install python3-pip
curl https://bootstrap.pypa.io/pip/3.5/get-pip.py -o get-pip.py
sudo python3 get-pip.py
sudo apt-get install ipython
&lt;/code>&lt;/pre>&lt;p>安装py2的pwntools&lt;/p>
&lt;pre tabindex="0">&lt;code>pip2 install pathlib2 # py3无需此条
pip2 install pwntools
&lt;/code>&lt;/pre>&lt;p>安装GDB&amp;amp;插件&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt-get install git
git clone https://github.com/pwndbg/pwndbg.git
./setup.sh
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code># 使用peda-heap
git clone https://github.com/Mipu94/peda-heap.git
echo &amp;#34;source ~/GDB-Plugins/peda-heap/peda.py&amp;#34; &amp;gt; ~/.gdbinit
# 使用peda
git clone https://github.com/longld/peda.git
echo &amp;#34;source ~/GDB-Plugins/peda/peda.py&amp;#34; &amp;gt; ~/.gdbinit
# 使用gef
git clone https://github.com/hugsy/gef.git
echo &amp;#34;source ~/GDB-Plugins/gef/gef.py&amp;#34; &amp;gt; ~/.gdbinit
# 使用pwndbg
echo &amp;#34;source ~/GDB-Plugins/pwndbg/gdbinit.py&amp;#34; &amp;gt; ~/.gdbinit
# 自动切换脚本 https://blog.csdn.net/aptx4869_li/article/details/81566541
&lt;/code>&lt;/pre>&lt;p>安装one_gadget&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt-add-repository ppa:brightbox/ruby-ng
sudo apt-get update
sudo apt-get install ruby2.7 ruby2.7-dev
sudo apt-get install gem
sudo gem install one_gadget
&lt;/code>&lt;/pre>&lt;p>安装32位库&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt-get install lib32ncurses5
sudo apt install libc6-dev-i386
sudo apt-get install lib32z1
&lt;/code>&lt;/pre>&lt;p>安装checksec&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt instal checksec
&lt;/code>&lt;/pre>&lt;p>安装seccomp-tools&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo gem install seccomp-tools
&lt;/code>&lt;/pre>&lt;p>安装zshell&amp;amp;插件&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt-get install zsh
sh -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34;
# zsh-syntax-highlighting
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
echo &amp;#34;source ${(q-)PWD}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&amp;#34; &amp;gt;&amp;gt; ${ZDOTDIR:-$HOME}/.zshrc
source ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions
source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code># 如遇报错 error: RPC failed; result=35, HTTP code=0; fatal: The remote end hung up unexpectedly
# 将git clone https://xxxx/xxxx.git 换为git clone git://xxxx/xxxx.git
&lt;/code>&lt;/pre>&lt;p>安装virtualbox增强功能&lt;/p>
&lt;pre tabindex="0">&lt;code># 遇报错 unable to access “VBox_GAS_6.0.0 iso9660”
sudo apt-get install --reinstall linux-image-$(uname -r)
&lt;/code>&lt;/pre>&lt;p>最后结果&lt;/p>
&lt;p>ubuntu20+py3+zsh（应该能看出来我更喜欢这个x&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211028002711973.png" alt="image-20211028002711973">&lt;/p>
&lt;p>ubuntu16+py2&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211028003012735.png" alt="image-20211028003012735">&lt;/p>
&lt;hr>
&lt;p>第一次装的时候直接卡在了pwntools上，后来发现原因是pip2版本过低且无法直接通过&lt;code>pip -m pip install --upgrade pip&lt;/code>进行升级，只能手动下载get-pip.py后通过py2运行来安装&lt;/p>
&lt;p>这次配完之后最大的感触就是该换个大一点的硬盘了，512G属实绷不住我搞这么多虚拟机……&lt;/p>
&lt;p>之后可能会抽空学一下pwn，属于是web狗卷不动了要给自己找个后路（虽然百分之九十九的概率是两个都很菜，xs），卷起来卷起来！！！&lt;/p></description></item></channel></rss>