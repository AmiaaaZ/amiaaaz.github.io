<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pwn on AmiaaaZ's Site</title><link>https://amiaaaz.github.io/categories/pwn/</link><description>Recent content in pwn on AmiaaaZ's Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 18 Jan 2022 00:00:14 +0800</lastBuildDate><atom:link href="https://amiaaaz.github.io/categories/pwn/index.xml" rel="self" type="application/rss+xml"/><item><title>pwn rop入门-学习笔记</title><link>https://amiaaaz.github.io/2022/01/18/pwn-rop-study-notes/</link><pubDate>Tue, 18 Jan 2022 00:00:14 +0800</pubDate><guid>https://amiaaaz.github.io/2022/01/18/pwn-rop-study-notes/</guid><description>&lt;h1 id="rop">ROP&lt;/h1>
&lt;p>return oriented programming&lt;/p>
&lt;h2 id="简单的汇编指令">简单的汇编指令&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>ret -&amp;gt; pop EIP (ESP增大)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>leave -&amp;gt; move ESP, EBP; pop EBP&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>intel&lt;/th>
&lt;th>AT&amp;amp;T&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>mov eax, 8&lt;/td>
&lt;td>movl $8, %eax&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov ebx, 0ffffh&lt;/td>
&lt;td>movl $0xffff, %ebx&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int 80h&lt;/td>
&lt;td>int $80&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov eax, [ecx]&lt;/td>
&lt;td>movl (%ecx), %eax&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;h2 id="几种防护措施">几种防护措施&lt;/h2>
&lt;ul>
&lt;li>canary: 随机值防止栈溢出 (cookie)&lt;/li>
&lt;li>ASLR: 全局系统变量&lt;code>/proc/sys/kernel/randomize_va_space&lt;/code>，内存地址随机化，而gdb调试中为关闭状态&lt;/li>
&lt;li>PIE: 内存地址随机化&lt;/li>
&lt;li>NX: 数据不可执行&lt;/li>
&lt;/ul>
&lt;h2 id="ret2text">ret2text&lt;/h2>
&lt;p>在代码段.text存在后门函数，将ret address修改为后门函数的地址控制函数的执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">payload&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">cyclic&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">n&lt;/span>&lt;span style="color:#111">)&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">p32&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">sys_addr&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># n: ebp-eax+4(or 8), p32 or p64&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ret2shellcode">ret2shellcode&lt;/h2>
&lt;p>存在rwx代码片段，传入shellcode并修改ret address为shellcode所在的缓冲区地址&lt;/p>
&lt;p>NX不开启时直接写入栈缓冲区，开启时向bss缓冲区或堆缓冲区写入shellcode并使用mprotect赋予可执行权限&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://shell-storm.org/shellcode/">shellcode&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> &lt;span style="color:#111">pwn&lt;/span> &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">shellcraft&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">sh&lt;/span>&lt;span style="color:#111">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">shellcraft&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">amd64&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">sh&lt;/span>&lt;span style="color:#111">()&lt;/span> &lt;span style="color:#75715e"># before: context.arch = &amp;#39;amd64&amp;#39;!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">payload&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">asm&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">shellcraft&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">sh&lt;/span>&lt;span style="color:#111">())&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">shellcode&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">b&lt;/span>&lt;span style="color:#d88200">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">payload&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">shellcode&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#111">ljust&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">n&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#d88200">b&lt;/span>&lt;span style="color:#d88200">&amp;#39;A&amp;#39;&lt;/span>&lt;span style="color:#111">)&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#111">p32&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">sh_addr&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ret2syscall">ret2syscall&lt;/h2>
&lt;p>存在&lt;code>/bin/sh&lt;/code>或&lt;code>sh&lt;/code>字符串，构造gadgets多次跳转ret addr来执行&lt;code>execve&lt;/code>系统调用；gadgets通过&lt;code>ROPgadget&lt;/code>寻找&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ROPgadget --binary filename_here --only &lt;span style="color:#d88200">&amp;#39;pop|ret&amp;#39;&lt;/span> &lt;span style="color:#111">|&lt;/span> grep &lt;span style="color:#d88200">&amp;#39;ebx&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ROPgadget --binary filename_here --string &lt;span style="color:#d88200">&amp;#39;/bin/sh&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ROPgadget --binary rop --only &lt;span style="color:#d88200">&amp;#39;int&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>整体的payload构造与函数调用栈的工作原理和系统调用的实现有关，x86下通过&lt;code>int 0x80&lt;/code>执行，amd64下为&lt;code>syscall&lt;/code>；注意参数传入的顺序 (1-&amp;gt;N) 与栈中存放的顺序 (N-&amp;gt;1)的区别&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">payload&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#111">flat&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">cyclic&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">n&lt;/span>&lt;span style="color:#111">),&lt;/span> &lt;span style="color:#111">pop_eax_ret&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#ae81ff">0xb&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">pop_edx_ecx_ebx_ret&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">bin_sh_addr&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#111">int80_addr&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 0xb: execve的系统调用号 11, execve(&amp;#34;/bin/sh&amp;#34;, NULL, NULL)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>_Refer: &lt;a href="https://en.wikipedia.org/wiki/System_call">System call&lt;/a>&lt;/p>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
以下是本文中涉及到的 和我学习时看过的所有文章的链接🔗 每日感谢互联网的丰富资源（
&lt;/h4>
&lt;/summary>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1854y1y7Ro">XMCVE 2020 CTF Pwn入门课程&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/stackoverflow-basic/">ctfwiki - Stack Overflow&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.yuque.com/hxfqg9/bin/zzg02e">蒸米ROP&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/Vancir/365-days-get-xuanwulab-job/blob/master/weeks/week1.md">365-days-get-xuanwulab-job/weeks/week1.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.cnblogs.com/clover-toeic/p/3755401.html">C 语言函数调用栈 (一)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.cnblogs.com/clover-toeic/p/3756668.html">C 语言函数调用栈 (二)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.cnblogs.com/clover-toeic/p/3757091.html">C 语言函数调用栈 (二)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/System_call">System call&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/details></description></item><item><title>pwn环境配置</title><link>https://amiaaaz.github.io/2021/10/28/pwn-env-init/</link><pubDate>Thu, 28 Oct 2021 00:41:15 +0800</pubDate><guid>https://amiaaaz.github.io/2021/10/28/pwn-env-init/</guid><description>&lt;p>以下为Ubutun16.04&amp;amp;py2的安装过程，其他版本命令几乎相同的~（Ubuntu20&amp;amp;py3的我也装了一个，毕竟py3是主流，技术总是向前发展的嘛~）&lt;/p>
&lt;p>————毕竟我是以初学者的视角来准备pwn的环境，肯定还有很多不全面&amp;amp;想不到的地方，之后用到了会回来补上的~&lt;/p>
&lt;p>安装pip2&amp;amp;pip3&amp;amp;ipython&lt;/p>
&lt;pre tabindex="0">&lt;code>curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py
sudo python get-pip.py
# sudo apt-get install python3-pip
curl https://bootstrap.pypa.io/pip/3.5/get-pip.py -o get-pip.py
sudo python3 get-pip.py
sudo apt-get install ipython
&lt;/code>&lt;/pre>&lt;p>安装py2的pwntools&lt;/p>
&lt;pre tabindex="0">&lt;code>pip2 install pathlib2 # py3无需此条
pip2 install pwntools
&lt;/code>&lt;/pre>&lt;p>安装GDB&amp;amp;插件&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt-get install git
git clone https://github.com/pwndbg/pwndbg.git
./setup.sh
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code># 使用peda-heap
git clone https://github.com/Mipu94/peda-heap.git
echo &amp;#34;source ~/GDB-Plugins/peda-heap/peda.py&amp;#34; &amp;gt; ~/.gdbinit
# 使用peda
git clone https://github.com/longld/peda.git
echo &amp;#34;source ~/GDB-Plugins/peda/peda.py&amp;#34; &amp;gt; ~/.gdbinit
# 使用gef
git clone https://github.com/hugsy/gef.git
echo &amp;#34;source ~/GDB-Plugins/gef/gef.py&amp;#34; &amp;gt; ~/.gdbinit
# 使用pwndbg
echo &amp;#34;source ~/GDB-Plugins/pwndbg/gdbinit.py&amp;#34; &amp;gt; ~/.gdbinit
# 自动切换脚本 https://blog.csdn.net/aptx4869_li/article/details/81566541
&lt;/code>&lt;/pre>&lt;p>安装one_gadget&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt-add-repository ppa:brightbox/ruby-ng
sudo apt-get update
sudo apt-get install ruby2.7 ruby2.7-dev
sudo apt-get install gem
sudo gem install one_gadget
&lt;/code>&lt;/pre>&lt;p>安装32位库&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt-get install lib32ncurses5
sudo apt install libc6-dev-i386
sudo apt-get install lib32z1
&lt;/code>&lt;/pre>&lt;p>安装checksec&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt instal checksec
&lt;/code>&lt;/pre>&lt;p>安装seccomp-tools&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo gem install seccomp-tools
&lt;/code>&lt;/pre>&lt;p>安装zshell&amp;amp;插件&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt-get install zsh
sh -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34;
# zsh-syntax-highlighting
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
echo &amp;#34;source ${(q-)PWD}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&amp;#34; &amp;gt;&amp;gt; ${ZDOTDIR:-$HOME}/.zshrc
source ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions
source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code># 如遇报错 error: RPC failed; result=35, HTTP code=0; fatal: The remote end hung up unexpectedly
# 将git clone https://xxxx/xxxx.git 换为git clone git://xxxx/xxxx.git
&lt;/code>&lt;/pre>&lt;p>安装virtualbox增强功能&lt;/p>
&lt;pre tabindex="0">&lt;code># 遇报错 unable to access “VBox_GAS_6.0.0 iso9660”
sudo apt-get install --reinstall linux-image-$(uname -r)
&lt;/code>&lt;/pre>&lt;p>最后结果&lt;/p>
&lt;p>ubuntu20+py3+zsh（应该能看出来我更喜欢这个x&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211028002711973.png" alt="image-20211028002711973">&lt;/p>
&lt;p>ubuntu16+py2&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/AmiaaaZ/ImageOverCloud/master/wpImg/image-20211028003012735.png" alt="image-20211028003012735">&lt;/p>
&lt;hr>
&lt;p>第一次装的时候直接卡在了pwntools上，后来发现原因是pip2版本过低且无法直接通过&lt;code>pip -m pip install --upgrade pip&lt;/code>进行升级，只能手动下载get-pip.py后通过py2运行来安装&lt;/p>
&lt;p>这次配完之后最大的感触就是该换个大一点的硬盘了，512G属实绷不住我搞这么多虚拟机……&lt;/p>
&lt;p>之后可能会抽空学一下pwn，属于是web狗卷不动了要给自己找个后路（虽然百分之九十九的概率是两个都很菜，xs），卷起来卷起来！！！&lt;/p></description></item></channel></rss>